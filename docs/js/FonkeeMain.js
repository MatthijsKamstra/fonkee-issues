// Generated by Haxe 4.1.5
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var DateTools = function() { };
DateTools.__name__ = "DateTools";
DateTools.getMonthDays = function(d) {
	var month = d.getMonth();
	var year = d.getFullYear();
	if(month != 1) {
		return DateTools.DAYS_OF_MONTH[month];
	}
	var isB = year % 4 == 0 && year % 100 != 0 || year % 400 == 0;
	if(isB) {
		return 29;
	} else {
		return 28;
	}
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = "EReg";
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b;
		}
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,map: function(s,f) {
		var offset = 0;
		var buf_b = "";
		while(true) {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
			if(!this.r.global) {
				break;
			}
		}
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
	,__class__: EReg
};
var FonkeeMain = function() {
	var _gthis = this;
	window.document.addEventListener("DOMContentLoaded",function(event) {
		$global.console.log("Fonkee Issues " + "🐡");
		_gthis.init();
	});
};
FonkeeMain.__name__ = "FonkeeMain";
FonkeeMain.main = function() {
	var app = new FonkeeMain();
};
FonkeeMain.prototype = {
	init: function() {
		util_Debug.debugFavicon();
		this.showEstimate();
		this.showEstimateConverted();
	}
	,showEstimate: function() {
		var _gthis = this;
		var el = window.document.getElementById("code-estimate");
		if(el == null) {
			return;
		}
		console.log("src/FonkeeMain.hx:29:","showEstimate el: " + Std.string(el));
		window.fetch("data/estimate_2021.csv").then(function(response) {
			return response.text();
		}).then(function(data) {
			$global.console.log(data);
			_gthis.convertData(el,data);
		});
	}
	,showEstimateConverted: function() {
		var _gthis = this;
		var el = window.document.getElementById("code-estimate-converted");
		if(el == null) {
			return;
		}
		console.log("src/FonkeeMain.hx:46:","showEstimateConverted el: " + Std.string(el));
		window.fetch("data/estimate_2021.csv.converted.csv").then(function(response) {
			return response.text();
		}).then(function(data) {
			$global.console.log(data);
			_gthis.convertData(el,data);
		});
	}
	,convertData: function(el,content) {
		var arr = thx_csv_Dsv.decode(content,thx_csv_Csv.decodeOptions);
		console.log("src/FonkeeMain.hx:60:",arr);
		var html = "<table class=\"table table-striped table-hover\">";
		html += "<thead>";
		var row = arr[0];
		html += "<tr>";
		html += "<th scope=\"col\">#</th>";
		var _g = 0;
		var _g1 = row.length;
		while(_g < _g1) {
			var j = _g++;
			var col = row[j];
			html += "<th scope=\"col\">" + col + "</th>";
		}
		html += "</tr>";
		html += "</thead>";
		html += "<tbody>";
		var _g = 1;
		var _g1 = arr.length;
		while(_g < _g1) {
			var i = _g++;
			var row = arr[i];
			html += "<tr>";
			html += "<th scope=\"row\">" + i + "</th>";
			var _g2 = 0;
			var _g3 = row.length;
			while(_g2 < _g3) {
				var j = _g2++;
				var col = row[j];
				html += "<td>" + col + "</td>";
			}
			html += "</tr>";
		}
		html += "</tbody>";
		html += "</table>";
		el.innerHTML = html;
	}
	,__class__: FonkeeMain
};
var HxOverrides = function() { };
HxOverrides.__name__ = "HxOverrides";
HxOverrides.dateStr = function(date) {
	var m = date.getMonth() + 1;
	var d = date.getDate();
	var h = date.getHours();
	var mi = date.getMinutes();
	var s = date.getSeconds();
	return date.getFullYear() + "-" + (m < 10 ? "0" + m : "" + m) + "-" + (d < 10 ? "0" + d : "" + d) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (mi < 10 ? "0" + mi : "" + mi) + ":" + (s < 10 ? "0" + s : "" + s);
};
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k = s.split("-");
		return new Date(k[0],k[1] - 1,k[2],0,0,0);
	case 19:
		var k = s.split(" ");
		var y = k[0].split("-");
		var t = k[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw haxe_Exception.thrown("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var Lambda = function() { };
Lambda.__name__ = "Lambda";
Lambda.has = function(it,elt) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(x1 == elt) {
			return true;
		}
	}
	return false;
};
Math.__name__ = "Math";
var Reflect = function() { };
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.isObject = function(v) {
	if(v == null) {
		return false;
	}
	var t = typeof(v);
	if(!(t == "string" || t == "object" && v.__enum__ == null)) {
		if(t == "function") {
			return (v.__name__ || v.__ename__) != null;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
var Std = function() { };
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = "StringTools";
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	l -= s.length;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	buf_b += s == null ? "null" : "" + s;
	return buf_b;
};
StringTools.rpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	buf_b += s == null ? "null" : "" + s;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	return buf_b;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var ValueType = $hxEnums["ValueType"] = { __ename__ : "ValueType", __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"]
	,TNull: {_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_index:8,__enum__:"ValueType",toString:$estr}
};
var Type = function() { };
Type.__name__ = "Type";
Type.getEnum = function(o) {
	if(o == null) {
		return null;
	}
	return $hxEnums[o.__enum__];
};
Type.getClassName = function(c) {
	return c.__name__;
};
Type.createInstance = function(cl,args) {
	var ctor = Function.prototype.bind.apply(cl,[null].concat(args));
	return new (ctor);
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var ctorName = enm.__constructs__[e._hx_index];
	var params = enm[ctorName].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__ : "haxe.StackItem", __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"]
	,CFunction: {_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var haxe_CallStack = {};
haxe_CallStack.callStack = function() {
	return haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.callStack());
};
haxe_CallStack.exceptionStack = function(fullStack) {
	if(fullStack == null) {
		fullStack = false;
	}
	var eStack = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.exceptionStack());
	return fullStack ? eStack : haxe_CallStack.subtract(eStack,haxe_CallStack.callStack());
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	var _g1 = stack;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.subtract = function(this1,stack) {
	var startIndex = -1;
	var i = -1;
	while(++i < this1.length) {
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var j = _g++;
			if(haxe_CallStack.equalItems(this1[i],stack[j])) {
				if(startIndex < 0) {
					startIndex = i;
				}
				++i;
				if(i >= this1.length) {
					break;
				}
			} else {
				startIndex = -1;
			}
		}
		if(startIndex >= 0) {
			break;
		}
	}
	if(startIndex >= 0) {
		return this1.slice(0,startIndex);
	} else {
		return this1;
	}
};
haxe_CallStack.equalItems = function(item1,item2) {
	if(item1 == null) {
		if(item2 == null) {
			return true;
		} else {
			return false;
		}
	} else {
		switch(item1._hx_index) {
		case 0:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 0) {
				return true;
			} else {
				return false;
			}
			break;
		case 1:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 1) {
				var m1 = item1.m;
				var m2 = item2.m;
				return m1 == m2;
			} else {
				return false;
			}
			break;
		case 2:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 2) {
				var item11 = item1.s;
				var file1 = item1.file;
				var line1 = item1.line;
				var col1 = item1.column;
				var col2 = item2.column;
				var line2 = item2.line;
				var file2 = item2.file;
				var item21 = item2.s;
				if(file1 == file2 && line1 == line2 && col1 == col2) {
					return haxe_CallStack.equalItems(item11,item21);
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 3:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 3) {
				var class1 = item1.classname;
				var method1 = item1.method;
				var method2 = item2.method;
				var class2 = item2.classname;
				if(class1 == class2) {
					return method1 == method2;
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 4:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 4) {
				var v1 = item1.v;
				var v2 = item2.v;
				return v1 == v2;
			} else {
				return false;
			}
			break;
		}
	}
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s._hx_index) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s.m;
		b.b += "module ";
		b.b += m == null ? "null" : "" + m;
		break;
	case 2:
		var col = s.column;
		var line = s.line;
		var file = s.file;
		var s1 = s.s;
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b += file == null ? "null" : "" + file;
		b.b += " line ";
		b.b += line == null ? "null" : "" + line;
		if(col != null) {
			b.b += " column ";
			b.b += col == null ? "null" : "" + col;
		}
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var meth = s.method;
		var cname = s.classname;
		b.b += Std.string(cname == null ? "<unknown>" : cname);
		b.b += ".";
		b.b += meth == null ? "null" : "" + meth;
		break;
	case 4:
		var n = s.v;
		b.b += "local function #";
		b.b += n == null ? "null" : "" + n;
		break;
	}
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
haxe_IMap.prototype = {
	get: null
	,set: null
	,exists: null
	,remove: null
	,keys: null
	,iterator: null
	,__class__: haxe_IMap
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
	this.__skipStack = 0;
	var old = Error.prepareStackTrace;
	Error.prepareStackTrace = function(e) { return e.stack; }
	if(((native) instanceof Error)) {
		this.stack = native.stack;
	} else {
		var e = null;
		if(Error.captureStackTrace) {
			Error.captureStackTrace(this,haxe_Exception);
			e = this;
		} else {
			e = new Error();
			if(typeof(e.stack) == "undefined") {
				try { throw e; } catch(_) {}
				this.__skipStack++;
			}
		}
		this.stack = e.stack;
	}
	Error.prepareStackTrace = old;
};
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		e.__skipStack++;
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	__skipStack: null
	,__nativeException: null
	,__previousException: null
	,unwrap: function() {
		return this.__nativeException;
	}
	,__shiftStack: function() {
		this.__skipStack++;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,get_stack: function() {
		var _g = this.__exceptionStack;
		if(_g == null) {
			var value = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.normalize(this.stack),this.__skipStack);
			this.setProperty("__exceptionStack",value);
			return value;
		} else {
			var s = _g;
			return s;
		}
	}
	,setProperty: function(name,value) {
		try {
			Object.defineProperty(this,name,{ value : value});
		} catch( _g ) {
			this[name] = value;
		}
	}
	,__class__: haxe_Exception
});
var haxe_Int32 = {};
var haxe_NativeStackTrace = function() { };
haxe_NativeStackTrace.__name__ = "haxe.NativeStackTrace";
haxe_NativeStackTrace.saveStack = function(e) {
	haxe_NativeStackTrace.lastError = e;
};
haxe_NativeStackTrace.callStack = function() {
	var e = new Error("");
	var stack = haxe_NativeStackTrace.tryHaxeStack(e);
	if(typeof(stack) == "undefined") {
		try {
			throw e;
		} catch( _g ) {
		}
		stack = e.stack;
	}
	return haxe_NativeStackTrace.normalize(stack,2);
};
haxe_NativeStackTrace.exceptionStack = function() {
	return haxe_NativeStackTrace.normalize(haxe_NativeStackTrace.tryHaxeStack(haxe_NativeStackTrace.lastError));
};
haxe_NativeStackTrace.toHaxe = function(s,skip) {
	if(skip == null) {
		skip = 0;
	}
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var i = _g++;
			if(skip > i) {
				continue;
			}
			var line = stack[i];
			var matched = line.match(/^    at ([A-Za-z0-9_. ]+) \(([^)]+):([0-9]+):([0-9]+)\)$/);
			if(matched != null) {
				var path = matched[1].split(".");
				if(path[0] == "$hxClasses") {
					path.shift();
				}
				var meth = path.pop();
				var file = matched[2];
				var line1 = Std.parseInt(matched[3]);
				var column = Std.parseInt(matched[4]);
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1,column));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else if(skip > 0 && Array.isArray(s)) {
		return s.slice(skip);
	} else {
		return s;
	}
};
haxe_NativeStackTrace.tryHaxeStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = haxe_NativeStackTrace.prepareHxStackTrace;
	var stack = e.stack;
	Error.prepareStackTrace = oldValue;
	return stack;
};
haxe_NativeStackTrace.prepareHxStackTrace = function(e,callsites) {
	var stack = [];
	var _g = 0;
	while(_g < callsites.length) {
		var site = callsites[_g];
		++_g;
		if(haxe_NativeStackTrace.wrapCallSite != null) {
			site = haxe_NativeStackTrace.wrapCallSite(site);
		}
		var method = null;
		var fullName = site.getFunctionName();
		if(fullName != null) {
			var idx = fullName.lastIndexOf(".");
			if(idx >= 0) {
				var className = fullName.substring(0,idx);
				var methodName = fullName.substring(idx + 1);
				method = haxe_StackItem.Method(className,methodName);
			} else {
				method = haxe_StackItem.Method(null,fullName);
			}
		}
		var fileName = site.getFileName();
		var fileAddr = fileName == null ? -1 : fileName.indexOf("file:");
		if(haxe_NativeStackTrace.wrapCallSite != null && fileAddr > 0) {
			fileName = fileName.substring(fileAddr + 6);
		}
		stack.push(haxe_StackItem.FilePos(method,fileName,site.getLineNumber(),site.getColumnNumber()));
	}
	return stack;
};
haxe_NativeStackTrace.normalize = function(stack,skipItems) {
	if(skipItems == null) {
		skipItems = 0;
	}
	if(Array.isArray(stack) && skipItems > 0) {
		return stack.slice(skipItems);
	} else if(typeof(stack) == "string") {
		switch(stack.substring(0,6)) {
		case "Error\n":case "Error:":
			++skipItems;
			break;
		default:
		}
		return haxe_NativeStackTrace.skipLines(stack,skipItems);
	} else {
		return stack;
	}
};
haxe_NativeStackTrace.skipLines = function(stack,skip,pos) {
	if(pos == null) {
		pos = 0;
	}
	if(skip > 0) {
		pos = stack.indexOf("\n",pos);
		if(pos < 0) {
			return "";
		} else {
			return haxe_NativeStackTrace.skipLines(stack,--skip,pos + 1);
		}
	} else {
		return stack.substring(pos);
	}
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
	this.__skipStack++;
};
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	value: null
	,unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_crypto_Base64 = function() { };
haxe_crypto_Base64.__name__ = "haxe.crypto.Base64";
var haxe_ds_BalancedTree = function() {
};
haxe_ds_BalancedTree.__name__ = "haxe.ds.BalancedTree";
haxe_ds_BalancedTree.__interfaces__ = [haxe_IMap];
haxe_ds_BalancedTree.iteratorLoop = function(node,acc) {
	if(node != null) {
		haxe_ds_BalancedTree.iteratorLoop(node.left,acc);
		acc.push(node.value);
		haxe_ds_BalancedTree.iteratorLoop(node.right,acc);
	}
};
haxe_ds_BalancedTree.prototype = {
	root: null
	,set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,remove: function(key) {
		try {
			this.root = this.removeLoop(key,this.root);
			return true;
		} catch( _g ) {
			if(typeof(haxe_Exception.caught(_g).unwrap()) == "string") {
				return false;
			} else {
				throw _g;
			}
		}
	}
	,exists: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return true;
			} else if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return false;
	}
	,iterator: function() {
		var ret = [];
		haxe_ds_BalancedTree.iteratorLoop(this.root,ret);
		return new haxe_iterators_ArrayIterator(ret);
	}
	,keys: function() {
		var ret = [];
		this.keysLoop(this.root,ret);
		return new haxe_iterators_ArrayIterator(ret);
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,removeLoop: function(k,node) {
		if(node == null) {
			throw haxe_Exception.thrown("Not_found");
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return this.merge(node.left,node.right);
		} else if(c < 0) {
			return this.balance(this.removeLoop(k,node.left),node.key,node.value,node.right);
		} else {
			return this.balance(node.left,node.key,node.value,this.removeLoop(k,node.right));
		}
	}
	,keysLoop: function(node,acc) {
		if(node != null) {
			this.keysLoop(node.left,acc);
			acc.push(node.key);
			this.keysLoop(node.right,acc);
		}
	}
	,merge: function(t1,t2) {
		if(t1 == null) {
			return t2;
		}
		if(t2 == null) {
			return t1;
		}
		var t = this.minBinding(t2);
		return this.balance(t1,t.key,t.value,this.removeMinBinding(t2));
	}
	,minBinding: function(t) {
		if(t == null) {
			throw haxe_Exception.thrown("Not_found");
		} else if(t.left == null) {
			return t;
		} else {
			return this.minBinding(t.left);
		}
	}
	,removeMinBinding: function(t) {
		if(t.left == null) {
			return t.right;
		} else {
			return this.balance(this.removeMinBinding(t.left),t.key,t.value,t.right);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this = r.right;
			var _this1 = r.left;
			if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this = this.left;
			tmp = _this == null ? 0 : _this._height;
		} else {
			var _this = this.right;
			tmp = _this == null ? 0 : _this._height;
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
haxe_ds_TreeNode.__name__ = "haxe.ds.TreeNode";
haxe_ds_TreeNode.prototype = {
	left: null
	,right: null
	,key: null
	,value: null
	,_height: null
	,__class__: haxe_ds_TreeNode
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
haxe_ds_EnumValueMap.__name__ = "haxe.ds.EnumValueMap";
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1._hx_index - k2._hx_index;
		if(d != 0) {
			return d;
		}
		var p1 = Type.enumParameters(k1);
		var p2 = Type.enumParameters(k2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g = 0;
		var _g1 = a1.length;
		while(_g < _g1) {
			var i = _g++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if(((v1) instanceof Array) && ((v2) instanceof Array)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(key | 0);
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_Option = $hxEnums["haxe.ds.Option"] = { __ename__ : "haxe.ds.Option", __constructs__ : ["Some","None"]
	,Some: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Option",toString:$estr}; },$_.__params__ = ["v"],$_)
	,None: {_hx_index:1,__enum__:"haxe.ds.Option",toString:$estr}
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.keysIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		return keys[idx - 1];
	}};
};
haxe_ds_StringMap.valueIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		return h[keys[idx - 1]];
	}};
};
haxe_ds_StringMap.prototype = {
	h: null
	,exists: function(key) {
		return Object.prototype.hasOwnProperty.call(this.h,key);
	}
	,get: function(key) {
		return this.h[key];
	}
	,set: function(key,value) {
		this.h[key] = value;
	}
	,remove: function(key) {
		if(Object.prototype.hasOwnProperty.call(this.h,key)) {
			delete(this.h[key]);
			return true;
		} else {
			return false;
		}
	}
	,keys: function() {
		return haxe_ds_StringMap.keysIterator(this.h);
	}
	,iterator: function() {
		return haxe_ds_StringMap.valueIterator(this.h);
	}
	,__class__: haxe_ds_StringMap
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	array: null
	,current: null
	,hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var js_Boot = function() { };
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__implements = function(o,iface) {
	return js_Boot.__interfLoop(js_Boot.getClass(o),iface);
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var thx_Arrays = function() { };
thx_Arrays.__name__ = "thx.Arrays";
thx_Arrays.append = function(array,element) {
	array.push(element);
	return array;
};
thx_Arrays.appendIf = function(array,cond,element) {
	if(cond) {
		array.push(element);
	}
	return array;
};
thx_Arrays.applyIndexes = function(array,indexes,incrementDuplicates) {
	if(incrementDuplicates == null) {
		incrementDuplicates = false;
	}
	if(indexes.length != array.length) {
		throw new thx_Error("`Arrays.applyIndexes` can only be applied to two arrays with the same length",null,{ fileName : "thx/Arrays.hx", lineNumber : 55, className : "thx.Arrays", methodName : "applyIndexes"});
	}
	var result = [];
	if(incrementDuplicates) {
		var usedIndexes = thx_Set.createInt();
		var _g = 0;
		var _g1 = array.length;
		while(_g < _g1) {
			var i = _g++;
			var index = indexes[i];
			while(usedIndexes.h.hasOwnProperty(index)) ++index;
			thx_Set.add(usedIndexes,index);
			result[index] = array[i];
		}
	} else {
		var _g = 0;
		var _g1 = array.length;
		while(_g < _g1) {
			var i = _g++;
			result[indexes[i]] = array[i];
		}
	}
	return result;
};
thx_Arrays.monoid = function() {
	return { zero : [], append : function(a,b) {
		return a.concat(b);
	}};
};
thx_Arrays.after = function(array,element) {
	return array.slice(thx_ReadonlyArray.indexOf(array,element) + 1);
};
thx_Arrays.atIndex = function(array,i) {
	if(i >= 0 && i < array.length) {
		return haxe_ds_Option.Some(array[i]);
	} else {
		return haxe_ds_Option.None;
	}
};
thx_Arrays.getOption = function(array,i) {
	var value = array[i];
	if(null == value) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(value);
	}
};
thx_Arrays.each = function(arr,effect) {
	var _g = 0;
	var _g1 = arr.length;
	while(_g < _g1) {
		var i = _g++;
		effect(arr[i]);
	}
};
thx_Arrays.eachi = function(arr,effect) {
	var _g = 0;
	var _g1 = arr.length;
	while(_g < _g1) {
		var i = _g++;
		effect(arr[i],i);
	}
};
thx_Arrays.all = function(arr,predicate) {
	var _g = 0;
	var _g1 = arr.length;
	while(_g < _g1) {
		var i = _g++;
		if(!predicate(arr[i])) {
			return false;
		}
	}
	return true;
};
thx_Arrays.any = function(arr,predicate) {
	var _g = 0;
	var _g1 = arr.length;
	while(_g < _g1) {
		var i = _g++;
		if(predicate(arr[i])) {
			return true;
		}
	}
	return false;
};
thx_Arrays.at = function(arr,indexes) {
	var result = new Array(indexes.length);
	var _g = 0;
	var _g1 = indexes.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = arr[indexes[i]];
	}
	return result;
};
thx_Arrays.before = function(array,element) {
	return array.slice(0,thx_ReadonlyArray.indexOf(array,element));
};
thx_Arrays.commonsFromStart = function(self,other,equality) {
	if(null == equality) {
		equality = thx_Functions.equality;
	}
	var count = 0;
	var _g = 0;
	var _g1 = thx_Arrays.zip(self,other);
	while(_g < _g1.length) {
		var pair = _g1[_g];
		++_g;
		if(equality(pair._0,pair._1)) {
			++count;
		} else {
			break;
		}
	}
	return self.slice(0,count);
};
thx_Arrays.compact = function(arr) {
	var _g = [];
	var _g1 = 0;
	var _g2 = arr;
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		if(null != v) {
			_g.push(v);
		}
	}
	return _g;
};
thx_Arrays.compare = function(a,b) {
	var v = thx_Ints.compare(a.length,b.length);
	if(v != 0) {
		return v;
	}
	var _g = 0;
	var _g1 = a.length;
	while(_g < _g1) {
		var i = _g++;
		v = thx_Dynamics.compare(a[i],b[i]);
		if(v != 0) {
			return v;
		}
	}
	return 0;
};
thx_Arrays.contains = function(array,element,eq) {
	if(null == eq) {
		return thx_ReadonlyArray.indexOf(array,element) >= 0;
	} else {
		var _g = 0;
		var _g1 = array.length;
		while(_g < _g1) {
			var i = _g++;
			if(eq(array[i],element)) {
				return true;
			}
		}
		return false;
	}
};
thx_Arrays.containsAll = function(array,elements,eq) {
	var el = $getIterator(elements);
	while(el.hasNext()) {
		var el1 = el.next();
		if(!thx_Arrays.contains(array,el1,eq)) {
			return false;
		}
	}
	return true;
};
thx_Arrays.containsAny = function(array,elements,eq) {
	var el = $getIterator(elements);
	while(el.hasNext()) {
		var el1 = el.next();
		if(thx_Arrays.contains(array,el1,eq)) {
			return true;
		}
	}
	return false;
};
thx_Arrays.create = function(length,fillWith) {
	var arr = length > 0 ? new Array(length) : [];
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		arr[i] = fillWith;
	}
	return arr;
};
thx_Arrays.fromItem = function(t) {
	return [t];
};
thx_Arrays.cross = function(a,b) {
	var r = [];
	var _g_current = 0;
	var _g_array = a;
	while(_g_current < _g_array.length) {
		var va = _g_array[_g_current++];
		var _g1_current = 0;
		var _g1_array = b;
		while(_g1_current < _g1_array.length) {
			var vb = _g1_array[_g1_current++];
			r.push([va,vb]);
		}
	}
	return r;
};
thx_Arrays.crossMulti = function(array) {
	var acopy = array.slice();
	var _this = acopy.shift();
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = [_this[i]];
	}
	var result1 = result;
	while(acopy.length > 0) {
		var array = acopy.shift();
		var tresult = result1;
		result1 = [];
		var _g_current = 0;
		var _g_array = array;
		while(_g_current < _g_array.length) {
			var v = _g_array[_g_current++];
			var _g = 0;
			while(_g < tresult.length) {
				var ar = tresult[_g];
				++_g;
				var t = ar.slice();
				t.push(v);
				result1.push(t);
			}
		}
	}
	return result1;
};
thx_Arrays.distinct = function(array,predicate) {
	var result = [];
	if(array.length <= 1) {
		return array.slice();
	}
	if(null == predicate) {
		predicate = thx_Functions.equality;
	}
	var _g_current = 0;
	var _g_array = array;
	while(_g_current < _g_array.length) {
		var v = [_g_array[_g_current++]];
		var keep = !thx_Arrays.any(result,(function(v) {
			return function(r) {
				return predicate(r,v[0]);
			};
		})(v));
		if(keep) {
			result.push(v[0]);
		}
	}
	return result;
};
thx_Arrays.eachPair = function(array,callback) {
	var _g = 0;
	var _g1 = array.length;
	while(_g < _g1) {
		var i = _g++;
		var _g2 = i;
		var _g3 = array.length;
		while(_g2 < _g3) {
			var j = _g2++;
			if(!callback(array[i],array[j])) {
				return;
			}
		}
	}
};
thx_Arrays.equals = function(a,b,equality) {
	if(a == null || b == null || a.length != b.length) {
		return false;
	}
	if(null == equality) {
		equality = thx_Functions.equality;
	}
	var _g = 0;
	var _g1 = a.length;
	while(_g < _g1) {
		var i = _g++;
		if(!equality(a[i],b[i])) {
			return false;
		}
	}
	return true;
};
thx_Arrays.extract = function(a,predicate) {
	var _g = 0;
	var _g1 = a.length;
	while(_g < _g1) {
		var i = _g++;
		if(predicate(a[i])) {
			return a.splice(i,1)[0];
		}
	}
	return null;
};
thx_Arrays.filterNull = function(a) {
	var arr = [];
	var _g_current = 0;
	var _g_array = a;
	while(_g_current < _g_array.length) {
		var v = _g_array[_g_current++];
		if(null != v) {
			arr.push(v);
		}
	}
	return arr;
};
thx_Arrays.filterOption = function(a) {
	return thx_Arrays.reduce(a,function(acc,maybeV) {
		switch(maybeV._hx_index) {
		case 0:
			var v = maybeV.v;
			acc.push(v);
			break;
		case 1:
			break;
		}
		return acc;
	},[]);
};
thx_Arrays.flattenOptions = function(a) {
	var acc = [];
	var _g_current = 0;
	var _g_array = a;
	while(_g_current < _g_array.length) {
		var e = _g_array[_g_current++];
		switch(e._hx_index) {
		case 0:
			var v = e.v;
			acc.push(v);
			break;
		case 1:
			return haxe_ds_Option.None;
		}
	}
	return haxe_ds_Option.Some(acc);
};
thx_Arrays.find = function(array,predicate) {
	var _g_current = 0;
	var _g_array = array;
	while(_g_current < _g_array.length) {
		var element = _g_array[_g_current++];
		if(predicate(element)) {
			return element;
		}
	}
	return null;
};
thx_Arrays.findi = function(array,predicate) {
	var _g = 0;
	var _g1 = array.length;
	while(_g < _g1) {
		var i = _g++;
		if(predicate(array[i],i)) {
			return array[i];
		}
	}
	return null;
};
thx_Arrays.findiOption = function(array,predicate) {
	var _g = 0;
	var _g1 = array.length;
	while(_g < _g1) {
		var i = _g++;
		if(predicate(array[i],i)) {
			return haxe_ds_Option.Some(array[i]);
		}
	}
	return haxe_ds_Option.None;
};
thx_Arrays.findOption = function(array,predicate) {
	var _g_current = 0;
	var _g_array = array;
	while(_g_current < _g_array.length) {
		var element = _g_array[_g_current++];
		if(predicate(element)) {
			return haxe_ds_Option.Some(element);
		}
	}
	return haxe_ds_Option.None;
};
thx_Arrays.findMap = function(values,f) {
	var _g_current = 0;
	var _g_array = values;
	while(_g_current < _g_array.length) {
		var value = _g_array[_g_current++];
		var opt = f(value);
		if(!thx_Options.isNone(opt)) {
			return opt;
		}
	}
	return haxe_ds_Option.None;
};
thx_Arrays.filterMap = function(values,f) {
	var acc = [];
	var _g_current = 0;
	var _g_array = values;
	while(_g_current < _g_array.length) {
		var value = _g_array[_g_current++];
		var _g = f(value);
		switch(_g._hx_index) {
		case 0:
			var v = _g.v;
			acc.push(v);
			break;
		case 1:
			break;
		}
	}
	return acc;
};
thx_Arrays.findSome = function(options) {
	var _g_current = 0;
	var _g_array = options;
	while(_g_current < _g_array.length) {
		var option = _g_array[_g_current++];
		if(!thx_Options.isNone(option)) {
			return option;
		}
	}
	return haxe_ds_Option.None;
};
thx_Arrays.findIndex = function(array,predicate) {
	var _g = 0;
	var _g1 = array.length;
	while(_g < _g1) {
		var i = _g++;
		if(predicate(array[i])) {
			return i;
		}
	}
	return -1;
};
thx_Arrays.findLast = function(array,predicate) {
	var len = array.length;
	var j;
	var _g = 0;
	var _g1 = len;
	while(_g < _g1) {
		var i = _g++;
		j = len - i - 1;
		if(predicate(array[j])) {
			return array[j];
		}
	}
	return null;
};
thx_Arrays.first = function(array) {
	return array[0];
};
thx_Arrays.firstOption = function(array) {
	var value = array[0];
	if(null == value) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(value);
	}
};
thx_Arrays.flatMap = function(array,callback) {
	var result = new Array(array.length);
	var _g = 0;
	var _g1 = array.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = callback(array[i]);
	}
	return Array.prototype.concat.apply([],result);
};
thx_Arrays.flatten = function(array) {
	return Array.prototype.concat.apply([],array);
};
thx_Arrays.from = function(array,element) {
	return array.slice(thx_ReadonlyArray.indexOf(array,element));
};
thx_Arrays.groupByAppend = function(arr,resolver,map) {
	var _g = 0;
	var _g1 = arr.length;
	while(_g < _g1) {
		var i = _g++;
		var v = arr[i];
		var key = resolver(v);
		var acc = map.get(key);
		if(null == acc) {
			map.set(key,[v]);
		} else {
			acc.push(v);
		}
	}
	return map;
};
thx_Arrays.spanByIndex = function(arr,spanKey) {
	var acc = [];
	var cur = null;
	var j = -1;
	var _g = 0;
	var _g1 = arr.length;
	while(_g < _g1) {
		var i = _g++;
		var k = spanKey(i);
		if(k == null) {
			throw new thx_Error("spanKey function returned null for index " + i,null,{ fileName : "thx/Arrays.hx", lineNumber : 633, className : "thx.Arrays", methodName : "spanByIndex"});
		}
		if(cur == k) {
			acc[j].push(arr[i]);
		} else {
			cur = k;
			++j;
			acc.push([arr[i]]);
		}
	}
	return acc;
};
thx_Arrays.hasElements = function(array) {
	if(null != array) {
		return array.length > 0;
	} else {
		return false;
	}
};
thx_Arrays.head = function(array) {
	return array[0];
};
thx_Arrays.ifEmpty = function(array,alt) {
	if(null != array && 0 != array.length) {
		return array;
	} else {
		return alt;
	}
};
thx_Arrays.initial = function(array) {
	return array.slice(0,array.length - 1);
};
thx_Arrays.intersperse = function(array,value) {
	return thx_Arrays.reducei(array,function(acc,v,i) {
		acc[i * 2] = v;
		return acc;
	},thx_Arrays.create(array.length * 2 - 1,value));
};
thx_Arrays.interspersef = function(array,f) {
	if(array.length == 0) {
		return [];
	}
	var acc = [array[0]];
	var _g = 1;
	var _g1 = array.length;
	while(_g < _g1) {
		var i = _g++;
		acc.push(f());
		acc.push(array[i]);
	}
	return acc;
};
thx_Arrays.isEmpty = function(array) {
	if(null != array) {
		return array.length == 0;
	} else {
		return true;
	}
};
thx_Arrays.last = function(array) {
	return array[array.length - 1];
};
thx_Arrays.lastOption = function(array) {
	var value = array[array.length - 1];
	if(null == value) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(value);
	}
};
thx_Arrays.map = function(array,callback) {
	var r = [];
	var _g = 0;
	var _g1 = array.length;
	while(_g < _g1) {
		var i = _g++;
		r.push(callback(array[i]));
	}
	return r;
};
thx_Arrays.mapi = function(array,callback) {
	var r = [];
	var _g = 0;
	var _g1 = array.length;
	while(_g < _g1) {
		var i = _g++;
		r.push(callback(array[i],i));
	}
	return r;
};
thx_Arrays.mapRight = function(array,callback) {
	var i = array.length;
	var result = [];
	while(--i >= 0) result.push(callback(array[i]));
	return result;
};
thx_Arrays.order = function(array,sort) {
	var n = array.slice();
	n.sort(sort);
	return n;
};
thx_Arrays.pull = function(array,toRemove,equality) {
	var _g_current = 0;
	var _g_array = toRemove;
	while(_g_current < _g_array.length) {
		var element = _g_array[_g_current++];
		thx_Arrays.removeAll(array,element,equality);
	}
};
thx_Arrays.pushIf = function(array,condition,value) {
	if(condition) {
		array.push(value);
	}
	return array;
};
thx_Arrays.rank = function(array,compare,incrementDuplicates) {
	if(incrementDuplicates == null) {
		incrementDuplicates = true;
	}
	var r = [];
	var _g = 0;
	var _g1 = array.length;
	while(_g < _g1) {
		var i = _g++;
		var this1 = { _0 : array[i], _1 : i};
		r.push(this1);
	}
	var arr = r;
	arr.sort(function(a,b) {
		return compare(a._0,b._0);
	});
	if(incrementDuplicates) {
		var usedIndexes = thx_Set.createInt();
		return thx_Arrays.reducei(arr,function(acc,x,i) {
			var index = i > 0 && compare(arr[i - 1]._0,x._0) == 0 ? acc[arr[i - 1]._1] : i;
			while(usedIndexes.h.hasOwnProperty(index)) ++index;
			thx_Set.add(usedIndexes,index);
			acc[x._1] = index;
			return acc;
		},[]);
	} else {
		return thx_Arrays.reducei(arr,function(acc,x,i) {
			acc[x._1] = i > 0 && compare(arr[i - 1]._0,x._0) == 0 ? acc[arr[i - 1]._1] : i;
			return acc;
		},[]);
	}
};
thx_Arrays.reduce = function(array,f,initial) {
	var _g_current = 0;
	var _g_array = array;
	while(_g_current < _g_array.length) {
		var v = _g_array[_g_current++];
		initial = f(initial,v);
	}
	return initial;
};
thx_Arrays.foldLeft = function(array,init,f) {
	return thx_Arrays.reduce(array,f,init);
};
thx_Arrays.foldLeft1 = function(array,f) {
	var tail = thx_Arrays.dropLeft(array,1);
	var head = array[0];
	if(head == null) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(thx_Arrays.reduce(tail,f,head));
	}
};
thx_Arrays.foldLeftEither = function(array,init,f) {
	var acc = thx_Either.Right(init);
	var _g_current = 0;
	var _g_array = array;
	while(_g_current < _g_array.length) {
		var a = _g_array[_g_current++];
		switch(acc._hx_index) {
		case 0:
			var error = acc.value;
			return acc;
		case 1:
			var b = acc.value;
			acc = f(b,a);
			break;
		}
	}
	return acc;
};
thx_Arrays.foldMap = function(array,f,m) {
	var result = new Array(array.length);
	var _g = 0;
	var _g1 = array.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = f(array[i]);
	}
	var _e = m;
	return thx_Arrays.reduce(result,function(a0,a1) {
		return thx_Monoid.append(_e,a0,a1);
	},thx_Monoid.get_zero(m));
};
thx_Arrays.fold = function(array,m) {
	return thx_Arrays.foldMap(array,thx_Functions.identity,m);
};
thx_Arrays.nel = function(array) {
	return thx_Nel.fromArray(array);
};
thx_Arrays.foldS = function(array,s) {
	return thx_Options.map(thx_Arrays.nel(array),function(x) {
		return thx_Nel.fold(x,s);
	});
};
thx_Arrays.resize = function(array,length,fill) {
	while(array.length < length) array.push(fill);
	array.splice(length,array.length - length);
	return array;
};
thx_Arrays.resized = function(array,length,fill) {
	array = array.slice();
	return thx_Arrays.resize(array,length,fill);
};
thx_Arrays.reducei = function(array,f,initial) {
	var _g = 0;
	var _g1 = array.length;
	while(_g < _g1) {
		var i = _g++;
		initial = f(initial,array[i],i);
	}
	return initial;
};
thx_Arrays.reduceRight = function(array,f,initial) {
	var i = array.length;
	while(--i >= 0) initial = f(initial,array[i]);
	return initial;
};
thx_Arrays.removeAll = function(array,element,equality) {
	if(null == equality) {
		equality = thx_Functions.equality;
	}
	var i = array.length;
	while(--i >= 0) if(equality(array[i],element)) {
		array.splice(i,1);
	}
};
thx_Arrays.rest = function(array) {
	return array.slice(1);
};
thx_Arrays.reversed = function(array) {
	var result = array.slice();
	result.reverse();
	return result;
};
thx_Arrays.sample = function(array,n) {
	var b = array.length;
	if(n >= b) {
		n = b;
	}
	var copy = array.slice();
	var result = [];
	var _g = 0;
	var _g1 = n;
	while(_g < _g1) {
		var i = _g++;
		result.push(copy.splice(Std.random(copy.length),1)[0]);
	}
	return result;
};
thx_Arrays.sampleOne = function(array) {
	return array[Std.random(array.length)];
};
thx_Arrays.string = function(arr) {
	var f = thx_Dynamics.string;
	var result = new Array(arr.length);
	var _g = 0;
	var _g1 = arr.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = f(arr[i]);
	}
	var strings = result;
	return "[" + strings.join(", ") + "]";
};
thx_Arrays.shuffle = function(a) {
	var t = thx_Ints.range(a.length);
	var array = [];
	while(t.length > 0) {
		var pos = Std.random(t.length);
		var index = t[pos];
		t.splice(pos,1);
		array.push(a[index]);
	}
	return array;
};
thx_Arrays.split = function(array,parts) {
	var len = Math.ceil(array.length / parts);
	return thx_Arrays.splitBy(array,len);
};
thx_Arrays.splitBy = function(array,len) {
	var res = [];
	var b = array.length;
	if(len >= b) {
		len = b;
	}
	var _g = 0;
	var _g1 = Math.ceil(array.length / len);
	while(_g < _g1) {
		var p = _g++;
		res.push(array.slice(p * len,(p + 1) * len));
	}
	return res;
};
thx_Arrays.splitByPad = function(arr,len,pad) {
	var res = thx_Arrays.splitBy(arr,len);
	while(res[res.length - 1].length < len) res[res.length - 1].push(pad);
	return res;
};
thx_Arrays.tail = function(array) {
	return array.slice(1);
};
thx_Arrays.take = function(arr,n) {
	return arr.slice(0,n);
};
thx_Arrays.takeLast = function(arr,n) {
	return arr.slice(arr.length - n);
};
thx_Arrays.traverseOption = function(arr,f) {
	return thx_Arrays.reduce(arr,function(acc,t) {
		return thx_Options.ap(f(t),thx_Options.map(acc,function(ux) {
			return function(u) {
				ux.push(u);
				return ux;
			};
		}));
	},haxe_ds_Option.Some([]));
};
thx_Arrays.traverseEither = function(arr,f) {
	return thx_Arrays.reduce(arr,function(acc,t) {
		return thx_Eithers.ap(f(t),thx_Eithers.map(acc,function(ux) {
			return function(u) {
				ux.push(u);
				return ux;
			};
		}));
	},thx_Either.Right([]));
};
thx_Arrays.traverseValidation = function(arr,f,s) {
	return thx_Arrays.reduce(arr,function(acc,t) {
		return thx_Validation.ap(f(t),thx_Validation.map(acc,function(ux) {
			return function(u) {
				ux.push(u);
				return ux;
			};
		}),s);
	},thx_Either.Right([]));
};
thx_Arrays.traverseValidationIndexed = function(arr,f,s) {
	return thx_Arrays.reducei(arr,function(acc,t,i) {
		return thx_Validation.ap(f(t,i),thx_Validation.map(acc,function(ux) {
			return function(u) {
				ux.push(u);
				return ux;
			};
		}),s);
	},thx_Either.Right([]));
};
thx_Arrays.rotate = function(arr) {
	var result = [];
	var _g = 0;
	var _g1 = arr[0].length;
	while(_g < _g1) {
		var i = _g++;
		var row = [];
		result.push(row);
		var _g2 = 0;
		var _g3 = arr.length;
		while(_g2 < _g3) {
			var j = _g2++;
			row.push(arr[j][i]);
		}
	}
	return result;
};
thx_Arrays.sliding2 = function(arr,f) {
	if(arr.length < 2) {
		return [];
	} else {
		var result = [];
		var _g = 0;
		var _g1 = arr.length - 1;
		while(_g < _g1) {
			var i = _g++;
			result.push(f(arr[i],arr[i + 1]));
		}
		return result;
	}
};
thx_Arrays.unzip = function(array) {
	var a1 = [];
	var a2 = [];
	var result = new Array(array.length);
	var _g = 0;
	var _g1 = array.length;
	while(_g < _g1) {
		var i = _g++;
		var t = array[i];
		a1.push(t._0);
		a2.push(t._1);
		result[i] = null;
	}
	var this1 = { _0 : a1, _1 : a2};
	return this1;
};
thx_Arrays.unzip3 = function(array) {
	var a1 = [];
	var a2 = [];
	var a3 = [];
	var result = new Array(array.length);
	var _g = 0;
	var _g1 = array.length;
	while(_g < _g1) {
		var i = _g++;
		var t = array[i];
		a1.push(t._0);
		a2.push(t._1);
		a3.push(t._2);
		result[i] = null;
	}
	var this1 = { _0 : a1, _1 : a2, _2 : a3};
	return this1;
};
thx_Arrays.unzip4 = function(array) {
	var a1 = [];
	var a2 = [];
	var a3 = [];
	var a4 = [];
	var result = new Array(array.length);
	var _g = 0;
	var _g1 = array.length;
	while(_g < _g1) {
		var i = _g++;
		var t = array[i];
		a1.push(t._0);
		a2.push(t._1);
		a3.push(t._2);
		a4.push(t._3);
		result[i] = null;
	}
	var this1 = { _0 : a1, _1 : a2, _2 : a3, _3 : a4};
	return this1;
};
thx_Arrays.unzip5 = function(array) {
	var a1 = [];
	var a2 = [];
	var a3 = [];
	var a4 = [];
	var a5 = [];
	var result = new Array(array.length);
	var _g = 0;
	var _g1 = array.length;
	while(_g < _g1) {
		var i = _g++;
		var t = array[i];
		a1.push(t._0);
		a2.push(t._1);
		a3.push(t._2);
		a4.push(t._3);
		a5.push(t._4);
		result[i] = null;
	}
	var this1 = { _0 : a1, _1 : a2, _2 : a3, _3 : a4, _4 : a5};
	return this1;
};
thx_Arrays.zip = function(array1,array2) {
	var a = array1.length;
	var b = array2.length;
	var length = a < b ? a : b;
	var array = [];
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		var this1 = { _0 : array1[i], _1 : array2[i]};
		array.push(this1);
	}
	return array;
};
thx_Arrays.zip3 = function(array1,array2,array3) {
	var length = thx_ArrayInts.min([array1.length,array2.length,array3.length]);
	var array = [];
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		var this1 = { _0 : array1[i], _1 : array2[i], _2 : array3[i]};
		array.push(this1);
	}
	return array;
};
thx_Arrays.zip4 = function(array1,array2,array3,array4) {
	var length = thx_ArrayInts.min([array1.length,array2.length,array3.length,array4.length]);
	var array = [];
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		var this1 = { _0 : array1[i], _1 : array2[i], _2 : array3[i], _3 : array4[i]};
		array.push(this1);
	}
	return array;
};
thx_Arrays.zip5 = function(array1,array2,array3,array4,array5) {
	var length = thx_ArrayInts.min([array1.length,array2.length,array3.length,array4.length,array5.length]);
	var array = [];
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		var this1 = { _0 : array1[i], _1 : array2[i], _2 : array3[i], _3 : array4[i], _4 : array5[i]};
		array.push(this1);
	}
	return array;
};
thx_Arrays.zipAp = function(ax,fx) {
	var result = [];
	var _g = 0;
	var a = ax.length;
	var b = fx.length;
	var _g1 = a < b ? a : b;
	while(_g < _g1) {
		var i = _g++;
		result.push(fx[i](ax[i]));
	}
	return result;
};
thx_Arrays.zip2Ap = function(f,ax,bx) {
	var f1 = thx_Functions2.curry(f);
	var result = new Array(ax.length);
	var _g = 0;
	var _g1 = ax.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = f1(ax[i]);
	}
	return thx_Arrays.zipAp(bx,result);
};
thx_Arrays.zip3Ap = function(f,ax,bx,cx) {
	var f1 = f;
	return thx_Arrays.zipAp(cx,thx_Arrays.zip2Ap(function(a,b) {
		return function(c) {
			return f1(a,b,c);
		};
	},ax,bx));
};
thx_Arrays.zip4Ap = function(f,ax,bx,cx,dx) {
	var f1 = f;
	return thx_Arrays.zipAp(dx,thx_Arrays.zip3Ap(function(a,b,c) {
		return function(d) {
			return f1(a,b,c,d);
		};
	},ax,bx,cx));
};
thx_Arrays.zip5Ap = function(f,ax,bx,cx,dx,ex) {
	var f1 = f;
	return thx_Arrays.zipAp(ex,thx_Arrays.zip4Ap(function(a,b,c,d) {
		return function(e) {
			return f1(a,b,c,d,e);
		};
	},ax,bx,cx,dx));
};
thx_Arrays.withPrepend = function(arr,el) {
	return [el].concat(arr);
};
thx_Arrays.with = function(arr,el) {
	return arr.concat([el]);
};
thx_Arrays.withSlice = function(arr,other,start,length) {
	if(length == null) {
		length = 0;
	}
	return arr.slice(0,start).concat(other).concat(arr.slice(start + length));
};
thx_Arrays.withInsert = function(arr,el,pos) {
	return arr.slice(0,pos).concat([el]).concat(arr.slice(pos));
};
thx_Arrays.maxBy = function(arr,ord) {
	if(arr.length == 0) {
		return haxe_ds_Option.None;
	} else {
		var _e = ord;
		return haxe_ds_Option.Some(thx_Arrays.reduce(arr,function(a0,a1) {
			return thx_Ord.max(_e,a0,a1);
		},arr[0]));
	}
};
thx_Arrays.minBy = function(arr,ord) {
	if(arr.length == 0) {
		return haxe_ds_Option.None;
	} else {
		var _e = ord;
		return haxe_ds_Option.Some(thx_Arrays.reduce(arr,function(a0,a1) {
			return thx_Ord.min(_e,a0,a1);
		},arr[0]));
	}
};
thx_Arrays.toMap = function(arr,keyOrder) {
	var m = thx_fp_MapImpl.Tip;
	var collisions = [];
	var _g = 0;
	var _g1 = arr.length;
	while(_g < _g1) {
		var i = _g++;
		var tuple = arr[i];
		if(thx_Options.isNone(thx_fp_Map.lookup(m,tuple._0,keyOrder))) {
			m = thx_fp_Map.insert(m,tuple._0,tuple._1,keyOrder);
		} else {
			collisions.push(tuple._0);
		}
	}
	return thx_Options.toFailure(thx_Nel.fromArray(collisions),m);
};
thx_Arrays.toStringMap = function(arr) {
	return thx_Arrays.reduce(arr,function(acc,t) {
		acc.h[t._0] = t._1;
		return acc;
	},new haxe_ds_StringMap());
};
thx_Arrays.partition = function(arr,f) {
	var this1 = { _0 : [], _1 : []};
	return thx_Arrays.reduce(arr,function(a,b) {
		if(f(b)) {
			a._0.push(b);
		} else {
			a._1.push(b);
		}
		return a;
	},this1);
};
thx_Arrays.partitionWhile = function(arr,f) {
	var partitioning = true;
	var this1 = { _0 : [], _1 : []};
	return thx_Arrays.reduce(arr,function(a,b) {
		if(partitioning) {
			if(f(b)) {
				a._0.push(b);
			} else {
				partitioning = false;
				a._1.push(b);
			}
		} else {
			a._1.push(b);
		}
		return a;
	},this1);
};
thx_Arrays.dropLeft = function(a,n) {
	if(n >= a.length) {
		return [];
	} else {
		return a.slice(n);
	}
};
thx_Arrays.dropRight = function(a,n) {
	if(n >= a.length) {
		return [];
	} else {
		return a.slice(0,a.length - n);
	}
};
thx_Arrays.dropWhile = function(a,p) {
	var r = [].concat(a);
	var _g_current = 0;
	var _g_array = a;
	while(_g_current < _g_array.length) {
		var e = _g_array[_g_current++];
		if(p(e)) {
			r.shift();
		} else {
			break;
		}
	}
	return r;
};
thx_Arrays.pad = function(arr,len,def) {
	var len0 = len - arr.length;
	var arr0 = [];
	var _g = 0;
	var _g1 = len0;
	while(_g < _g1) {
		var i = _g++;
		arr0.push(def);
	}
	return arr.concat(arr0);
};
thx_Arrays.fill = function(arr,def) {
	var result = new Array(arr.length);
	var _g = 0;
	var _g1 = arr.length;
	while(_g < _g1) {
		var i = _g++;
		var x = arr[i];
		result[i] = x == null ? def : x;
	}
	return result;
};
var thx_ArrayFloats = function() { };
thx_ArrayFloats.__name__ = "thx.ArrayFloats";
thx_ArrayFloats.average = function(arr) {
	return thx_ArrayFloats.sum(arr) / arr.length;
};
thx_ArrayFloats.compact = function(arr) {
	var _g = [];
	var _g1 = 0;
	var _g2 = arr;
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		if(null != v && isFinite(v)) {
			_g.push(v);
		}
	}
	return _g;
};
thx_ArrayFloats.max = function(arr) {
	return thx_Options.get(thx_Arrays.maxBy(arr,thx_Floats.order));
};
thx_ArrayFloats.min = function(arr) {
	return thx_Options.get(thx_Arrays.minBy(arr,thx_Floats.order));
};
thx_ArrayFloats.resize = function(array,length,fill) {
	if(fill == null) {
		fill = 0.0;
	}
	while(array.length < length) array.push(fill);
	array.splice(length,array.length - length);
	return array;
};
thx_ArrayFloats.resized = function(array,length,fill) {
	if(fill == null) {
		fill = 0.0;
	}
	array = array.slice();
	return thx_ArrayFloats.resize(array,length,fill);
};
thx_ArrayFloats.standardDeviation = function(array) {
	if(array.length < 2) {
		return 0.0;
	}
	var mean = thx_ArrayFloats.average(array);
	var variance = thx_Arrays.reduce(array,function(acc,val) {
		return acc + Math.pow(val - mean,2);
	},0) / (array.length - 1);
	return Math.sqrt(variance);
};
thx_ArrayFloats.sum = function(arr) {
	return thx_Arrays.reduce(arr,function(tot,v) {
		return tot + v;
	},0.0);
};
var thx_ArrayInts = function() { };
thx_ArrayInts.__name__ = "thx.ArrayInts";
thx_ArrayInts.average = function(arr) {
	return thx_ArrayInts.sum(arr) / arr.length;
};
thx_ArrayInts.max = function(arr) {
	return thx_Options.get(thx_Arrays.maxBy(arr,thx_Ints.order));
};
thx_ArrayInts.min = function(arr) {
	return thx_Options.get(thx_Arrays.minBy(arr,thx_Ints.order));
};
thx_ArrayInts.resize = function(array,length,fill) {
	if(fill == null) {
		fill = 0;
	}
	while(array.length < length) array.push(fill);
	array.splice(length,array.length - length);
	return array;
};
thx_ArrayInts.resized = function(array,length,fill) {
	if(fill == null) {
		fill = 0;
	}
	array = array.slice();
	return thx_ArrayInts.resize(array,length,fill);
};
thx_ArrayInts.sum = function(arr) {
	return thx_Arrays.reduce(arr,function(tot,v) {
		return tot + v;
	},0);
};
var thx_ArrayStrings = function() { };
thx_ArrayStrings.__name__ = "thx.ArrayStrings";
thx_ArrayStrings.compact = function(arr) {
	var _g = [];
	var _g1 = 0;
	var _g2 = arr;
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		if(!thx_Strings.isEmpty(v)) {
			_g.push(v);
		}
	}
	return _g;
};
thx_ArrayStrings.max = function(arr) {
	return thx_Options.getOrElse(thx_Arrays.maxBy(arr,thx_Strings.order),null);
};
thx_ArrayStrings.min = function(arr) {
	return thx_Options.getOrElse(thx_Arrays.minBy(arr,thx_Strings.order),null);
};
var thx_Bools = function() { };
thx_Bools.__name__ = "thx.Bools";
thx_Bools.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a) {
		return -1;
	} else {
		return 1;
	}
};
thx_Bools.toInt = function(v) {
	if(v) {
		return 1;
	} else {
		return 0;
	}
};
thx_Bools.canParse = function(v) {
	var _g = v.toLowerCase();
	if(_g == null) {
		return true;
	} else {
		switch(_g) {
		case "0":case "1":case "false":case "off":case "on":case "true":
			return true;
		default:
			return false;
		}
	}
};
thx_Bools.parse = function(v) {
	var _g = v.toLowerCase();
	if(_g == null) {
		return false;
	} else {
		switch(_g) {
		case "1":case "on":case "true":
			return true;
		case "0":case "false":case "off":
			return false;
		default:
			var v = _g;
			throw haxe_Exception.thrown("unable to parse \"" + v + "\"");
		}
	}
};
thx_Bools.xor = function(a,b) {
	return a != b;
};
thx_Bools.option = function(cond,a) {
	if(cond) {
		return haxe_ds_Option.Some(a);
	} else {
		return haxe_ds_Option.None;
	}
};
var thx_Ord = {};
thx_Ord.order = function(this1,a0,a1) {
	return this1(a0,a1);
};
thx_Ord.max = function(this1,a0,a1) {
	switch(this1(a0,a1)._hx_index) {
	case 1:
		return a0;
	case 0:case 2:
		return a1;
	}
};
thx_Ord.min = function(this1,a0,a1) {
	switch(this1(a0,a1)._hx_index) {
	case 1:
		return a1;
	case 0:case 2:
		return a0;
	}
};
thx_Ord.equal = function(this1,a0,a1) {
	return this1(a0,a1) == thx_OrderingImpl.EQ;
};
thx_Ord.contramap = function(this1,f) {
	return function(b0,b1) {
		return this1(f(b0),f(b1));
	};
};
thx_Ord.inverse = function(this1) {
	return function(a0,a1) {
		return this1(a1,a0);
	};
};
thx_Ord.intComparison = function(this1,a0,a1) {
	switch(this1(a0,a1)._hx_index) {
	case 0:
		return -1;
	case 1:
		return 1;
	case 2:
		return 0;
	}
};
thx_Ord.fromIntComparison = function(f) {
	return function(a,b) {
		return thx_Ordering.fromInt(f(a,b));
	};
};
thx_Ord.forComparable = function() {
	return function(a,b) {
		return thx_Ordering.fromInt(a.compareTo(b));
	};
};
thx_Ord.forComparableOrd = function() {
	return function(a,b) {
		return a.compareTo(b);
	};
};
var thx_Ordering = {};
thx_Ordering.fromInt = function(value) {
	if(value < 0) {
		return thx_OrderingImpl.LT;
	} else if(value > 0) {
		return thx_OrderingImpl.GT;
	} else {
		return thx_OrderingImpl.EQ;
	}
};
thx_Ordering.fromFloat = function(value) {
	if(value < 0) {
		return thx_OrderingImpl.LT;
	} else if(value > 0) {
		return thx_OrderingImpl.GT;
	} else {
		return thx_OrderingImpl.EQ;
	}
};
thx_Ordering.toInt = function(this1) {
	switch(this1._hx_index) {
	case 0:
		return -1;
	case 1:
		return 1;
	case 2:
		return 0;
	}
};
var thx_OrderingImpl = $hxEnums["thx.OrderingImpl"] = { __ename__ : "thx.OrderingImpl", __constructs__ : ["LT","GT","EQ"]
	,LT: {_hx_index:0,__enum__:"thx.OrderingImpl",toString:$estr}
	,GT: {_hx_index:1,__enum__:"thx.OrderingImpl",toString:$estr}
	,EQ: {_hx_index:2,__enum__:"thx.OrderingImpl",toString:$estr}
};
var thx_Dates = function() { };
thx_Dates.__name__ = "thx.Dates";
thx_Dates.compare = function(a,b) {
	var a1 = a.getTime();
	var b1 = b.getTime();
	if(a1 < b1) {
		return -1;
	} else if(a1 > b1) {
		return 1;
	} else {
		return 0;
	}
};
thx_Dates.create = function(year,month,day,hour,minute,second) {
	if(second == null) {
		second = 0;
	}
	if(minute == null) {
		minute = 0;
	}
	if(hour == null) {
		hour = 0;
	}
	if(day == null) {
		day = 1;
	}
	if(month == null) {
		month = 0;
	}
	minute += Math.floor(second / 60);
	second %= 60;
	if(second < 0) {
		second += 60;
	}
	hour += Math.floor(minute / 60);
	minute %= 60;
	if(minute < 0) {
		minute += 60;
	}
	day += Math.floor(hour / 24);
	hour %= 24;
	if(hour < 0) {
		hour += 24;
	}
	if(day == 0) {
		--month;
		if(month < 0) {
			month = 11;
			--year;
		}
		day = thx_Dates.daysInMonth(year,month);
	}
	year += Math.floor(month / 12);
	month %= 12;
	if(month < 0) {
		month += 12;
	}
	var days = thx_Dates.daysInMonth(year,month);
	while(day > days) {
		if(day > days) {
			day -= days;
			++month;
		}
		if(month > 11) {
			month -= 12;
			++year;
		}
		days = thx_Dates.daysInMonth(year,month);
	}
	return new Date(year,month,day,hour,minute,second);
};
thx_Dates.daysRange = function(start,end) {
	if(thx_Dates.compare(end,start) < 0) {
		return [];
	}
	var days = [];
	while(!thx_Dates.sameDay(start,end)) {
		days.push(start);
		start = thx_Dates.jump(start,thx_TimePeriod.Day,1);
	}
	days.push(end);
	return days;
};
thx_Dates.equals = function(self,other) {
	return self.getTime() == other.getTime();
};
thx_Dates.nearEquals = function(self,other,units,period) {
	if(units == null) {
		units = 1;
	}
	if(null == period) {
		period = thx_TimePeriod.Second;
	}
	if(units < 0) {
		units = -units;
	}
	var min = thx_Dates.jump(self,period,-units);
	var max = thx_Dates.jump(self,period,units);
	if(thx_Dates.compare(min,other) <= 0) {
		return thx_Dates.compare(max,other) >= 0;
	} else {
		return false;
	}
};
thx_Dates.greater = function(self,other) {
	return thx_Dates.compare(self,other) > 0;
};
thx_Dates.more = function(self,other) {
	return thx_Dates.compare(self,other) > 0;
};
thx_Dates.less = function(self,other) {
	return thx_Dates.compare(self,other) < 0;
};
thx_Dates.greaterEquals = function(self,other) {
	return thx_Dates.compare(self,other) >= 0;
};
thx_Dates.moreEqual = function(self,other) {
	return thx_Dates.compare(self,other) >= 0;
};
thx_Dates.lessEquals = function(self,other) {
	return thx_Dates.compare(self,other) <= 0;
};
thx_Dates.lessEqual = function(self,other) {
	return thx_Dates.compare(self,other) <= 0;
};
thx_Dates.isLeapYear = function(year) {
	if(year % 4 != 0) {
		return false;
	}
	if(year % 100 == 0) {
		return year % 400 == 0;
	}
	return true;
};
thx_Dates.isInLeapYear = function(d) {
	return thx_Dates.isLeapYear(d.getFullYear());
};
thx_Dates.daysInMonth = function(year,month) {
	switch(month) {
	case 1:
		if(thx_Dates.isLeapYear(year)) {
			return 29;
		} else {
			return 28;
		}
		break;
	case 0:case 2:case 4:case 6:case 7:case 9:case 11:
		return 31;
	case 3:case 5:case 8:case 10:
		return 30;
	default:
		throw haxe_Exception.thrown("Invalid month \"" + month + "\".  Month should be a number, Jan=0, Dec=11");
	}
};
thx_Dates.numDaysInMonth = function(month,year) {
	return thx_Dates.daysInMonth(year,month);
};
thx_Dates.daysInThisMonth = function(d) {
	return thx_Dates.daysInMonth(d.getFullYear(),d.getMonth());
};
thx_Dates.numDaysInThisMonth = function(d) {
	return thx_Dates.daysInThisMonth(d);
};
thx_Dates.sameYear = function(self,other) {
	return self.getFullYear() == other.getFullYear();
};
thx_Dates.sameMonth = function(self,other) {
	if(thx_Dates.sameYear(self,other)) {
		return self.getMonth() == other.getMonth();
	} else {
		return false;
	}
};
thx_Dates.sameDay = function(self,other) {
	if(thx_Dates.sameMonth(self,other)) {
		return self.getDate() == other.getDate();
	} else {
		return false;
	}
};
thx_Dates.sameHour = function(self,other) {
	if(thx_Dates.sameDay(self,other)) {
		return self.getHours() == other.getHours();
	} else {
		return false;
	}
};
thx_Dates.sameMinute = function(self,other) {
	if(thx_Dates.sameHour(self,other)) {
		return self.getMinutes() == other.getMinutes();
	} else {
		return false;
	}
};
thx_Dates.snapNext = function(date,period) {
	return new Date(thx_Timestamp.snapNext(date.getTime(),period));
};
thx_Dates.snapPrev = function(date,period) {
	return new Date(thx_Timestamp.snapPrev(date.getTime(),period));
};
thx_Dates.snapTo = function(date,period) {
	return new Date(thx_Timestamp.snapTo(date.getTime(),period));
};
thx_Dates.jump = function(date,period,amount) {
	var sec = date.getSeconds();
	var min = date.getMinutes();
	var hour = date.getHours();
	var day = date.getDate();
	var month = date.getMonth();
	var year = date.getFullYear();
	switch(period._hx_index) {
	case 0:
		sec += amount;
		break;
	case 1:
		min += amount;
		break;
	case 2:
		hour += amount;
		break;
	case 3:
		day += amount;
		break;
	case 4:
		day += amount * 7;
		break;
	case 5:
		month += amount;
		break;
	case 6:
		year += amount;
		break;
	}
	return thx_Dates.create(year,month,day,hour,min,sec);
};
thx_Dates.max = function(self,other) {
	if(self.getTime() > other.getTime()) {
		return self;
	} else {
		return other;
	}
};
thx_Dates.min = function(self,other) {
	if(self.getTime() < other.getTime()) {
		return self;
	} else {
		return other;
	}
};
thx_Dates.snapToWeekDay = function(date,day,firstDayOfWk) {
	if(firstDayOfWk == null) {
		firstDayOfWk = 0;
	}
	var d = date.getDay();
	var s = day;
	if(s < firstDayOfWk) {
		s += 7;
	}
	if(d < firstDayOfWk) {
		d += 7;
	}
	return thx_Dates.jump(date,thx_TimePeriod.Day,s - d);
};
thx_Dates.snapNextWeekDay = function(date,day) {
	var d = date.getDay();
	var s = day;
	if(s < d) {
		s += 7;
	}
	return thx_Dates.jump(date,thx_TimePeriod.Day,s - d);
};
thx_Dates.snapPrevWeekDay = function(date,day) {
	var d = date.getDay();
	var s = day;
	if(s > d) {
		s -= 7;
	}
	return thx_Dates.jump(date,thx_TimePeriod.Day,s - d);
};
thx_Dates.prevYear = function(d) {
	return thx_Dates.jump(d,thx_TimePeriod.Year,-1);
};
thx_Dates.nextYear = function(d) {
	return thx_Dates.jump(d,thx_TimePeriod.Year,1);
};
thx_Dates.prevMonth = function(d) {
	return thx_Dates.jump(d,thx_TimePeriod.Month,-1);
};
thx_Dates.nextMonth = function(d) {
	return thx_Dates.jump(d,thx_TimePeriod.Month,1);
};
thx_Dates.prevWeek = function(d) {
	return thx_Dates.jump(d,thx_TimePeriod.Week,-1);
};
thx_Dates.nextWeek = function(d) {
	return thx_Dates.jump(d,thx_TimePeriod.Week,1);
};
thx_Dates.prevDay = function(d) {
	return thx_Dates.jump(d,thx_TimePeriod.Day,-1);
};
thx_Dates.nextDay = function(d) {
	return thx_Dates.jump(d,thx_TimePeriod.Day,1);
};
thx_Dates.prevHour = function(d) {
	return thx_Dates.jump(d,thx_TimePeriod.Hour,-1);
};
thx_Dates.nextHour = function(d) {
	return thx_Dates.jump(d,thx_TimePeriod.Hour,1);
};
thx_Dates.prevMinute = function(d) {
	return thx_Dates.jump(d,thx_TimePeriod.Minute,-1);
};
thx_Dates.nextMinute = function(d) {
	return thx_Dates.jump(d,thx_TimePeriod.Minute,1);
};
thx_Dates.prevSecond = function(d) {
	return thx_Dates.jump(d,thx_TimePeriod.Second,-1);
};
thx_Dates.nextSecond = function(d) {
	return thx_Dates.jump(d,thx_TimePeriod.Second,1);
};
thx_Dates.withYear = function(date,year) {
	return thx_Dates.create(year,date.getMonth(),date.getDate(),date.getHours(),date.getMinutes(),date.getSeconds());
};
thx_Dates.withMonth = function(date,month) {
	return thx_Dates.create(date.getFullYear(),month,date.getDate(),date.getHours(),date.getMinutes(),date.getSeconds());
};
thx_Dates.withDay = function(date,day) {
	return thx_Dates.create(date.getFullYear(),date.getMonth(),day,date.getHours(),date.getMinutes(),date.getSeconds());
};
thx_Dates.withHour = function(date,hour) {
	return thx_Dates.create(date.getFullYear(),date.getMonth(),date.getDate(),hour,date.getMinutes(),date.getSeconds());
};
thx_Dates.withMinute = function(date,minute) {
	return thx_Dates.create(date.getFullYear(),date.getMonth(),date.getDate(),date.getHours(),minute,date.getSeconds());
};
thx_Dates.withSecond = function(date,second) {
	return thx_Dates.create(date.getFullYear(),date.getMonth(),date.getDate(),date.getHours(),date.getMinutes(),second);
};
thx_Dates.parseDate = function(s) {
	try {
		return thx_Either.Right(HxOverrides.strDate(s));
	} catch( _g ) {
		return thx_Either.Left("" + s + " could not be parsed to a valid Date value.");
	}
};
var thx_Dynamics = function() { };
thx_Dynamics.__name__ = "thx.Dynamics";
thx_Dynamics.equals = function(a,b) {
	if(!thx_Types.sameType(a,b)) {
		return false;
	}
	if(a == b) {
		return true;
	}
	var _g = Type.typeof(a);
	switch(_g._hx_index) {
	case 0:case 1:case 2:case 3:
		return false;
	case 4:
		var fa = Reflect.fields(a);
		var fb = Reflect.fields(b);
		var _g1 = 0;
		while(_g1 < fa.length) {
			var field = fa[_g1];
			++_g1;
			HxOverrides.remove(fb,field);
			if(!Object.prototype.hasOwnProperty.call(b,field)) {
				return false;
			}
			var va = Reflect.field(a,field);
			if(Reflect.isFunction(va)) {
				continue;
			}
			var vb = Reflect.field(b,field);
			if(!thx_Dynamics.equals(va,vb)) {
				return false;
			}
		}
		if(fb.length > 0) {
			return false;
		}
		var t = false;
		t = thx_Iterators.isIterator(a);
		if(t || thx_Iterables.isIterable(a)) {
			if(t && !thx_Iterators.isIterator(b)) {
				return false;
			}
			if(!t && !thx_Iterables.isIterable(b)) {
				return false;
			}
			var aa = t ? thx_Iterators.toArray(a) : thx_Iterators.toArray($getIterator(a));
			var ab = t ? thx_Iterators.toArray(b) : thx_Iterators.toArray($getIterator(b));
			if(aa.length != ab.length) {
				return false;
			}
			var _g1 = 0;
			var _g2 = aa.length;
			while(_g1 < _g2) {
				var i = _g1++;
				if(!thx_Dynamics.equals(aa[i],ab[i])) {
					return false;
				}
			}
			return true;
		}
		return true;
	case 5:
		return Reflect.compareMethods(a,b);
	case 6:
		var c = _g.c;
		var ca = c.__name__;
		var c = js_Boot.getClass(b);
		var cb = c.__name__;
		if(ca != cb) {
			return false;
		}
		if(typeof(a) == "string") {
			return false;
		}
		if(((a) instanceof Array)) {
			var aa = a;
			var ab = b;
			if(aa.length != ab.length) {
				return false;
			}
			var _g1 = 0;
			var _g2 = aa.length;
			while(_g1 < _g2) {
				var i = _g1++;
				if(!thx_Dynamics.equals(aa[i],ab[i])) {
					return false;
				}
			}
			return true;
		}
		if(((a) instanceof Date)) {
			return a.getTime() == b.getTime();
		}
		if(js_Boot.__implements(a,haxe_IMap)) {
			var ha = a;
			var hb = b;
			var ka = thx_Iterators.toArray(ha.keys());
			var kb = thx_Iterators.toArray(hb.keys());
			if(ka.length != kb.length) {
				return false;
			}
			var _g1 = 0;
			while(_g1 < ka.length) {
				var key = ka[_g1];
				++_g1;
				if(!hb.exists(key) || !thx_Dynamics.equals(ha.get(key),hb.get(key))) {
					return false;
				}
			}
			return true;
		}
		var t = false;
		t = thx_Iterators.isIterator(a);
		if(t || thx_Iterables.isIterable(a)) {
			var va = t ? thx_Iterators.toArray(a) : thx_Iterators.toArray($getIterator(a));
			var vb = t ? thx_Iterators.toArray(b) : thx_Iterators.toArray($getIterator(b));
			if(va.length != vb.length) {
				return false;
			}
			var _g1 = 0;
			var _g2 = va.length;
			while(_g1 < _g2) {
				var i = _g1++;
				if(!thx_Dynamics.equals(va[i],vb[i])) {
					return false;
				}
			}
			return true;
		}
		var f = null;
		var tmp;
		if(Object.prototype.hasOwnProperty.call(a,"equals")) {
			f = Reflect.field(a,"equals");
			tmp = Reflect.isFunction(f);
		} else {
			tmp = false;
		}
		if(tmp) {
			return f.apply(a,[b]);
		}
		var fields = Type.getInstanceFields(js_Boot.getClass(a));
		var _g1 = 0;
		while(_g1 < fields.length) {
			var field = fields[_g1];
			++_g1;
			var va = Reflect.field(a,field);
			if(Reflect.isFunction(va)) {
				continue;
			}
			var vb = Reflect.field(b,field);
			if(!thx_Dynamics.equals(va,vb)) {
				return false;
			}
		}
		return true;
	case 7:
		var e = _g.e;
		var ea = e.__ename__;
		var teb = Type.getEnum(b);
		var eb = teb.__ename__;
		if(ea != eb) {
			return false;
		}
		if(a._hx_index != b._hx_index) {
			return false;
		}
		var pa = Type.enumParameters(a);
		var pb = Type.enumParameters(b);
		var _g = 0;
		var _g1 = pa.length;
		while(_g < _g1) {
			var i = _g++;
			if(!thx_Dynamics.equals(pa[i],pb[i])) {
				return false;
			}
		}
		return true;
	case 8:
		throw haxe_Exception.thrown("Unable to compare two unknown types");
	}
};
thx_Dynamics.clone = function(v,cloneInstances) {
	if(cloneInstances == null) {
		cloneInstances = false;
	}
	var _g = Type.typeof(v);
	switch(_g._hx_index) {
	case 0:
		return null;
	case 1:case 2:case 3:case 5:case 8:
		return v;
	case 4:
		return thx_Objects.copyTo(v,{ });
	case 6:
		var c = _g.c;
		var name = c.__name__;
		switch(name) {
		case "Array":
			var _this = v;
			var result = new Array(_this.length);
			var _g1 = 0;
			var _g11 = _this.length;
			while(_g1 < _g11) {
				var i = _g1++;
				result[i] = thx_Dynamics.clone(_this[i],cloneInstances);
			}
			return result;
		case "Date":case "String":
			return v;
		default:
			if(cloneInstances) {
				var o = Object.create(c.prototype);
				var _g1 = 0;
				var _g2 = Type.getInstanceFields(c);
				while(_g1 < _g2.length) {
					var field = _g2[_g1];
					++_g1;
					o[field] = thx_Dynamics.clone(Reflect.field(v,field),cloneInstances);
				}
				return o;
			} else {
				return v;
			}
		}
		break;
	case 7:
		var _g1 = _g.e;
		return v;
	}
};
thx_Dynamics.compare = function(a,b) {
	if(null == a && null == b) {
		return 0;
	}
	if(null == a) {
		return -1;
	}
	if(null == b) {
		return 1;
	}
	if(!thx_Types.sameType(a,b)) {
		var a1 = thx_Types.toString(Type.typeof(a));
		var b1 = thx_Types.toString(Type.typeof(b));
		if(a1 < b1) {
			return -1;
		} else if(a1 > b1) {
			return 1;
		} else {
			return 0;
		}
	}
	var _g = Type.typeof(a);
	switch(_g._hx_index) {
	case 1:
		return thx_Ints.compare(a,b);
	case 2:
		var a1 = a;
		var b1 = b;
		if(a1 < b1) {
			return -1;
		} else if(a1 > b1) {
			return 1;
		} else {
			return 0;
		}
		break;
	case 3:
		return thx_Bools.compare(a,b);
	case 4:
		return thx_Objects.compare(a,b);
	case 6:
		var c = _g.c;
		var name = c.__name__;
		switch(name) {
		case "Array":
			return thx_Arrays.compare(a,b);
		case "Date":
			return thx_Dates.compare(a,b);
		case "String":
			var a1 = a;
			var b1 = b;
			if(a1 < b1) {
				return -1;
			} else if(a1 > b1) {
				return 1;
			} else {
				return 0;
			}
			break;
		default:
			if(Object.prototype.hasOwnProperty.call(a,"compare")) {
				return Reflect.field(a,"compare").apply(a,[b]);
			} else {
				var a1 = Std.string(a);
				var b1 = Std.string(b);
				if(a1 < b1) {
					return -1;
				} else if(a1 > b1) {
					return 1;
				} else {
					return 0;
				}
			}
		}
		break;
	case 7:
		var e = _g.e;
		return thx_Enums.compare(a,b);
	default:
		return 0;
	}
};
thx_Dynamics.string = function(v) {
	var _g = Type.typeof(v);
	switch(_g._hx_index) {
	case 0:
		return "null";
	case 1:case 2:case 3:
		return "" + Std.string(v);
	case 4:
		return thx_Objects.string(v);
	case 5:
		return "<function>";
	case 6:
		var c = _g.c;
		switch(c.__name__) {
		case "Array":
			return thx_Arrays.string(v);
		case "Date":
			return HxOverrides.dateStr(v);
		case "String":
			return v;
		default:
			if(js_Boot.__implements(v,haxe_IMap)) {
				return thx_Maps.string(v);
			} else {
				return Std.string(v);
			}
		}
		break;
	case 7:
		var e = _g.e;
		return thx_Enums.string(v);
	case 8:
		return "<unknown>";
	}
};
var thx_DynamicsT = function() { };
thx_DynamicsT.__name__ = "thx.DynamicsT";
thx_DynamicsT.isEmpty = function(o) {
	return Reflect.fields(o).length == 0;
};
thx_DynamicsT.exists = function(o,name) {
	return Object.prototype.hasOwnProperty.call(o,name);
};
thx_DynamicsT.fields = function(o) {
	return Reflect.fields(o);
};
thx_DynamicsT.merge = function(to,from,replacef) {
	if(null == replacef) {
		replacef = function(field,oldv,newv) {
			return newv;
		};
	}
	var _g = 0;
	var _g1 = Reflect.fields(from);
	while(_g < _g1.length) {
		var field = _g1[_g];
		++_g;
		var newv = Reflect.field(from,field);
		if(Object.prototype.hasOwnProperty.call(to,field)) {
			to[field] = replacef(field,Reflect.field(to,field),newv);
		} else {
			to[field] = newv;
		}
	}
	return to;
};
thx_DynamicsT.size = function(o) {
	return Reflect.fields(o).length;
};
thx_DynamicsT.values = function(o) {
	var _this = Reflect.fields(o);
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = Reflect.field(o,_this[i]);
	}
	return result;
};
thx_DynamicsT.tuples = function(o) {
	var _this = Reflect.fields(o);
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		var key = _this[i];
		var this1 = { _0 : key, _1 : Reflect.field(o,key)};
		result[i] = this1;
	}
	return result;
};
var thx_Either = $hxEnums["thx.Either"] = { __ename__ : "thx.Either", __constructs__ : ["Left","Right"]
	,Left: ($_=function(value) { return {_hx_index:0,value:value,__enum__:"thx.Either",toString:$estr}; },$_.__params__ = ["value"],$_)
	,Right: ($_=function(value) { return {_hx_index:1,value:value,__enum__:"thx.Either",toString:$estr}; },$_.__params__ = ["value"],$_)
};
var thx_Eithers = function() { };
thx_Eithers.__name__ = "thx.Eithers";
thx_Eithers.isLeft = function(either) {
	switch(either._hx_index) {
	case 0:
		var _g = either.value;
		return true;
	case 1:
		var _g = either.value;
		return false;
	}
};
thx_Eithers.isRight = function(either) {
	switch(either._hx_index) {
	case 0:
		var _g = either.value;
		return false;
	case 1:
		var _g = either.value;
		return true;
	}
};
thx_Eithers.toLeft = function(either) {
	switch(either._hx_index) {
	case 0:
		var v = either.value;
		return haxe_ds_Option.Some(v);
	case 1:
		var _g = either.value;
		return haxe_ds_Option.None;
	}
};
thx_Eithers.toRight = function(either) {
	switch(either._hx_index) {
	case 0:
		var _g = either.value;
		return haxe_ds_Option.None;
	case 1:
		var v = either.value;
		return haxe_ds_Option.Some(v);
	}
};
thx_Eithers.toLeftUnsafe = function(either) {
	switch(either._hx_index) {
	case 0:
		var v = either.value;
		return v;
	case 1:
		var _g = either.value;
		return null;
	}
};
thx_Eithers.toRightUnsafe = function(either) {
	switch(either._hx_index) {
	case 0:
		var _g = either.value;
		return null;
	case 1:
		var v = either.value;
		return v;
	}
};
thx_Eithers.map = function(either,f) {
	switch(either._hx_index) {
	case 0:
		var v = either.value;
		return thx_Either.Left(v);
	case 1:
		var v = either.value;
		return thx_Either.Right(f(v));
	}
};
thx_Eithers.ap = function(either,fa) {
	switch(either._hx_index) {
	case 0:
		var l = either.value;
		return thx_Either.Left(l);
	case 1:
		var v = either.value;
		return thx_Eithers.map(fa,function(f) {
			return f(v);
		});
	}
};
thx_Eithers.flatMap = function(either,f) {
	switch(either._hx_index) {
	case 0:
		var v = either.value;
		return thx_Either.Left(v);
	case 1:
		var v = either.value;
		return f(v);
	}
};
thx_Eithers.leftMap = function(either,f) {
	switch(either._hx_index) {
	case 0:
		var v = either.value;
		return thx_Either.Left(f(v));
	case 1:
		var v = either.value;
		return thx_Either.Right(v);
	}
};
thx_Eithers.orThrow = function(either,message) {
	switch(either._hx_index) {
	case 0:
		var v = either.value;
		throw new thx_Error("" + message + ": " + Std.string(v),null,{ fileName : "thx/Eithers.hx", lineNumber : 104, className : "thx.Eithers", methodName : "orThrow"});
	case 1:
		var v = either.value;
		return v;
	}
};
thx_Eithers.toValidation = function(either) {
	return either;
};
thx_Eithers.toVNel = function(either) {
	return thx_Eithers.leftMap(either,thx_Nel.pure);
};
thx_Eithers.cata = function(either,l,r) {
	switch(either._hx_index) {
	case 0:
		var l0 = either.value;
		return l(l0);
	case 1:
		var r0 = either.value;
		return r(r0);
	}
};
thx_Eithers.bimap = function(either,l,r) {
	switch(either._hx_index) {
	case 0:
		var l0 = either.value;
		return thx_Either.Left(l(l0));
	case 1:
		var r0 = either.value;
		return thx_Either.Right(r(r0));
	}
};
thx_Eithers.foldLeft = function(either,a,f) {
	switch(either._hx_index) {
	case 0:
		var l0 = either.value;
		return a;
	case 1:
		var r0 = either.value;
		return f(a,r0);
	}
};
thx_Eithers.foldMap = function(either,f,m) {
	var _e = m;
	var tmp = function(a0,a1) {
		return thx_Monoid.append(_e,a0,a1);
	};
	return thx_Eithers.foldLeft(thx_Eithers.map(either,f),thx_Monoid.get_zero(m),tmp);
};
thx_Eithers.getOrElse = function(e0,v) {
	switch(e0._hx_index) {
	case 0:
		var _g = e0.value;
		return v;
	case 1:
		var v = e0.value;
		return v;
	}
};
thx_Eithers.getOrElseF = function(e0,f) {
	switch(e0._hx_index) {
	case 0:
		var _g = e0.value;
		return f();
	case 1:
		var v = e0.value;
		return v;
	}
};
thx_Eithers.orElse = function(e0,e1) {
	if(e0._hx_index == 0) {
		var e = e0.value;
		return e1;
	} else {
		var r = e0;
		return r;
	}
};
thx_Eithers.orElseF = function(e0,f) {
	if(e0._hx_index == 0) {
		var e = e0.value;
		return f();
	} else {
		var r = e0;
		return r;
	}
};
thx_Eithers.each = function(either,f) {
	switch(either._hx_index) {
	case 0:
		var l = either.value;
		break;
	case 1:
		var r = either.value;
		f(r);
		break;
	}
};
thx_Eithers.eachLeft = function(either,f) {
	switch(either._hx_index) {
	case 0:
		var l = either.value;
		f(l);
		break;
	case 1:
		var r = either.value;
		break;
	}
};
thx_Eithers.ensure = function(either,p,error) {
	if(either._hx_index == 1) {
		var a = either.value;
		if(p(a)) {
			return either;
		} else {
			return thx_Either.Left(error);
		}
	} else {
		return either;
	}
};
thx_Eithers.exists = function(either,p) {
	if(either._hx_index == 1) {
		var a = either.value;
		return p(a);
	} else {
		return false;
	}
};
thx_Eithers.forall = function(either,p) {
	if(either._hx_index == 1) {
		var a = either.value;
		return p(a);
	} else {
		return true;
	}
};
var thx_EitherK = {};
thx_EitherK.apply = function(this1,a) {
	return this1(a);
};
thx_EitherK.compose = function(this1,f) {
	return function(a0) {
		return thx_Eithers.flatMap(thx_EitherK.apply(f,a0),this1);
	};
};
thx_EitherK.andThen = function(this1,f) {
	return function(a) {
		var tmp = this1(a);
		var _e = f;
		return thx_Eithers.flatMap(tmp,function(a) {
			return thx_EitherK.apply(_e,a);
		});
	};
};
thx_EitherK.pure = function(r) {
	return function(a) {
		return thx_Either.Right(r);
	};
};
thx_EitherK.map = function(this1,f) {
	var fb = f;
	return thx_EitherK.flatMap(this1,function(v) {
		return thx_EitherK.pure(fb(v));
	});
};
thx_EitherK.ap = function(this1,e) {
	return thx_EitherK.flatMap(this1,function(r) {
		return thx_EitherK.map(e,function(f) {
			return f(r);
		});
	});
};
thx_EitherK.flatMap = function(this1,f) {
	return function(a) {
		return thx_Eithers.flatMap(this1(a),function(r) {
			return thx_EitherK.apply(f(r),a);
		});
	};
};
thx_EitherK.monoid = function() {
	return { zero : function(r) {
		return thx_Either.Right(r);
	}, append : function(f0,f1) {
		return function(r) {
			var tmp = thx_EitherK.apply(f0,r);
			var _e = f1;
			return thx_Eithers.flatMap(tmp,function(a) {
				return thx_EitherK.apply(_e,a);
			});
		};
	}};
};
var thx_Enums = function() { };
thx_Enums.__name__ = "thx.Enums";
thx_Enums.string = function(e) {
	var cons = $hxEnums[e.__enum__].__constructs__[e._hx_index];
	var params = [];
	var _g = 0;
	var _g1 = Type.enumParameters(e);
	while(_g < _g1.length) {
		var param = _g1[_g];
		++_g;
		params.push(thx_Dynamics.string(param));
	}
	return cons + (params.length == 0 ? "" : "(" + params.join(", ") + ")");
};
thx_Enums.compare = function(a,b) {
	var v = thx_Ints.compare(a._hx_index,b._hx_index);
	if(v != 0) {
		return v;
	}
	return thx_Arrays.compare(Type.enumParameters(a),Type.enumParameters(b));
};
thx_Enums.sameConstructor = function(a,b) {
	return a._hx_index == b._hx_index;
};
thx_Enums.min = function(a,b) {
	if(thx_Enums.compare(a,b) < 0) {
		return a;
	} else {
		return b;
	}
};
thx_Enums.max = function(a,b) {
	if(thx_Enums.compare(a,b) > 0) {
		return a;
	} else {
		return b;
	}
};
var thx_Error = function(message,stack,pos) {
	Error.call(this,message);
	this.message = message;
	if(null == stack) {
		try {
			stack = haxe_CallStack.exceptionStack();
		} catch( _g ) {
			stack = [];
		}
		if(stack.length == 0) {
			try {
				stack = haxe_CallStack.callStack();
			} catch( _g ) {
				stack = [];
			}
		}
	}
	this.stackItems = stack;
	this.pos = pos;
};
thx_Error.__name__ = "thx.Error";
thx_Error.fromDynamic = function(err,pos) {
	if(((err) instanceof thx_Error)) {
		return err;
	}
	return new thx_error_ErrorWrapper("" + Std.string(err),err,null,pos);
};
thx_Error.__super__ = Error;
thx_Error.prototype = $extend(Error.prototype,{
	pos: null
	,stackItems: null
	,toString: function() {
		return this.message + "\nfrom: " + this.getPosition() + "\n\n" + this.stackToString();
	}
	,getPosition: function() {
		return this.pos.className + "." + this.pos.methodName + "() at " + this.pos.lineNumber;
	}
	,stackToString: function() {
		return haxe_CallStack.toString(this.stackItems);
	}
	,__class__: thx_Error
});
var thx_Floats = function() { };
thx_Floats.__name__ = "thx.Floats";
thx_Floats.angleDifference = function(a,b,turn) {
	if(turn == null) {
		turn = 360.0;
	}
	var r = (b - a) % turn;
	if(r < 0) {
		r += turn;
	}
	if(r > turn / 2) {
		r -= turn;
	}
	return r;
};
thx_Floats.ceilTo = function(f,decimals) {
	var p = Math.pow(10,decimals);
	return Math.ceil(f * p) / p;
};
thx_Floats.canParse = function(s) {
	if(!(thx_Floats.pattern_parse.match(s) || thx_Floats.pattern_inf.match(s))) {
		return thx_Floats.pattern_neg_inf.match(s);
	} else {
		return true;
	}
};
thx_Floats.clamp = function(v,min,max) {
	if(v < min) {
		return min;
	} else if(v > max) {
		return max;
	} else {
		return v;
	}
};
thx_Floats.clampSym = function(v,max) {
	var min = -max;
	if(v < min) {
		return min;
	} else if(v > max) {
		return max;
	} else {
		return v;
	}
};
thx_Floats.compare = function(a,b) {
	if(a < b) {
		return -1;
	} else if(a > b) {
		return 1;
	} else {
		return 0;
	}
};
thx_Floats.floorTo = function(f,decimals) {
	var p = Math.pow(10,decimals);
	return Math.floor(f * p) / p;
};
thx_Floats.interpolate = function(f,a,b) {
	return (b - a) * f + a;
};
thx_Floats.interpolateAngle = function(f,a,b,turn) {
	if(turn == null) {
		turn = 360;
	}
	return thx_Floats.wrapCircular(thx_Floats.interpolate(f,a,a + thx_Floats.angleDifference(a,b,turn)),turn);
};
thx_Floats.interpolateAngleWidest = function(f,a,b,turn) {
	if(turn == null) {
		turn = 360;
	}
	return thx_Floats.wrapCircular(thx_Floats.interpolateAngle(f,a,b,turn) - turn / 2,turn);
};
thx_Floats.interpolateAngleCW = function(f,a,b,turn) {
	if(turn == null) {
		turn = 360;
	}
	a = thx_Floats.wrapCircular(a,turn);
	b = thx_Floats.wrapCircular(b,turn);
	if(b < a) {
		b += turn;
	}
	return thx_Floats.wrapCircular(thx_Floats.interpolate(f,a,b),turn);
};
thx_Floats.interpolateAngleCCW = function(f,a,b,turn) {
	if(turn == null) {
		turn = 360;
	}
	a = thx_Floats.wrapCircular(a,turn);
	b = thx_Floats.wrapCircular(b,turn);
	if(b > a) {
		b -= turn;
	}
	return thx_Floats.wrapCircular(thx_Floats.interpolate(f,a,b),turn);
};
thx_Floats.max = function(a,b) {
	if(a > b) {
		return a;
	} else {
		return b;
	}
};
thx_Floats.min = function(a,b) {
	if(a < b) {
		return a;
	} else {
		return b;
	}
};
thx_Floats.nearEquals = function(a,b,tollerance) {
	if(tollerance == null) {
		tollerance = 1e-9;
	}
	if(isFinite(a)) {
		return Math.abs(a - b) <= tollerance;
	}
	if(isNaN(a)) {
		return isNaN(b);
	}
	if(isNaN(b)) {
		return false;
	}
	if(!isFinite(b)) {
		return a > 0 == b > 0;
	}
	return false;
};
thx_Floats.nearEqualAngles = function(a,b,turn,tollerance) {
	if(tollerance == null) {
		tollerance = 1e-9;
	}
	if(turn == null) {
		turn = 360.0;
	}
	return Math.abs(thx_Floats.angleDifference(a,b,turn)) <= tollerance;
};
thx_Floats.nearZero = function(n,tollerance) {
	if(tollerance == null) {
		tollerance = 1e-9;
	}
	return Math.abs(n) <= tollerance;
};
thx_Floats.normalize = function(v) {
	if(v < 0) {
		return 0;
	} else if(v > 1) {
		return 1;
	} else {
		return v;
	}
};
thx_Floats.parse = function(s) {
	if(s.substring(0,1) == "+") {
		s = s.substring(1);
	}
	if(thx_Floats.pattern_inf.match(s)) {
		return Infinity;
	} else if(thx_Floats.pattern_neg_inf.match(s)) {
		return -Infinity;
	} else {
		return parseFloat(s);
	}
};
thx_Floats.root = function(base,index) {
	return Math.pow(base,1 / index);
};
thx_Floats.roundTo = function(f,decimals) {
	var p = Math.pow(10,decimals);
	return Math.round(f * p) / p;
};
thx_Floats.sign = function(value) {
	if(value < 0) {
		return -1;
	} else {
		return 1;
	}
};
thx_Floats.toString = function(v) {
	return "" + v;
};
thx_Floats.toFloat = function(s) {
	return thx_Floats.parse(s);
};
thx_Floats.trunc = function(value) {
	if(value < 0.0) {
		return Math.ceil(value);
	} else {
		return Math.floor(value);
	}
};
thx_Floats.ftrunc = function(value) {
	if(value < 0.0) {
		return Math.ceil(value);
	} else {
		return Math.floor(value);
	}
};
thx_Floats.wrap = function(v,min,max) {
	var range = max - min + 1;
	if(v < min) {
		v += range * ((min - v) / range + 1);
	}
	return min + (v - min) % range;
};
thx_Floats.wrapCircular = function(v,max) {
	v %= max;
	if(v < 0) {
		v += max;
	}
	return v;
};
var thx_Functions0 = function() { };
thx_Functions0.__name__ = "thx.Functions0";
thx_Functions0.after = function(callback,n) {
	return function() {
		if((n -= 1) == 0) {
			callback();
		}
	};
};
thx_Functions0.join = function(fa,fb) {
	return function() {
		fa();
		fb();
	};
};
thx_Functions0.memoize = function(callback) {
	var result = null;
	return function() {
		if(result == null) {
			result = callback();
		}
		return result;
	};
};
thx_Functions0.once = function(f) {
	return function() {
		var t = f;
		f = thx_Functions.noop;
		t();
	};
};
thx_Functions0.negate = function(callback) {
	return function() {
		return !callback();
	};
};
thx_Functions0.times = function(n,callback) {
	return function() {
		var _this = thx_Ints.range(n);
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = callback();
		}
		return result;
	};
};
thx_Functions0.timesi = function(n,callback) {
	return function() {
		var _this = thx_Ints.range(n);
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = callback(_this[i]);
		}
		return result;
	};
};
var thx_Functions1 = function() { };
thx_Functions1.__name__ = "thx.Functions1";
thx_Functions1.compose = function(fa,fb) {
	return function(v) {
		return fa(fb(v));
	};
};
thx_Functions1.map = function(fab,fbc) {
	return function(a) {
		return fbc(fab(a));
	};
};
thx_Functions1.contramap = function(fbc,fab) {
	return function(a) {
		return fbc(fab(a));
	};
};
thx_Functions1.join = function(fa,fb) {
	return function(v) {
		fa(v);
		fb(v);
	};
};
thx_Functions1.memoize = function(callback,resolver) {
	if(null == resolver) {
		resolver = function(v) {
			return "" + Std.string(v);
		};
	}
	var map_h = Object.create(null);
	return function(v) {
		var key = resolver(v);
		if(Object.prototype.hasOwnProperty.call(map_h,key)) {
			return map_h[key];
		}
		var result = callback(v);
		map_h[key] = result;
		return result;
	};
};
thx_Functions1.negate = function(callback) {
	return function(v) {
		return !callback(v);
	};
};
thx_Functions1.noop = function(_) {
};
thx_Functions1.times = function(n,callback) {
	return function(value) {
		var _this = thx_Ints.range(n);
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = callback(value);
		}
		return result;
	};
};
thx_Functions1.timesi = function(n,callback) {
	return function(value) {
		var _this = thx_Ints.range(n);
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = callback(value,_this[i]);
		}
		return result;
	};
};
thx_Functions1.swapArguments = function(callback) {
	return function(a2,a1) {
		return callback(a1,a2);
	};
};
var thx_Functions2 = function() { };
thx_Functions2.__name__ = "thx.Functions2";
thx_Functions2.memoize = function(callback,resolver) {
	if(null == resolver) {
		resolver = function(v1,v2) {
			return "" + Std.string(v1) + ":" + Std.string(v2);
		};
	}
	var map_h = Object.create(null);
	return function(v1,v2) {
		var key = resolver(v1,v2);
		if(Object.prototype.hasOwnProperty.call(map_h,key)) {
			return map_h[key];
		}
		var result = callback(v1,v2);
		map_h[key] = result;
		return result;
	};
};
thx_Functions2.curry = function(f) {
	return function(a) {
		return function(b) {
			return f(a,b);
		};
	};
};
thx_Functions2.join = function(fa,fb) {
	return function(v1,v2) {
		fa(v1,v2);
		fb(v1,v2);
	};
};
thx_Functions2.negate = function(callback) {
	return function(v1,v2) {
		return !callback(v1,v2);
	};
};
var thx_Functions3 = function() { };
thx_Functions3.__name__ = "thx.Functions3";
thx_Functions3.memoize = function(callback,resolver) {
	if(null == resolver) {
		resolver = function(v1,v2,v3) {
			return "" + Std.string(v1) + ":" + Std.string(v2) + ":" + Std.string(v3);
		};
	}
	var map_h = Object.create(null);
	return function(v1,v2,v3) {
		var key = resolver(v1,v2,v3);
		if(Object.prototype.hasOwnProperty.call(map_h,key)) {
			return map_h[key];
		}
		var result = callback(v1,v2,v3);
		map_h[key] = result;
		return result;
	};
};
thx_Functions3.negate = function(callback) {
	return function(v1,v2,v3) {
		return !callback(v1,v2,v3);
	};
};
thx_Functions3.curry = function(f) {
	return function(a,b) {
		return function(c) {
			return f(a,b,c);
		};
	};
};
var thx_Functions4 = function() { };
thx_Functions4.__name__ = "thx.Functions4";
thx_Functions4.curry = function(f) {
	return function(a,b,c) {
		return function(d) {
			return f(a,b,c,d);
		};
	};
};
var thx_Functions5 = function() { };
thx_Functions5.__name__ = "thx.Functions5";
thx_Functions5.curry = function(f) {
	return function(a,b,c,d) {
		return function(e) {
			return f(a,b,c,d,e);
		};
	};
};
var thx_Functions6 = function() { };
thx_Functions6.__name__ = "thx.Functions6";
thx_Functions6.curry = function(f) {
	return function(a,b,c,d,e) {
		return function(f0) {
			return f(a,b,c,d,e,f0);
		};
	};
};
var thx_Functions7 = function() { };
thx_Functions7.__name__ = "thx.Functions7";
thx_Functions7.curry = function(f) {
	return function(a,b,c,d,e,f0) {
		return function(g) {
			return f(a,b,c,d,e,f0,g);
		};
	};
};
var thx_Functions8 = function() { };
thx_Functions8.__name__ = "thx.Functions8";
thx_Functions8.curry = function(f) {
	return function(a,b,c,d,e,f0,g) {
		return function(h) {
			return f(a,b,c,d,e,f0,g,h);
		};
	};
};
var thx_Functions9 = function() { };
thx_Functions9.__name__ = "thx.Functions9";
thx_Functions9.curry = function(f) {
	return function(a,b,c,d,e,f0,g,h) {
		return function(i) {
			return f(a,b,c,d,e,f0,g,h,i);
		};
	};
};
var thx_Functions10 = function() { };
thx_Functions10.__name__ = "thx.Functions10";
thx_Functions10.curry = function(f) {
	return function(a,b,c,d,e,f0,g,h,i) {
		return function(j) {
			return f(a,b,c,d,e,f0,g,h,i,j);
		};
	};
};
var thx_Functions11 = function() { };
thx_Functions11.__name__ = "thx.Functions11";
thx_Functions11.curry = function(f) {
	return function(a,b,c,d,e,f0,g,h,i,j) {
		return function(k) {
			return f(a,b,c,d,e,f0,g,h,i,j,k);
		};
	};
};
var thx_Functions12 = function() { };
thx_Functions12.__name__ = "thx.Functions12";
thx_Functions12.curry = function(f) {
	return function(a,b,c,d,e,f0,g,h,i,j,k) {
		return function(l) {
			return f(a,b,c,d,e,f0,g,h,i,j,k,l);
		};
	};
};
var thx_Functions13 = function() { };
thx_Functions13.__name__ = "thx.Functions13";
thx_Functions13.curry = function(f) {
	return function(a,b,c,d,e,f0,g,h,i,j,k,l) {
		return function(m) {
			return f(a,b,c,d,e,f0,g,h,i,j,k,l,m);
		};
	};
};
var thx_Functions14 = function() { };
thx_Functions14.__name__ = "thx.Functions14";
thx_Functions14.curry = function(f) {
	return function(a,b,c,d,e,f0,g,h,i,j,k,l,m) {
		return function(n) {
			return f(a,b,c,d,e,f0,g,h,i,j,k,l,m,n);
		};
	};
};
var thx_Functions15 = function() { };
thx_Functions15.__name__ = "thx.Functions15";
thx_Functions15.curry = function(f) {
	return function(a,b,c,d,e,f0,g,h,i,j,k,l,m,n) {
		return function(o) {
			return f(a,b,c,d,e,f0,g,h,i,j,k,l,m,n,o);
		};
	};
};
var thx_Functions16 = function() { };
thx_Functions16.__name__ = "thx.Functions16";
thx_Functions16.curry = function(f) {
	return function(a,b,c,d,e,f0,g,h,i,j,k,l,m,n,o) {
		return function(p) {
			return f(a,b,c,d,e,f0,g,h,i,j,k,l,m,n,o,p);
		};
	};
};
var thx_Functions17 = function() { };
thx_Functions17.__name__ = "thx.Functions17";
thx_Functions17.curry = function(f) {
	return function(a,b,c,d,e,f0,g,h,i,j,k,l,m,n,o,p) {
		return function(q) {
			return f(a,b,c,d,e,f0,g,h,i,j,k,l,m,n,o,p,q);
		};
	};
};
var thx_Functions18 = function() { };
thx_Functions18.__name__ = "thx.Functions18";
thx_Functions18.curry = function(f) {
	return function(a,b,c,d,e,f0,g,h,i,j,k,l,m,n,o,p,q) {
		return function(r) {
			return f(a,b,c,d,e,f0,g,h,i,j,k,l,m,n,o,p,q,r);
		};
	};
};
var thx_Functions19 = function() { };
thx_Functions19.__name__ = "thx.Functions19";
thx_Functions19.curry = function(f) {
	return function(a,b,c,d,e,f0,g,h,i,j,k,l,m,n,o,p,q,r) {
		return function(s) {
			return f(a,b,c,d,e,f0,g,h,i,j,k,l,m,n,o,p,q,r,s);
		};
	};
};
var thx_Functions20 = function() { };
thx_Functions20.__name__ = "thx.Functions20";
thx_Functions20.curry = function(f) {
	return function(a,b,c,d,e,f0,g,h,i,j,k,l,m,n,o,p,q,r,s) {
		return function(t) {
			return f(a,b,c,d,e,f0,g,h,i,j,k,l,m,n,o,p,q,r,s,t);
		};
	};
};
var thx_Reader = {};
thx_Reader.flatMap = function(this1,f) {
	return function(a) {
		return (f(this1(a)))(a);
	};
};
var thx_Functions = function() { };
thx_Functions.__name__ = "thx.Functions";
thx_Functions.equality = function(a,b) {
	return a == b;
};
thx_Functions.identity = function(value) {
	return value;
};
thx_Functions.noop = function() {
};
thx_Functions.passTo = function(a,f) {
	return f(a);
};
thx_Functions.applyTo = function(f,a) {
	return f(a);
};
var thx_Ints = function() { };
thx_Ints.__name__ = "thx.Ints";
thx_Ints.abs = function(v) {
	if(v < 0) {
		return -v;
	} else {
		return v;
	}
};
thx_Ints.canParse = function(s) {
	return thx_Ints.pattern_parse.match(s);
};
thx_Ints.clamp = function(v,min,max) {
	if(v < min) {
		return min;
	} else if(v > max) {
		return max;
	} else {
		return v;
	}
};
thx_Ints.clampSym = function(v,max) {
	var min = -max;
	if(v < min) {
		return min;
	} else if(v > max) {
		return max;
	} else {
		return v;
	}
};
thx_Ints.compare = function(a,b) {
	return a - b;
};
thx_Ints.gcd = function(m,n) {
	if(m < 0) {
		m = -m;
	}
	if(n < 0) {
		n = -n;
	}
	var t;
	while(true) {
		if(n == 0) {
			return m;
		}
		t = m;
		m = n;
		n = t % m;
	}
};
thx_Ints.interpolate = function(f,a,b) {
	return Math.round(a + (b - a) * f);
};
thx_Ints.isEven = function(v) {
	return v % 2 == 0;
};
thx_Ints.isOdd = function(v) {
	return v % 2 != 0;
};
thx_Ints.lpad = function(v,pad,len) {
	if(pad == null) {
		pad = "0";
	}
	var neg = false;
	if(v < 0) {
		neg = true;
		v = -v;
	}
	return (neg ? "-" : "") + StringTools.lpad("" + v,pad,len);
};
thx_Ints.lcm = function(m,n) {
	if(m < 0) {
		m = -m;
	}
	if(n < 0) {
		n = -n;
	}
	if(n == 0) {
		return m;
	}
	return m * (n / thx_Ints.gcd(m,n) | 0);
};
thx_Ints.rpad = function(v,pad,len) {
	if(pad == null) {
		pad = "0";
	}
	return StringTools.rpad("" + v,pad,len);
};
thx_Ints.max = function(a,b) {
	if(a > b) {
		return a;
	} else {
		return b;
	}
};
thx_Ints.min = function(a,b) {
	if(a < b) {
		return a;
	} else {
		return b;
	}
};
thx_Ints.parse = function(s,base) {
	if(null == base) {
		if(s.substring(0,2) == "0x") {
			base = 16;
		} else {
			base = 10;
		}
	}
	var v = parseInt(s,base);
	if(isNaN(v)) {
		return null;
	} else {
		return v;
	}
};
thx_Ints.random = function(min,max) {
	if(min == null) {
		min = 0;
	}
	return Std.random(max - min + 1) + min;
};
thx_Ints.range = function(start,stop,step) {
	if(step == null) {
		step = 1;
	}
	if(null == stop) {
		stop = start;
		start = 0;
	}
	if((stop - start) / step == Infinity) {
		throw haxe_Exception.thrown("infinite range");
	}
	var range = [];
	var i = -1;
	var j;
	if(step < 0) {
		while(true) {
			j = start + step * ++i;
			if(!(j > stop)) {
				break;
			}
			range.push(j);
		}
	} else {
		while(true) {
			j = start + step * ++i;
			if(!(j < stop)) {
				break;
			}
			range.push(j);
		}
	}
	return range;
};
thx_Ints.rangeIter = function(start,stop,step) {
	if(step == null) {
		step = 1;
	}
	return new thx_RangeIterator(start,stop,step);
};
thx_Ints.toString = function(value,base) {
	return value.toString(base);
};
thx_Ints.toBase = function(value,base) {
	return value.toString(base);
};
thx_Ints.toBool = function(v) {
	return v != 0;
};
thx_Ints.toInt = function(s,base) {
	return thx_Ints.parse(s,base);
};
thx_Ints.sign = function(value) {
	if(value < 0) {
		return -1;
	} else {
		return 1;
	}
};
thx_Ints.wrapCircular = function(v,max) {
	v %= max;
	if(v < 0) {
		v += max;
	}
	return v;
};
var thx_RangeIterator = function(start,stop,step) {
	if(step == null) {
		step = 1;
	}
	this.current = start;
	this.stop = stop;
	this.step = step;
};
thx_RangeIterator.__name__ = "thx.RangeIterator";
thx_RangeIterator.prototype = {
	current: null
	,stop: null
	,step: null
	,hasNext: function() {
		if(!(this.stop == null || this.step >= 0 && this.current < this.stop)) {
			if(this.step < 0) {
				return this.current > this.stop;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,next: function() {
		var result = this.current;
		this.current += this.step;
		return result;
	}
	,__class__: thx_RangeIterator
};
var thx_Iterables = function() { };
thx_Iterables.__name__ = "thx.Iterables";
thx_Iterables.all = function(it,predicate) {
	return thx_Iterators.all($getIterator(it),predicate);
};
thx_Iterables.any = function(it,predicate) {
	return thx_Iterators.any($getIterator(it),predicate);
};
thx_Iterables.eachPair = function(it,handler) {
	thx_Iterators.eachPair($getIterator(it),handler);
};
thx_Iterables.equals = function(a,b,equality) {
	return thx_Iterators.equals($getIterator(a),$getIterator(b),equality);
};
thx_Iterables.filter = function(it,predicate) {
	return thx_Iterators.filter($getIterator(it),predicate);
};
thx_Iterables.find = function(it,predicate) {
	return thx_Iterators.find($getIterator(it),predicate);
};
thx_Iterables.findOption = function(it,predicate) {
	var value = thx_Iterators.find($getIterator(it),predicate);
	if(null == value) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(value);
	}
};
thx_Iterables.first = function(it) {
	return thx_Iterators.first($getIterator(it));
};
thx_Iterables.get = function(it,index) {
	return thx_Iterators.get($getIterator(it),index);
};
thx_Iterables.getOption = function(it,index) {
	var value = thx_Iterators.get($getIterator(it),index);
	if(null == value) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(value);
	}
};
thx_Iterables.last = function(it) {
	return thx_Iterators.last($getIterator(it));
};
thx_Iterables.hasElements = function(it) {
	return $getIterator(it).hasNext();
};
thx_Iterables.indexOf = function(it,element) {
	return thx_Iterators.indexOf($getIterator(it),element);
};
thx_Iterables.isEmpty = function(it) {
	return !$getIterator(it).hasNext();
};
thx_Iterables.isIterable = function(v) {
	var fields = Reflect.isObject(v) && null == js_Boot.getClass(v) ? Reflect.fields(v) : Type.getInstanceFields(js_Boot.getClass(v));
	if(!Lambda.has(fields,"iterator")) {
		return false;
	}
	return Reflect.isFunction(Reflect.field(v,"iterator"));
};
thx_Iterables.map = function(it,f) {
	return thx_Iterators.map($getIterator(it),f);
};
thx_Iterables.fmap = function(it,f) {
	return { iterator : function() {
		return thx_Iterators.fmap($getIterator(it),f);
	}};
};
thx_Iterables.mapi = function(it,f) {
	return thx_Iterators.mapi($getIterator(it),f);
};
thx_Iterables.fmapi = function(it,f) {
	return { iterator : function() {
		return thx_Iterators.fmapi($getIterator(it),f);
	}};
};
thx_Iterables.order = function(it,sort) {
	return thx_Iterators.order($getIterator(it),sort);
};
thx_Iterables.reduce = function(it,callback,initial) {
	return thx_Iterators.reduce($getIterator(it),callback,initial);
};
thx_Iterables.reducei = function(it,callback,initial) {
	return thx_Iterators.reducei($getIterator(it),callback,initial);
};
thx_Iterables.toArray = function(it) {
	return thx_Iterators.toArray($getIterator(it));
};
thx_Iterables.minBy = function(it,f,ord) {
	var found = haxe_ds_Option.None;
	var a = $getIterator(it);
	while(a.hasNext()) {
		var a1 = a.next();
		var a2 = [a1];
		if(!thx_Options.any(found,(function(a) {
			return function(a0) {
				return ord(f(a0),f(a[0])) == thx_OrderingImpl.LT;
			};
		})(a2))) {
			found = haxe_ds_Option.Some(a2[0]);
		}
	}
	return found;
};
thx_Iterables.maxBy = function(it,f,ord) {
	return thx_Iterables.minBy(it,f,thx_Ord.inverse(ord));
};
thx_Iterables.min = function(it,ord) {
	return thx_Iterables.minBy(it,thx_Functions.identity,ord);
};
thx_Iterables.max = function(it,ord) {
	return thx_Iterables.minBy(it,thx_Functions.identity,thx_Ord.inverse(ord));
};
thx_Iterables.extremaBy = function(it,f,ord) {
	var found = haxe_ds_Option.None;
	var a = $getIterator(it);
	while(a.hasNext()) {
		var a1 = a.next();
		switch(found._hx_index) {
		case 0:
			var _g = found.v;
			var t = _g;
			if(ord(f(a1),f(t._0)) == thx_OrderingImpl.LT) {
				var this1 = { _0 : a1, _1 : t._1};
				found = haxe_ds_Option.Some(this1);
			} else {
				var t1 = _g;
				if(ord(f(a1),f(t1._1)) == thx_OrderingImpl.GT) {
					var this2 = { _0 : t1._0, _1 : a1};
					found = haxe_ds_Option.Some(this2);
				}
			}
			break;
		case 1:
			var this3 = { _0 : a1, _1 : a1};
			found = haxe_ds_Option.Some(this3);
			break;
		default:
		}
	}
	return found;
};
thx_Iterables.extrema = function(it,ord) {
	return thx_Iterables.extremaBy(it,thx_Functions.identity,ord);
};
thx_Iterables.takeUntil = function(it,fn) {
	return thx_Iterators.takeUntil($getIterator(it),fn);
};
thx_Iterables.dropLeft = function(itr,n) {
	return { iterator : function() {
		var itr1 = $getIterator(itr);
		var count = n;
		while(count > 0) if(itr1.hasNext()) {
			itr1.next();
		}
		return { next : $bind(itr1,itr1.next), hasNext : $bind(itr1,itr1.hasNext)};
	}};
};
thx_Iterables.dropUntil = function(it,fn) {
	return thx_Iterators.dropUntil($getIterator(it),fn);
};
thx_Iterables.unionBy = function(a,b,eq) {
	var res = [];
	var e = $getIterator(a);
	while(e.hasNext()) {
		var e1 = e.next();
		res.push(e1);
	}
	var e = $getIterator(b);
	while(e.hasNext()) {
		var e1 = e.next();
		var e2 = [e1];
		if(!thx_Iterables.any(res,(function(e) {
			return function(x) {
				return eq(x,e[0]);
			};
		})(e2))) {
			res.push(e2[0]);
		}
	}
	return res;
};
thx_Iterables.differenceBy = function(a,b,eq) {
	var res = [];
	var e = $getIterator(a);
	while(e.hasNext()) {
		var e1 = e.next();
		var e2 = [e1];
		if(!thx_Iterables.any(b,(function(e) {
			return function(x) {
				return eq(x,e[0]);
			};
		})(e2))) {
			res.push(e2[0]);
		}
	}
	return res;
};
thx_Iterables.unzip = function(it) {
	return thx_Iterators.unzip($getIterator(it));
};
thx_Iterables.unzip3 = function(it) {
	return thx_Iterators.unzip3($getIterator(it));
};
thx_Iterables.unzip4 = function(it) {
	return thx_Iterators.unzip4($getIterator(it));
};
thx_Iterables.unzip5 = function(it) {
	return thx_Iterators.unzip5($getIterator(it));
};
thx_Iterables.zip = function(it1,it2) {
	return thx_Iterators.zip($getIterator(it1),$getIterator(it2));
};
thx_Iterables.zip3 = function(it1,it2,it3) {
	return thx_Iterators.zip3($getIterator(it1),$getIterator(it2),$getIterator(it3));
};
thx_Iterables.zip4 = function(it1,it2,it3,it4) {
	return thx_Iterators.zip4($getIterator(it1),$getIterator(it2),$getIterator(it3),$getIterator(it4));
};
thx_Iterables.zip5 = function(it1,it2,it3,it4,it5) {
	return thx_Iterators.zip5($getIterator(it1),$getIterator(it2),$getIterator(it3),$getIterator(it4),$getIterator(it5));
};
var thx_Iterators = function() { };
thx_Iterators.__name__ = "thx.Iterators";
thx_Iterators.all = function(it,predicate) {
	var element = it;
	while(element.hasNext()) {
		var element1 = element.next();
		if(!predicate(element1)) {
			return false;
		}
	}
	return true;
};
thx_Iterators.any = function(it,predicate) {
	var element = it;
	while(element.hasNext()) {
		var element1 = element.next();
		if(predicate(element1)) {
			return true;
		}
	}
	return false;
};
thx_Iterators.equals = function(a,b,equality) {
	if(null == equality) {
		equality = thx_Functions.equality;
	}
	var ae;
	var be;
	var an;
	var bn;
	while(true) {
		an = a.hasNext();
		bn = b.hasNext();
		if(!an && !bn) {
			return true;
		}
		if(!an || !bn) {
			return false;
		}
		if(!equality(a.next(),b.next())) {
			return false;
		}
	}
};
thx_Iterators.get = function(it,index) {
	var pos = 0;
	var i = it;
	while(i.hasNext()) {
		var i1 = i.next();
		if(pos++ == index) {
			return i1;
		}
	}
	return null;
};
thx_Iterators.getOption = function(it,index) {
	var value = thx_Iterators.get(it,index);
	if(null == value) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(value);
	}
};
thx_Iterators.eachPair = function(it,handler) {
	thx_Arrays.eachPair(thx_Iterators.toArray(it),handler);
};
thx_Iterators.filter = function(it,predicate) {
	return thx_Iterators.reduce(it,function(acc,element) {
		if(predicate(element)) {
			acc.push(element);
		}
		return acc;
	},[]);
};
thx_Iterators.find = function(it,f) {
	var element = it;
	while(element.hasNext()) {
		var element1 = element.next();
		if(f(element1)) {
			return element1;
		}
	}
	return null;
};
thx_Iterators.findOption = function(it,f) {
	var value = thx_Iterators.find(it,f);
	if(null == value) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(value);
	}
};
thx_Iterators.first = function(it) {
	if(it.hasNext()) {
		return it.next();
	} else {
		return null;
	}
};
thx_Iterators.hasElements = function(it) {
	return it.hasNext();
};
thx_Iterators.indexOf = function(it,element) {
	var pos = 0;
	var v = it;
	while(v.hasNext()) {
		var v1 = v.next();
		if(element == v1) {
			return pos;
		}
		++pos;
	}
	return -1;
};
thx_Iterators.isEmpty = function(it) {
	return !it.hasNext();
};
thx_Iterators.isIterator = function(v) {
	var fields = Reflect.isObject(v) && null == js_Boot.getClass(v) ? Reflect.fields(v) : Type.getInstanceFields(js_Boot.getClass(v));
	if(!Lambda.has(fields,"next") || !Lambda.has(fields,"hasNext")) {
		return false;
	}
	if(Reflect.isFunction(Reflect.field(v,"next"))) {
		return Reflect.isFunction(Reflect.field(v,"hasNext"));
	} else {
		return false;
	}
};
thx_Iterators.last = function(it) {
	var buf = null;
	while(it.hasNext()) buf = it.next();
	return buf;
};
thx_Iterators.forEach = function(it,proc) {
	while(it.hasNext()) proc(it.next());
};
thx_Iterators.map = function(it,f) {
	var acc = [];
	var v = it;
	while(v.hasNext()) {
		var v1 = v.next();
		acc.push(f(v1));
	}
	return acc;
};
thx_Iterators.fmap = function(it,f) {
	return new thx_MapIterator(it,f);
};
thx_Iterators.mapi = function(it,f) {
	var acc = [];
	var i = 0;
	var v = it;
	while(v.hasNext()) {
		var v1 = v.next();
		acc.push(f(v1,i++));
	}
	return acc;
};
thx_Iterators.fmapi = function(it,f) {
	return new thx_MapIIterator(it,f);
};
thx_Iterators.order = function(it,sort) {
	var n = thx_Iterators.toArray(it);
	n.sort(sort);
	return n;
};
thx_Iterators.reduce = function(it,callback,initial) {
	var result = initial;
	while(it.hasNext()) result = callback(result,it.next());
	return result;
};
thx_Iterators.reducei = function(it,callback,initial) {
	thx_Iterators.mapi(it,function(v,i) {
		initial = callback(initial,v,i);
	});
	return initial;
};
thx_Iterators.foldLeft = function(it,zero,f) {
	return thx_Iterators.reduce(it,f,zero);
};
thx_Iterators.foldMap = function(it,f,m) {
	var _e = m;
	var tmp = function(a0,a1) {
		return thx_Monoid.append(_e,a0,a1);
	};
	return thx_Iterators.foldLeft(thx_Iterators.fmap(it,f),thx_Monoid.get_zero(m),tmp);
};
thx_Iterators.takeUntil = function(it,f) {
	var out = [];
	var v = it;
	while(v.hasNext()) {
		var v1 = v.next();
		if(f(v1)) {
			out.push(v1);
		} else {
			break;
		}
	}
	return out;
};
thx_Iterators.dropUntil = function(it,f) {
	var done = false;
	var out = [];
	var v = it;
	while(v.hasNext()) {
		var v1 = v.next();
		if(!done) {
			if(!f(v1)) {
				done = true;
				out.push(v1);
			}
		} else {
			out.push(v1);
		}
	}
	return out;
};
thx_Iterators.toArray = function(it) {
	var elements = [];
	var element = it;
	while(element.hasNext()) {
		var element1 = element.next();
		elements.push(element1);
	}
	return elements;
};
thx_Iterators.unzip = function(it) {
	var a1 = [];
	var a2 = [];
	thx_Iterators.forEach(it,function(t) {
		a1.push(t._0);
		a2.push(t._1);
	});
	var this1 = { _0 : a1, _1 : a2};
	return this1;
};
thx_Iterators.unzip3 = function(it) {
	var a1 = [];
	var a2 = [];
	var a3 = [];
	thx_Iterators.forEach(it,function(t) {
		a1.push(t._0);
		a2.push(t._1);
		a3.push(t._2);
	});
	var this1 = { _0 : a1, _1 : a2, _2 : a3};
	return this1;
};
thx_Iterators.unzip4 = function(it) {
	var a1 = [];
	var a2 = [];
	var a3 = [];
	var a4 = [];
	thx_Iterators.forEach(it,function(t) {
		a1.push(t._0);
		a2.push(t._1);
		a3.push(t._2);
		a4.push(t._3);
	});
	var this1 = { _0 : a1, _1 : a2, _2 : a3, _3 : a4};
	return this1;
};
thx_Iterators.unzip5 = function(it) {
	var a1 = [];
	var a2 = [];
	var a3 = [];
	var a4 = [];
	var a5 = [];
	thx_Iterators.forEach(it,function(t) {
		a1.push(t._0);
		a2.push(t._1);
		a3.push(t._2);
		a4.push(t._3);
		a5.push(t._4);
	});
	var this1 = { _0 : a1, _1 : a2, _2 : a3, _3 : a4, _4 : a5};
	return this1;
};
thx_Iterators.zip = function(it1,it2) {
	var array = [];
	while(it1.hasNext() && it2.hasNext()) {
		var this1 = { _0 : it1.next(), _1 : it2.next()};
		array.push(this1);
	}
	return array;
};
thx_Iterators.zip3 = function(it1,it2,it3) {
	var array = [];
	while(it1.hasNext() && it2.hasNext() && it3.hasNext()) {
		var this1 = { _0 : it1.next(), _1 : it2.next(), _2 : it3.next()};
		array.push(this1);
	}
	return array;
};
thx_Iterators.zip4 = function(it1,it2,it3,it4) {
	var array = [];
	while(it1.hasNext() && it2.hasNext() && it3.hasNext() && it4.hasNext()) {
		var this1 = { _0 : it1.next(), _1 : it2.next(), _2 : it3.next(), _3 : it4.next()};
		array.push(this1);
	}
	return array;
};
thx_Iterators.zip5 = function(it1,it2,it3,it4,it5) {
	var array = [];
	while(it1.hasNext() && it2.hasNext() && it3.hasNext() && it4.hasNext() && it5.hasNext()) {
		var this1 = { _0 : it1.next(), _1 : it2.next(), _2 : it3.next(), _3 : it4.next(), _4 : it5.next()};
		array.push(this1);
	}
	return array;
};
var thx_MapIterator = function(base,f) {
	this.base = base;
	this.f = f;
};
thx_MapIterator.__name__ = "thx.MapIterator";
thx_MapIterator.prototype = {
	base: null
	,f: null
	,next: function() {
		return this.f(this.base.next());
	}
	,hasNext: function() {
		return this.base.hasNext();
	}
	,__class__: thx_MapIterator
};
var thx_MapIIterator = function(base,f) {
	this.i = 0;
	this.base = base;
	this.f = f;
};
thx_MapIIterator.__name__ = "thx.MapIIterator";
thx_MapIIterator.prototype = {
	base: null
	,f: null
	,i: null
	,next: function() {
		var result = this.f(this.base.next(),this.i);
		this.i++;
		return result;
	}
	,hasNext: function() {
		return this.base.hasNext();
	}
	,__class__: thx_MapIIterator
};
var thx_Maps = function() { };
thx_Maps.__name__ = "thx.Maps";
thx_Maps.copyTo = function(src,dst) {
	var key = src.keys();
	while(key.hasNext()) {
		var key1 = key.next();
		dst.set(key1,src.get(key1));
	}
	return dst;
};
thx_Maps.tuples = function(map) {
	return thx_Iterators.map(map.keys(),function(key) {
		var this1 = { _0 : key, _1 : map.get(key)};
		return this1;
	});
};
thx_Maps.mapValues = function(map,f,acc) {
	return thx_Maps.reduce(map,function(m,t) {
		m.set(t._0,f(t._1));
		return m;
	},acc);
};
thx_Maps.reduce = function(map,f,acc) {
	return thx_Arrays.reduce(thx_Maps.tuples(map),f,acc);
};
thx_Maps.values = function(map) {
	return thx_Iterators.map(map.keys(),function(key) {
		return map.get(key);
	});
};
thx_Maps.fromArray = function(array,toKey,toVal) {
	return thx_Arrays.reduce(array,function(acc,curr) {
		var key = toKey(curr);
		var value = toVal(curr);
		acc.h[key] = value;
		return acc;
	},new haxe_ds_StringMap());
};
thx_Maps.foldLeftWithKeys = function(map,f,acc) {
	return thx_Iterators.reduce(map.keys(),function(acc,k) {
		return f(acc,k,map.get(k));
	},acc);
};
thx_Maps.getOption = function(map,key) {
	var value = map.get(key);
	if(null == value) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(value);
	}
};
thx_Maps.toObject = function(map) {
	return thx_Arrays.reduce(thx_Maps.tuples(map),function(o,t) {
		o[t._0] = t._1;
		return o;
	},{ });
};
thx_Maps.getAlt = function(map,key,alt) {
	var v = map.get(key);
	if(null == v) {
		return alt;
	} else {
		return v;
	}
};
thx_Maps.getAltSet = function(map,key,alt) {
	var v = map.get(key);
	if(v != null) {
		return v;
	} else {
		map.set(key,alt);
		return alt;
	}
};
thx_Maps.isEmpty = function(map) {
	return !map.iterator().hasNext();
};
thx_Maps.isMap = function(v) {
	return js_Boot.__implements(v,haxe_IMap);
};
thx_Maps.string = function(m) {
	var _this = thx_Maps.tuples(m);
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		var t = _this[i];
		result[i] = thx_Dynamics.string(t._0) + " => " + thx_Dynamics.string(t._1);
	}
	return "[" + result.join(", ") + "]";
};
thx_Maps.merge = function(dest,sources) {
	return thx_Arrays.reduce(sources,function(result,source) {
		return thx_Iterators.reduce(source.keys(),function(result,key) {
			result.set(key,source.get(key));
			return result;
		},result);
	},dest);
};
var thx_Monoid = {};
thx_Monoid.get_semigroup = function(this1) {
	return this1.append;
};
thx_Monoid.get_zero = function(this1) {
	return this1.zero;
};
thx_Monoid.append = function(this1,a0,a1) {
	return this1.append(a0,a1);
};
var thx_Nel = {};
thx_Nel.nel = function(hd,tl) {
	var _g = thx_Nel.fromArray(tl);
	switch(_g._hx_index) {
	case 0:
		var nel = _g.v;
		return thx_Nel.cons(hd,nel);
	case 1:
		return thx_Nel.pure(hd);
	}
};
thx_Nel.pure = function(a) {
	return thx_NonEmptyList.Single(a);
};
thx_Nel.cons = function(a,nl) {
	return thx_NonEmptyList.ConsNel(a,nl);
};
thx_Nel.fromArray = function(arr) {
	if(arr.length == 0) {
		return haxe_ds_Option.None;
	} else {
		var res = thx_NonEmptyList.Single(arr[arr.length - 1]);
		var i = thx_Ints.rangeIter(arr.length - 2,-1,-1);
		while(i.hasNext()) {
			var i1 = i.next();
			res = thx_NonEmptyList.ConsNel(arr[i1],res);
		}
		return haxe_ds_Option.Some(res);
	}
};
thx_Nel.map = function(this1,f) {
	var fb = f;
	return thx_Nel.flatMap(this1,function(v) {
		return thx_Nel.pure(fb(v));
	});
};
thx_Nel.flatMap = function(this1,f) {
	switch(this1._hx_index) {
	case 0:
		var x = this1.x;
		return f(x);
	case 1:
		var xs = this1.xs;
		var x = this1.x;
		return thx_Nel.append(f(x),thx_Nel.flatMap(xs,f));
	}
};
thx_Nel.fold = function(this1,f) {
	switch(this1._hx_index) {
	case 0:
		var x = this1.x;
		return x;
	case 1:
		var xs = this1.xs;
		var x = this1.x;
		return f(x,thx_Nel.fold(xs,f));
	}
};
thx_Nel.append = function(this1,nel) {
	switch(this1._hx_index) {
	case 0:
		var x = this1.x;
		return thx_NonEmptyList.ConsNel(x,nel);
	case 1:
		var xs = this1.xs;
		var x = this1.x;
		return thx_NonEmptyList.ConsNel(x,thx_Nel.append(xs,nel));
	}
};
thx_Nel.concat = function(this1,xs) {
	var _g = thx_Nel.fromArray(xs);
	switch(_g._hx_index) {
	case 0:
		var other = _g.v;
		return thx_Nel.append(this1,other);
	case 1:
		return this1;
	}
};
thx_Nel.head = function(this1) {
	switch(this1._hx_index) {
	case 0:
		var x = this1.x;
		return x;
	case 1:
		var xs = this1.xs;
		var x = this1.x;
		return x;
	}
};
thx_Nel.tail = function(this1) {
	switch(this1._hx_index) {
	case 0:
		var x = this1.x;
		return [];
	case 1:
		var xs = this1.xs;
		var x = this1.x;
		return thx_Nel.toArray(xs);
	}
};
thx_Nel.init = function(this1) {
	switch(this1._hx_index) {
	case 0:
		var x = this1.x;
		return [];
	case 1:
		var xs = this1.xs;
		var x = this1.x;
		return [x].concat(thx_Nel.init(xs));
	}
};
thx_Nel.last = function(this1) {
	switch(this1._hx_index) {
	case 0:
		var x = this1.x;
		return x;
	case 1:
		var xs = this1.xs;
		var x = this1.x;
		return thx_Nel.last(xs);
	}
};
thx_Nel.push = function(this1,a) {
	return thx_Nel.append(this1,thx_NonEmptyList.Single(a));
};
thx_Nel.pop = function(this1) {
	var this2 = { _0 : thx_Nel.last(this1), _1 : thx_Nel.init(this1)};
	return this2;
};
thx_Nel.unshift = function(this1,a) {
	return thx_NonEmptyList.ConsNel(a,this1);
};
thx_Nel.shift = function(this1) {
	var this2 = { _0 : thx_Nel.head(this1), _1 : thx_Nel.tail(this1)};
	return this2;
};
thx_Nel.toArray = function(this1) {
	var go = null;
	go = function(acc,xs) {
		switch(xs._hx_index) {
		case 0:
			var x = xs.x;
			return thx_Arrays.append(acc,x);
		case 1:
			var xs1 = xs.xs;
			var x = xs.x;
			return go(thx_Arrays.append(acc,x),xs1);
		}
	};
	return go([],this1);
};
thx_Nel.intersperse = function(this1,a) {
	switch(this1._hx_index) {
	case 0:
		var x = this1.x;
		return thx_NonEmptyList.Single(x);
	case 1:
		var xs = this1.xs;
		var x = this1.x;
		return thx_NonEmptyList.ConsNel(x,thx_NonEmptyList.ConsNel(a,thx_Nel.intersperse(xs,a)));
	}
};
thx_Nel.semigroup = function() {
	return function(nl,nr) {
		return thx_Nel.append(nl,nr);
	};
};
var thx_NonEmptyList = $hxEnums["thx.NonEmptyList"] = { __ename__ : "thx.NonEmptyList", __constructs__ : ["Single","ConsNel"]
	,Single: ($_=function(x) { return {_hx_index:0,x:x,__enum__:"thx.NonEmptyList",toString:$estr}; },$_.__params__ = ["x"],$_)
	,ConsNel: ($_=function(x,xs) { return {_hx_index:1,x:x,xs:xs,__enum__:"thx.NonEmptyList",toString:$estr}; },$_.__params__ = ["x","xs"],$_)
};
var thx_Nil = $hxEnums["thx.Nil"] = { __ename__ : "thx.Nil", __constructs__ : ["nil"]
	,nil: {_hx_index:0,__enum__:"thx.Nil",toString:$estr}
};
var thx_Objects = function() { };
thx_Objects.__name__ = "thx.Objects";
thx_Objects.compare = function(a,b) {
	var fields = Reflect.fields(a);
	var v = thx_Arrays.compare(fields,Reflect.fields(b));
	if(v != 0) {
		return v;
	}
	var _g = 0;
	while(_g < fields.length) {
		var field = fields[_g];
		++_g;
		v = thx_Dynamics.compare(Reflect.field(a,field),Reflect.field(b,field));
		if(v != 0) {
			return v;
		}
	}
	return 0;
};
thx_Objects.isEmpty = function(o) {
	return Reflect.fields(o).length == 0;
};
thx_Objects.exists = function(o,name) {
	return Object.prototype.hasOwnProperty.call(o,name);
};
thx_Objects.fields = function(o) {
	return Reflect.fields(o);
};
thx_Objects.deflate = function(o,flattenArrays) {
	if(flattenArrays == null) {
		flattenArrays = true;
	}
	var f = null;
	f = function(v) {
		if(((v) instanceof Array)) {
			if(flattenArrays) {
				if(v.length == 0) {
					return thx_Either.Left([]);
				} else {
					var a = v;
					return thx_Either.Right(thx_Arrays.reducei(a,function(map,value,i) {
						var _g = f(value);
						switch(_g._hx_index) {
						case 0:
							var v = _g.value;
							map.h["" + i] = v;
							break;
						case 1:
							var m = _g.value;
							var k = haxe_ds_StringMap.keysIterator(m.h);
							while(k.hasNext()) {
								var k1 = k.next();
								map.h["" + i + "." + k1] = m.h[k1];
							}
							break;
						}
						return map;
					},new haxe_ds_StringMap()));
				}
			} else {
				return thx_Either.Left(v);
			}
		} else if(Reflect.isObject(v) && null == js_Boot.getClass(v)) {
			return thx_Either.Right(thx_Arrays.reduce(Reflect.fields(v),function(map,key) {
				var _g = f(Reflect.field(v,key));
				switch(_g._hx_index) {
				case 0:
					var v1 = _g.value;
					map.h["" + key] = v1;
					break;
				case 1:
					var m = _g.value;
					if(!haxe_ds_StringMap.valueIterator(m.h).hasNext()) {
						map.h["" + key] = { };
					} else {
						var k = haxe_ds_StringMap.keysIterator(m.h);
						while(k.hasNext()) {
							var k1 = k.next();
							map.h["" + key + "." + k1] = m.h[k1];
						}
					}
					break;
				}
				return map;
			},new haxe_ds_StringMap()));
		} else {
			return thx_Either.Left(v);
		}
	};
	var _g = f(o);
	switch(_g._hx_index) {
	case 0:
		var v = _g.value;
		return v;
	case 1:
		var m = _g.value;
		return thx_Maps.toObject(m);
	}
};
thx_Objects.inflate = function(o) {
	return thx_Arrays.reduce(Reflect.fields(o),function(acc,field) {
		return thx_Objects.setPath(acc,field,Reflect.field(o,field));
	},{ });
};
thx_Objects.combine = function(first,second) {
	return thx_Objects.shallowCombine(first,second);
};
thx_Objects.shallowCombine = function(first,second) {
	var to = { };
	var _g = 0;
	var _g1 = Reflect.fields(first);
	while(_g < _g1.length) {
		var field = _g1[_g];
		++_g;
		to[field] = Reflect.field(first,field);
	}
	var _g = 0;
	var _g1 = Reflect.fields(second);
	while(_g < _g1.length) {
		var field = _g1[_g];
		++_g;
		to[field] = Reflect.field(second,field);
	}
	return to;
};
thx_Objects.deepCombine = function(first,second) {
	return thx_Objects.copyTo(second,first,true);
};
thx_Objects.assign = function(to,from,replacef) {
	if(null == replacef) {
		replacef = function(field,oldv,newv) {
			return newv;
		};
	}
	var _g = 0;
	var _g1 = Reflect.fields(from);
	while(_g < _g1.length) {
		var field = _g1[_g];
		++_g;
		var newv = Reflect.field(from,field);
		if(Object.prototype.hasOwnProperty.call(to,field)) {
			to[field] = replacef(field,Reflect.field(to,field),newv);
		} else {
			to[field] = newv;
		}
	}
	return to;
};
thx_Objects.copyTo = function(src,dst,cloneInstances) {
	if(cloneInstances == null) {
		cloneInstances = false;
	}
	var _g = 0;
	var _g1 = Reflect.fields(src);
	while(_g < _g1.length) {
		var field = _g1[_g];
		++_g;
		var sv = thx_Dynamics.clone(Reflect.field(src,field),cloneInstances);
		var dv = Reflect.field(dst,field);
		var tmp;
		var v = sv;
		if(Reflect.isObject(v) && null == js_Boot.getClass(v)) {
			var v1 = dv;
			tmp = Reflect.isObject(v1) && null == js_Boot.getClass(v1);
		} else {
			tmp = false;
		}
		if(tmp) {
			thx_Objects.copyTo(sv,dv);
		} else {
			dst[field] = sv;
		}
	}
	return dst;
};
thx_Objects.clone = function(src,cloneInstances) {
	if(cloneInstances == null) {
		cloneInstances = false;
	}
	return thx_Dynamics.clone(src,cloneInstances);
};
thx_Objects.toMap = function(o) {
	return thx_Arrays.reduce(thx_Objects.tuples(o),function(map,t) {
		map.h[t._0] = t._1;
		return map;
	},new haxe_ds_StringMap());
};
thx_Objects.size = function(o) {
	return Reflect.fields(o).length;
};
thx_Objects.string = function(o) {
	var _this = Reflect.fields(o);
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		var key = _this[i];
		var v = Reflect.field(o,key);
		var s = typeof(v) == "string" ? thx_Strings.quote(v) : thx_Dynamics.string(v);
		result[i] = "" + key + " : " + s;
	}
	return "{" + result.join(", ") + "}";
};
thx_Objects.stringImpl = function(o,cache) {
};
thx_Objects.values = function(o) {
	var _this = Reflect.fields(o);
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = Reflect.field(o,_this[i]);
	}
	return result;
};
thx_Objects.tuples = function(o) {
	var _this = Reflect.fields(o);
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		var key = _this[i];
		var this1 = { _0 : key, _1 : Reflect.field(o,key)};
		result[i] = this1;
	}
	return result;
};
thx_Objects.hasPath = function(o,path) {
	var _this_r = new RegExp("\\[(\\d+)\\]","g".split("u").join(""));
	path = path.replace(_this_r,".$1");
	var paths = path.split(".");
	var current = o;
	var _g = 0;
	while(_g < paths.length) {
		var currentPath = paths[_g];
		++_g;
		if(thx_Strings.DIGITS.match(currentPath)) {
			var index = Std.parseInt(currentPath);
			var value = current;
			var arr = ((value) instanceof Array) ? value : null;
			if(null == arr || arr.length <= index) {
				return false;
			}
			current = arr[index];
		} else if(Object.prototype.hasOwnProperty.call(current,currentPath)) {
			current = Reflect.field(current,currentPath);
		} else {
			return false;
		}
	}
	return true;
};
thx_Objects.hasPathValue = function(o,path) {
	return thx_Objects.getPath(o,path) != null;
};
thx_Objects.getPath = function(o,path) {
	var _this_r = new RegExp("\\[(\\d+)\\]","g".split("u").join(""));
	path = path.replace(_this_r,".$1");
	var paths = path.split(".");
	var current = o;
	var _g = 0;
	while(_g < paths.length) {
		var currentPath = paths[_g];
		++_g;
		if(current == null) {
			return null;
		} else if(thx_Strings.DIGITS.match(currentPath)) {
			var index = Std.parseInt(currentPath);
			var value = current;
			var arr = ((value) instanceof Array) ? value : null;
			if(null == arr) {
				return null;
			}
			current = arr[index];
		} else if(Object.prototype.hasOwnProperty.call(current,currentPath)) {
			current = Reflect.field(current,currentPath);
		} else {
			return null;
		}
	}
	return current;
};
thx_Objects.getPathOption = function(o,path) {
	var value = thx_Objects.getPath(o,path);
	if(null == value) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(value);
	}
};
thx_Objects.parsePath = function(o,path,parse) {
	var this1 = thx_Options.toSuccessNel(thx_Objects.getPathOption(o,path),"Object does not contain path " + path);
	switch(this1._hx_index) {
	case 0:
		var a = this1.value;
		return thx_Either.Left(a);
	case 1:
		var b = this1.value;
		return parse(b);
	}
};
thx_Objects.getPathOr = function(o,path,alt) {
	return thx_Options.getOrElse(thx_Objects.getPathOption(o,path),alt);
};
thx_Objects.setPath = function(o,path,val) {
	var _this_r = new RegExp("\\[(\\d+)\\]","g".split("u").join(""));
	path = path.replace(_this_r,".$1");
	var paths = path.split(".");
	var current = o;
	var _g = 0;
	var _g1 = paths.length - 1;
	while(_g < _g1) {
		var i = _g++;
		var currentPath = paths[i];
		var nextPath = paths[i + 1];
		if(thx_Strings.DIGITS.match(currentPath) || currentPath == "*") {
			var index = currentPath == "*" ? current.length : Std.parseInt(currentPath);
			if(current[index] == null) {
				if(thx_Strings.DIGITS.match(nextPath) || nextPath == "*") {
					current[index] = [];
				} else {
					current[index] = { };
				}
			}
			current = current[index];
		} else {
			if(!Object.prototype.hasOwnProperty.call(current,currentPath)) {
				if(thx_Strings.DIGITS.match(nextPath) || nextPath == "*") {
					current[currentPath] = [];
				} else {
					current[currentPath] = { };
				}
			}
			current = Reflect.field(current,currentPath);
		}
	}
	var p = paths[paths.length - 1];
	if(thx_Strings.DIGITS.match(p)) {
		var index = Std.parseInt(p);
		current[index] = val;
	} else if(p == "*") {
		current.push(val);
	} else {
		current[p] = val;
	}
	return o;
};
thx_Objects.removePath = function(o,path) {
	var _this_r = new RegExp("\\[(\\d+)\\]","g".split("u").join(""));
	path = path.replace(_this_r,".$1");
	var paths = path.split(".");
	var target = paths.pop();
	try {
		var sub = thx_Arrays.reduce(paths,function(existing,nextPath) {
			if(nextPath == "*") {
				return existing.pop();
			} else if(thx_Strings.DIGITS.match(nextPath)) {
				var current = existing;
				var index = Std.parseInt(nextPath);
				return current[index];
			} else {
				return Reflect.field(existing,nextPath);
			}
		},o);
		if(null != sub) {
			Reflect.deleteField(sub,target);
		}
	} catch( _g ) {
	}
	return o;
};
thx_Objects.normalizePath = function(path) {
	var _this_r = new RegExp("\\[(\\d+)\\]","g".split("u").join(""));
	return path.replace(_this_r,".$1");
};
var thx_Options = function() { };
thx_Options.__name__ = "thx.Options";
thx_Options.ofValue = function(value) {
	if(null == value) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(value);
	}
};
thx_Options.maybe = function(value) {
	if(null == value) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(value);
	}
};
thx_Options.equals = function(a,b,eq) {
	switch(a._hx_index) {
	case 0:
		if(b._hx_index == 0) {
			var a1 = a.v;
			var b1 = b.v;
			if(null == eq) {
				eq = function(a,b) {
					return a == b;
				};
			}
			return eq(a1,b1);
		} else {
			return false;
		}
		break;
	case 1:
		if(b._hx_index == 1) {
			return true;
		} else {
			return false;
		}
		break;
	}
};
thx_Options.equalsValue = function(a,b,eq) {
	return thx_Options.equals(a,null == b ? haxe_ds_Option.None : haxe_ds_Option.Some(b),eq);
};
thx_Options.map = function(option,callback) {
	switch(option._hx_index) {
	case 0:
		var v = option.v;
		return haxe_ds_Option.Some(callback(v));
	case 1:
		return haxe_ds_Option.None;
	}
};
thx_Options.ap = function(option,fopt) {
	switch(option._hx_index) {
	case 0:
		var v = option.v;
		return thx_Options.map(fopt,function(f) {
			return f(v);
		});
	case 1:
		return haxe_ds_Option.None;
	}
};
thx_Options.flatMap = function(option,callback) {
	switch(option._hx_index) {
	case 0:
		var v = option.v;
		return callback(v);
	case 1:
		return haxe_ds_Option.None;
	}
};
thx_Options.join = function(option) {
	switch(option._hx_index) {
	case 0:
		var v = option.v;
		return v;
	case 1:
		return haxe_ds_Option.None;
	}
};
thx_Options.cata = function(option,ifNone,f) {
	switch(option._hx_index) {
	case 0:
		var v = option.v;
		return f(v);
	case 1:
		return ifNone;
	}
};
thx_Options.cataf = function(option,ifNone,f) {
	switch(option._hx_index) {
	case 0:
		var v = option.v;
		return f(v);
	case 1:
		return ifNone();
	}
};
thx_Options.foldLeft = function(option,b,f) {
	switch(option._hx_index) {
	case 0:
		var v = option.v;
		return f(b,v);
	case 1:
		return b;
	}
};
thx_Options.foldLeftf = function(option,b,f) {
	switch(option._hx_index) {
	case 0:
		var v = option.v;
		return f(b(),v);
	case 1:
		return b();
	}
};
thx_Options.foldMap = function(option,f,m) {
	var _e = m;
	var tmp = function(a0,a1) {
		return thx_Monoid.append(_e,a0,a1);
	};
	return thx_Options.foldLeft(thx_Options.map(option,f),thx_Monoid.get_zero(m),tmp);
};
thx_Options.filter = function(option,f) {
	if(option._hx_index == 0) {
		var v = option.v;
		if(f(v)) {
			return option;
		} else {
			return haxe_ds_Option.None;
		}
	} else {
		return haxe_ds_Option.None;
	}
};
thx_Options.toArray = function(option) {
	switch(option._hx_index) {
	case 0:
		var v = option.v;
		return [v];
	case 1:
		return [];
	}
};
thx_Options.toBool = function(option) {
	switch(option._hx_index) {
	case 0:
		var _g = option.v;
		return true;
	case 1:
		return false;
	}
};
thx_Options.isNone = function(option) {
	return !thx_Options.toBool(option);
};
thx_Options.toOption = function(value) {
	if(null == value) {
		return haxe_ds_Option.None;
	} else {
		return haxe_ds_Option.Some(value);
	}
};
thx_Options.get = function(option) {
	switch(option._hx_index) {
	case 0:
		var v = option.v;
		return v;
	case 1:
		return null;
	}
};
thx_Options.getOrElse = function(option,alt) {
	switch(option._hx_index) {
	case 0:
		var v = option.v;
		return v;
	case 1:
		return alt;
	}
};
thx_Options.getOrElseF = function(option,alt) {
	switch(option._hx_index) {
	case 0:
		var v = option.v;
		return v;
	case 1:
		return alt();
	}
};
thx_Options.getOrThrow = function(option,err,posInfo) {
	if(null == err) {
		err = new thx_Error("Could not extract value from option",null,posInfo);
	}
	switch(option._hx_index) {
	case 0:
		var v = option.v;
		return v;
	case 1:
		throw err;
	}
};
thx_Options.getOrFail = function(option,msg,posInfo) {
	return thx_Options.getOrThrow(option,new thx_Error(msg,null,posInfo),{ fileName : "thx/Options.hx", lineNumber : 208, className : "thx.Options", methodName : "getOrFail"});
};
thx_Options.orElse = function(option,alt) {
	switch(option._hx_index) {
	case 0:
		var _g = option.v;
		return option;
	case 1:
		return alt;
	}
};
thx_Options.orElseF = function(option,alt) {
	switch(option._hx_index) {
	case 0:
		var _g = option.v;
		return option;
	case 1:
		return alt();
	}
};
thx_Options.all = function(option,f) {
	switch(option._hx_index) {
	case 0:
		var v = option.v;
		return f(v);
	case 1:
		return true;
	}
};
thx_Options.any = function(option,f) {
	switch(option._hx_index) {
	case 0:
		var v = option.v;
		return f(v);
	case 1:
		return false;
	}
};
thx_Options.traverseValidation = function(option,f) {
	switch(option._hx_index) {
	case 0:
		var v = option.v;
		return thx_Validation.map(f(v),function(v) {
			return haxe_ds_Option.Some(v);
		});
	case 1:
		return thx_Either.Right(haxe_ds_Option.None);
	}
};
thx_Options.toSuccess = function(option,error) {
	switch(option._hx_index) {
	case 0:
		var v = option.v;
		return thx_Either.Right(v);
	case 1:
		return thx_Either.Left(error);
	}
};
thx_Options.toLazySuccess = function(option,error) {
	switch(option._hx_index) {
	case 0:
		var v = option.v;
		return thx_Either.Right(v);
	case 1:
		return thx_Either.Left(error());
	}
};
thx_Options.toSuccessNel = function(option,error) {
	switch(option._hx_index) {
	case 0:
		var v = option.v;
		return thx_Either.Right(v);
	case 1:
		return thx_Either.Left(thx_Nel.pure(error));
	}
};
thx_Options.toLazySuccessNel = function(option,error) {
	switch(option._hx_index) {
	case 0:
		var v = option.v;
		return thx_Either.Right(v);
	case 1:
		return thx_Either.Left(thx_Nel.pure(error()));
	}
};
thx_Options.toFailure = function(error,value) {
	switch(error._hx_index) {
	case 0:
		var e = error.v;
		return thx_Either.Left(e);
	case 1:
		return thx_Either.Right(value);
	}
};
thx_Options.toFailureNel = function(error,value) {
	switch(error._hx_index) {
	case 0:
		var e = error.v;
		return thx_Either.Left(thx_Nel.pure(e));
	case 1:
		return thx_Either.Right(value);
	}
};
thx_Options.toRight = function(opt,left) {
	switch(opt._hx_index) {
	case 0:
		var r = opt.v;
		return thx_Either.Right(r);
	case 1:
		return thx_Either.Left(left);
	}
};
thx_Options.toLazyRight = function(opt,left) {
	switch(opt._hx_index) {
	case 0:
		var r = opt.v;
		return thx_Either.Right(r);
	case 1:
		return thx_Either.Left(left());
	}
};
thx_Options.toLeft = function(opt,right) {
	switch(opt._hx_index) {
	case 0:
		var l = opt.v;
		return thx_Either.Left(l);
	case 1:
		return thx_Either.Right(right);
	}
};
thx_Options.each = function(o,f) {
	switch(o._hx_index) {
	case 0:
		var v = o.v;
		f(v);
		return o;
	case 1:
		return o;
	}
};
thx_Options.alt2 = function(a,b) {
	if(a._hx_index == 1) {
		var r = b;
		return r;
	} else {
		var l = a;
		return l;
	}
};
thx_Options.alt3 = function(a,b,c) {
	var a1;
	if(a._hx_index == 1) {
		var r = b;
		a1 = r;
	} else {
		var l = a;
		a1 = l;
	}
	if(a1._hx_index == 1) {
		var r = c;
		return r;
	} else {
		var l = a1;
		return l;
	}
};
thx_Options.alt4 = function(a,b,c,d) {
	var a1;
	if(a._hx_index == 1) {
		var r = b;
		a1 = r;
	} else {
		var l = a;
		a1 = l;
	}
	var a;
	if(a1._hx_index == 1) {
		var r = c;
		a = r;
	} else {
		var l = a1;
		a = l;
	}
	if(a._hx_index == 1) {
		var r = d;
		return r;
	} else {
		var l = a;
		return l;
	}
};
thx_Options.alts = function(as) {
	return thx_Arrays.reduce(as,thx_Options.alt2,haxe_ds_Option.None);
};
thx_Options.altsF = function(fs) {
	return thx_Arrays.reduce(fs,thx_Options.orElseF,haxe_ds_Option.None);
};
thx_Options.ap2 = function(f,v1,v2) {
	return thx_Options.ap(v2,thx_Options.map(v1,thx_Functions2.curry(f)));
};
thx_Options.ap3 = function(f,v1,v2,v3) {
	var f1 = f;
	return thx_Options.ap(v3,thx_Options.ap(v2,thx_Options.map(v1,thx_Functions2.curry(function(a,b) {
		return function(c) {
			return f1(a,b,c);
		};
	}))));
};
thx_Options.ap4 = function(f,v1,v2,v3,v4) {
	var f1 = f;
	var f = function(a,b,c) {
		return function(d) {
			return f1(a,b,c,d);
		};
	};
	return thx_Options.ap(v4,thx_Options.ap(v3,thx_Options.ap(v2,thx_Options.map(v1,thx_Functions2.curry(function(a,b) {
		return function(c) {
			return f(a,b,c);
		};
	})))));
};
thx_Options.ap5 = function(f,v1,v2,v3,v4,v5) {
	var f1 = f;
	var f = function(a,b,c,d) {
		return function(e) {
			return f1(a,b,c,d,e);
		};
	};
	var f2 = function(a,b,c) {
		return function(d) {
			return f(a,b,c,d);
		};
	};
	return thx_Options.ap(v5,thx_Options.ap(v4,thx_Options.ap(v3,thx_Options.ap(v2,thx_Options.map(v1,thx_Functions2.curry(function(a,b) {
		return function(c) {
			return f2(a,b,c);
		};
	}))))));
};
thx_Options.ap6 = function(f,v1,v2,v3,v4,v5,v6) {
	var f1 = f;
	var f = function(a,b,c,d,e) {
		return function(f0) {
			return f1(a,b,c,d,e,f0);
		};
	};
	var f2 = function(a,b,c,d) {
		return function(e) {
			return f(a,b,c,d,e);
		};
	};
	var f3 = function(a,b,c) {
		return function(d) {
			return f2(a,b,c,d);
		};
	};
	return thx_Options.ap(v6,thx_Options.ap(v5,thx_Options.ap(v4,thx_Options.ap(v3,thx_Options.ap(v2,thx_Options.map(v1,thx_Functions2.curry(function(a,b) {
		return function(c) {
			return f3(a,b,c);
		};
	})))))));
};
thx_Options.ap7 = function(f,v1,v2,v3,v4,v5,v6,v7) {
	var f1 = f;
	var f = function(a,b,c,d,e,f0) {
		return function(g) {
			return f1(a,b,c,d,e,f0,g);
		};
	};
	var f2 = function(a,b,c,d,e) {
		return function(f0) {
			return f(a,b,c,d,e,f0);
		};
	};
	var f3 = function(a,b,c,d) {
		return function(e) {
			return f2(a,b,c,d,e);
		};
	};
	var f4 = function(a,b,c) {
		return function(d) {
			return f3(a,b,c,d);
		};
	};
	return thx_Options.ap(v7,thx_Options.ap(v6,thx_Options.ap(v5,thx_Options.ap(v4,thx_Options.ap(v3,thx_Options.ap(v2,thx_Options.map(v1,thx_Functions2.curry(function(a,b) {
		return function(c) {
			return f4(a,b,c);
		};
	}))))))));
};
thx_Options.ap8 = function(f,v1,v2,v3,v4,v5,v6,v7,v8) {
	var f1 = f;
	var f = function(a,b,c,d,e,f0,g) {
		return function(h) {
			return f1(a,b,c,d,e,f0,g,h);
		};
	};
	var f2 = function(a,b,c,d,e,f0) {
		return function(g) {
			return f(a,b,c,d,e,f0,g);
		};
	};
	var f3 = function(a,b,c,d,e) {
		return function(f0) {
			return f2(a,b,c,d,e,f0);
		};
	};
	var f4 = function(a,b,c,d) {
		return function(e) {
			return f3(a,b,c,d,e);
		};
	};
	var f5 = function(a,b,c) {
		return function(d) {
			return f4(a,b,c,d);
		};
	};
	return thx_Options.ap(v8,thx_Options.ap(v7,thx_Options.ap(v6,thx_Options.ap(v5,thx_Options.ap(v4,thx_Options.ap(v3,thx_Options.ap(v2,thx_Options.map(v1,thx_Functions2.curry(function(a,b) {
		return function(c) {
			return f5(a,b,c);
		};
	})))))))));
};
thx_Options.combine = function(a,b) {
	return thx_Options.ap(b,thx_Options.map(a,thx_Functions2.curry(thx_Tuple2.of)));
};
thx_Options.combine2 = function(a,b) {
	return thx_Options.ap(b,thx_Options.map(a,thx_Functions2.curry(thx_Tuple2.of)));
};
thx_Options.combine3 = function(a,b,c) {
	var f = thx_Tuple3.of;
	return thx_Options.ap(c,thx_Options.ap(b,thx_Options.map(a,thx_Functions2.curry(function(a,b) {
		return function(c) {
			return f(a,b,c);
		};
	}))));
};
thx_Options.combine4 = function(a,b,c,d) {
	var f = thx_Tuple4.of;
	var f1 = function(a,b,c) {
		return function(d) {
			return f(a,b,c,d);
		};
	};
	return thx_Options.ap(d,thx_Options.ap(c,thx_Options.ap(b,thx_Options.map(a,thx_Functions2.curry(function(a,b) {
		return function(c) {
			return f1(a,b,c);
		};
	})))));
};
thx_Options.combine5 = function(a,b,c,d,e) {
	var f = thx_Tuple5.of;
	var f1 = function(a,b,c,d) {
		return function(e) {
			return f(a,b,c,d,e);
		};
	};
	var f2 = function(a,b,c) {
		return function(d) {
			return f1(a,b,c,d);
		};
	};
	return thx_Options.ap(e,thx_Options.ap(d,thx_Options.ap(c,thx_Options.ap(b,thx_Options.map(a,thx_Functions2.curry(function(a,b) {
		return function(c) {
			return f2(a,b,c);
		};
	}))))));
};
thx_Options.combine6 = function(a,b,c,d,e,f) {
	var f1 = thx_Tuple6.of;
	var f2 = function(a,b,c,d,e) {
		return function(f0) {
			return f1(a,b,c,d,e,f0);
		};
	};
	var f3 = function(a,b,c,d) {
		return function(e) {
			return f2(a,b,c,d,e);
		};
	};
	var f4 = function(a,b,c) {
		return function(d) {
			return f3(a,b,c,d);
		};
	};
	return thx_Options.ap(f,thx_Options.ap(e,thx_Options.ap(d,thx_Options.ap(c,thx_Options.ap(b,thx_Options.map(a,thx_Functions2.curry(function(a,b) {
		return function(c) {
			return f4(a,b,c);
		};
	})))))));
};
thx_Options.spread2 = function(v,f) {
	return thx_Options.map(v,function(t) {
		return f(t._0,t._1);
	});
};
thx_Options.spread = function(v,f) {
	var f1 = f;
	return thx_Options.map(v,function(t) {
		return f1(t._0,t._1);
	});
};
thx_Options.spread3 = function(v,f) {
	return thx_Options.map(v,function(t) {
		return f(t._0,t._1,t._2);
	});
};
thx_Options.spread4 = function(v,f) {
	return thx_Options.map(v,function(t) {
		return f(t._0,t._1,t._2,t._3);
	});
};
thx_Options.spread5 = function(v,f) {
	return thx_Options.map(v,function(t) {
		return f(t._0,t._1,t._2,t._3,t._4);
	});
};
thx_Options.spread6 = function(v,f) {
	return thx_Options.map(v,function(t) {
		return f(t._0,t._1,t._2,t._3,t._4,t._5);
	});
};
var thx_Orderings = function() { };
thx_Orderings.__name__ = "thx.Orderings";
thx_Orderings.negate = function(o) {
	switch(o._hx_index) {
	case 0:
		return thx_OrderingImpl.GT;
	case 1:
		return thx_OrderingImpl.LT;
	case 2:
		return thx_OrderingImpl.EQ;
	}
};
var thx_ReadonlyArray = {};
thx_ReadonlyArray.empty = function() {
	return [];
};
thx_ReadonlyArray.flatten = function(array) {
	return Array.prototype.concat.apply([],array);
};
thx_ReadonlyArray.indexOf = function(this1,el,eq) {
	if(null == eq) {
		eq = thx_Functions.equality;
	}
	var _g = 0;
	var _g1 = this1.length;
	while(_g < _g1) {
		var i = _g++;
		if(eq(el,this1[i])) {
			return i;
		}
	}
	return -1;
};
thx_ReadonlyArray.lastIndexOf = function(this1,el,eq) {
	if(null == eq) {
		eq = thx_Functions.equality;
	}
	var len = this1.length;
	var _g = 0;
	var _g1 = len;
	while(_g < _g1) {
		var i = _g++;
		if(eq(el,this1[len - i - 1])) {
			return i;
		}
	}
	return -1;
};
thx_ReadonlyArray.get_length = function(this1) {
	return this1.length;
};
thx_ReadonlyArray.get = function(this1,i) {
	return this1[i];
};
thx_ReadonlyArray.head = function(this1) {
	return this1[0];
};
thx_ReadonlyArray.tail = function(this1) {
	return this1.slice(1);
};
thx_ReadonlyArray.reduce = function(this1,f,initial) {
	var _g = 0;
	while(_g < this1.length) {
		var v = this1[_g];
		++_g;
		initial = f(initial,v);
	}
	return initial;
};
thx_ReadonlyArray.reducei = function(this1,f,initial) {
	var _g = 0;
	var _g1 = this1.length;
	while(_g < _g1) {
		var i = _g++;
		initial = f(initial,this1[i],i);
	}
	return initial;
};
thx_ReadonlyArray.reverse = function(this1) {
	var arr = this1.slice();
	arr.reverse();
	return arr;
};
thx_ReadonlyArray.toArray = function(this1) {
	return this1.slice();
};
thx_ReadonlyArray.unsafe = function(this1) {
	return this1;
};
thx_ReadonlyArray.concat = function(this1,that) {
	return this1.concat(that);
};
thx_ReadonlyArray.insertAt = function(this1,pos,el) {
	return this1.slice(0,pos).concat([el]).concat(this1.slice(pos));
};
thx_ReadonlyArray.insertAfter = function(this1,ref,el,eq) {
	var pos = thx_ReadonlyArray.indexOf(this1,ref,eq);
	if(pos < 0) {
		pos = this1.length - 1;
	}
	var pos1 = pos + 1;
	return this1.slice(0,pos1).concat([el]).concat(this1.slice(pos1));
};
thx_ReadonlyArray.insertBefore = function(this1,ref,el,eq) {
	var pos = thx_ReadonlyArray.indexOf(this1,ref,eq);
	return this1.slice(0,pos).concat([el]).concat(this1.slice(pos));
};
thx_ReadonlyArray.replace = function(this1,ref,el,eq) {
	var pos = thx_ReadonlyArray.indexOf(this1,ref,eq);
	if(pos < 0) {
		throw new thx_Error("unable to find reference element",null,{ fileName : "thx/ReadonlyArray.hx", lineNumber : 94, className : "thx._ReadonlyArray.ReadonlyArray_Impl_", methodName : "replace"});
	}
	return this1.slice(0,pos).concat([el]).concat(this1.slice(pos + 1));
};
thx_ReadonlyArray.replaceAt = function(this1,pos,el) {
	return this1.slice(0,pos).concat([el]).concat(this1.slice(pos + 1));
};
thx_ReadonlyArray.remove = function(this1,el,eq) {
	var pos = thx_ReadonlyArray.indexOf(this1,el,eq);
	return this1.slice(0,pos).concat(this1.slice(pos + 1));
};
thx_ReadonlyArray.removeAt = function(this1,pos) {
	return this1.slice(0,pos).concat(this1.slice(pos + 1));
};
thx_ReadonlyArray.prepend = function(this1,el) {
	return [el].concat(this1);
};
thx_ReadonlyArray.append = function(this1,el) {
	return this1.concat([el]);
};
thx_ReadonlyArray.unshift = function(this1,el) {
	return [el].concat(this1);
};
thx_ReadonlyArray.shift = function(this1) {
	if(this1.length == 0) {
		var this2 = { _0 : null, _1 : this1};
		return this2;
	}
	var value = this1[0];
	var array = this1.slice(0,0).concat(this1.slice(1));
	var this1 = { _0 : value, _1 : array};
	return this1;
};
thx_ReadonlyArray.push = function(this1,el) {
	return this1.concat([el]);
};
thx_ReadonlyArray.pop = function(this1) {
	if(this1.length == 0) {
		var this2 = { _0 : null, _1 : this1};
		return this2;
	}
	var value = this1[this1.length - 1];
	var pos = this1.length - 1;
	var array = this1.slice(0,pos).concat(this1.slice(pos + 1));
	var this1 = { _0 : value, _1 : array};
	return this1;
};
thx_ReadonlyArray.iterator = function(this1) {
	return new haxe_iterators_ArrayIterator(this1);
};
var thx_Semigroup = {};
thx_Semigroup.get_append = function(this1) {
	return this1;
};
var thx_Set = {};
thx_Set.createString = function(it) {
	var map = new haxe_ds_StringMap();
	var this1 = map;
	var set = this1;
	if(null != it) {
		thx_Set.pushMany(set,it);
	}
	return set;
};
thx_Set.createInt = function(it) {
	var map = new haxe_ds_IntMap();
	var this1 = map;
	var set = this1;
	if(null != it) {
		thx_Set.pushMany(set,it);
	}
	return set;
};
thx_Set.createObject = function(it) {
	var map = new haxe_ds_ObjectMap();
	var this1 = map;
	var set = this1;
	if(null != it) {
		thx_Set.pushMany(set,it);
	}
	return set;
};
thx_Set.createEnum = function(arr) {
	var map = new haxe_ds_EnumValueMap();
	var this1 = map;
	var set = this1;
	if(null != arr) {
		thx_Set.pushMany(set,arr);
	}
	return set;
};
thx_Set._new = function(map) {
	var this1 = map;
	return this1;
};
thx_Set.add = function(this1,v) {
	if(this1.exists(v)) {
		return false;
	} else {
		this1.set(v,true);
		return true;
	}
};
thx_Set.copy = function(this1) {
	var inst = thx_Set.empty(this1);
	var k = this1.keys();
	while(k.hasNext()) {
		var k1 = k.next();
		inst.set(k1,true);
	}
	return inst;
};
thx_Set.empty = function(this1) {
	var inst = Type.createInstance(js_Boot.getClass(this1),[]);
	var this1 = inst;
	return this1;
};
thx_Set.difference = function(this1,set) {
	var result = thx_Set.copy(this1);
	var item = $iterator(thx_Set)(set);
	while(item.hasNext()) {
		var item1 = item.next();
		result.remove(item1);
	}
	return result;
};
thx_Set.filter = function(this1,predicate) {
	return thx_Set.reduce(this1,function(acc,v) {
		if(predicate(v)) {
			thx_Set.add(acc,v);
		}
		return acc;
	},thx_Set.empty(this1));
};
thx_Set.map = function(this1,f) {
	return thx_Set.reduce(this1,function(acc,v) {
		acc.push(f(v));
		return acc;
	},[]);
};
thx_Set.exists = function(this1,v) {
	return this1.exists(v);
};
thx_Set.remove = function(this1,v) {
	return this1.remove(v);
};
thx_Set.intersection = function(this1,set) {
	var result = thx_Set.empty(this1);
	var item = $iterator(thx_Set)(this1);
	while(item.hasNext()) {
		var item1 = item.next();
		if(set.exists(item1)) {
			result.set(item1,true);
		}
	}
	return result;
};
thx_Set.push = function(this1,v) {
	this1.set(v,true);
};
thx_Set.pushMany = function(this1,values) {
	var value = $getIterator(values);
	while(value.hasNext()) {
		var value1 = value.next();
		this1.set(value1,true);
	}
};
thx_Set.reduce = function(this1,handler,acc) {
	var v = $iterator(thx_Set)(this1);
	while(v.hasNext()) {
		var v1 = v.next();
		acc = handler(acc,v1);
	}
	return acc;
};
thx_Set.iterator = function(this1) {
	return this1.keys();
};
thx_Set.union = function(this1,set) {
	var newset = thx_Set.copy(this1);
	thx_Set.pushMany(newset,thx_Set.toArray(set));
	return newset;
};
thx_Set.toArray = function(this1) {
	var arr = [];
	var k = this1.keys();
	while(k.hasNext()) {
		var k1 = k.next();
		arr.push(k1);
	}
	return arr;
};
thx_Set.toString = function(this1) {
	return "{" + thx_Set.toArray(this1).join(", ") + "}";
};
thx_Set.get_length = function(this1) {
	var l = 0;
	var i = this1.iterator();
	while(i.hasNext()) {
		var i1 = i.next();
		++l;
	}
	return l;
};
var thx_Strings = function() { };
thx_Strings.__name__ = "thx.Strings";
thx_Strings.after = function(value,searchFor) {
	var pos = value.indexOf(searchFor);
	if(pos < 0) {
		return "";
	} else {
		return value.substring(pos + searchFor.length);
	}
};
thx_Strings.afterLast = function(value,searchFor) {
	var pos = value.lastIndexOf(searchFor);
	if(pos < 0) {
		return "";
	} else {
		return value.substring(pos + searchFor.length);
	}
};
thx_Strings.before = function(value,searchFor) {
	var pos = value.indexOf(searchFor);
	if(pos < 0) {
		return "";
	} else {
		return value.substring(0,pos);
	}
};
thx_Strings.beforeLast = function(value,searchFor) {
	var pos = value.lastIndexOf(searchFor);
	if(pos < 0) {
		return "";
	} else {
		return value.substring(0,pos);
	}
};
thx_Strings.capitalize = function(s) {
	return HxOverrides.substr(s,0,1).toUpperCase() + HxOverrides.substr(s,1,null);
};
thx_Strings.capitalizeWords = function(value,whiteSpaceOnly) {
	if(whiteSpaceOnly == null) {
		whiteSpaceOnly = false;
	}
	if(whiteSpaceOnly) {
		return thx_Strings.UCWORDSWS.map(HxOverrides.substr(value,0,1).toUpperCase() + HxOverrides.substr(value,1,null),thx_Strings.upperMatch);
	} else {
		return thx_Strings.UCWORDS.map(HxOverrides.substr(value,0,1).toUpperCase() + HxOverrides.substr(value,1,null),thx_Strings.upperMatch);
	}
};
thx_Strings.canonicalizeNewlines = function(value) {
	return value.replace(thx_Strings.CANONICALIZE_LINES.r,"\n");
};
thx_Strings.caseInsensitiveCompare = function(a,b) {
	if(null == a && null == b) {
		return 0;
	}
	if(null == a) {
		return -1;
	} else if(null == b) {
		return 1;
	}
	var a1 = a.toLowerCase();
	var b1 = b.toLowerCase();
	if(a1 < b1) {
		return -1;
	} else if(a1 > b1) {
		return 1;
	} else {
		return 0;
	}
};
thx_Strings.caseInsensitiveEndsWith = function(s,end) {
	return StringTools.endsWith(s.toLowerCase(),end.toLowerCase());
};
thx_Strings.caseInsensitiveEndsWithAny = function(s,values) {
	var tmp = s.toLowerCase();
	var result = new Array(values.length);
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = values[i].toLowerCase();
	}
	return thx_Strings.endsWithAny(tmp,result);
};
thx_Strings.caseInsensitiveStartsWith = function(s,start) {
	return StringTools.startsWith(s.toLowerCase(),start.toLowerCase());
};
thx_Strings.caseInsensitiveStartsWithAny = function(s,values) {
	var tmp = s.toLowerCase();
	var result = new Array(values.length);
	var _g = 0;
	var _g1 = values.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = values[i].toLowerCase();
	}
	return thx_Strings.startsWithAny(tmp,result);
};
thx_Strings.collapse = function(value) {
	var _this = thx_Strings.WSG;
	return StringTools.trim(value).replace(_this.r," ");
};
thx_Strings.compare = function(a,b) {
	if(a < b) {
		return -1;
	} else if(a > b) {
		return 1;
	} else {
		return 0;
	}
};
thx_Strings.caseInsensitiveContains = function(s,test) {
	return s.toLowerCase().indexOf(test.toLowerCase()) >= 0;
};
thx_Strings.contains = function(s,test) {
	return s.indexOf(test) >= 0;
};
thx_Strings.count = function(s,test) {
	return s.split(test).length - 1;
};
thx_Strings.caseInsensitiveContainsAny = function(s,tests) {
	var s1 = s;
	return thx_Arrays.any(tests,function(test) {
		return s1.toLowerCase().indexOf(test.toLowerCase()) >= 0;
	});
};
thx_Strings.containsAny = function(s,tests) {
	var s1 = s;
	return thx_Arrays.any(tests,function(test) {
		return s1.indexOf(test) >= 0;
	});
};
thx_Strings.caseInsensitiveContainsAll = function(s,tests) {
	var s1 = s;
	return thx_Arrays.all(tests,function(test) {
		return s1.toLowerCase().indexOf(test.toLowerCase()) >= 0;
	});
};
thx_Strings.containsAll = function(s,tests) {
	var s1 = s;
	return thx_Arrays.all(tests,function(test) {
		return s1.indexOf(test) >= 0;
	});
};
thx_Strings.dasherize = function(s) {
	return StringTools.replace(s,"_","-");
};
thx_Strings.diffAt = function(a,b) {
	var a1 = a.length;
	var b1 = b.length;
	var min = a1 < b1 ? a1 : b1;
	var _g = 0;
	var _g1 = min;
	while(_g < _g1) {
		var i = _g++;
		if(a.substring(i,i + 1) != b.substring(i,i + 1)) {
			return i;
		}
	}
	return min;
};
thx_Strings.ellipsis = function(s,maxlen,symbol) {
	if(symbol == null) {
		symbol = "…";
	}
	if(maxlen == null) {
		maxlen = 20;
	}
	var sl = s.length;
	var symboll = symbol.length;
	if(sl > maxlen) {
		if(maxlen < symboll) {
			return HxOverrides.substr(symbol,symboll - maxlen,maxlen);
		} else {
			return HxOverrides.substr(s,0,maxlen - symboll) + symbol;
		}
	} else {
		return s;
	}
};
thx_Strings.ellipsisMiddle = function(s,maxlen,symbol) {
	if(symbol == null) {
		symbol = "…";
	}
	if(maxlen == null) {
		maxlen = 20;
	}
	var sl = s.length;
	var symboll = symbol.length;
	if(sl > maxlen) {
		if(maxlen <= symboll) {
			return thx_Strings.ellipsis(s,maxlen,symbol);
		}
		var hll = Math.ceil((maxlen - symboll) / 2);
		var hlr = Math.floor((maxlen - symboll) / 2);
		return HxOverrides.substr(s,0,hll) + symbol + HxOverrides.substr(s,sl - hlr,hlr);
	} else {
		return s;
	}
};
thx_Strings.endsWithAny = function(s,values) {
	return thx_Iterables.any(values,function(end) {
		return StringTools.endsWith(s,end);
	});
};
thx_Strings.filter = function(s,predicate) {
	var _g = [];
	var _g1 = 0;
	var _g2 = s.split("");
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		if(predicate(v)) {
			_g.push(v);
		}
	}
	return _g.join("");
};
thx_Strings.filterCharcode = function(s,predicate) {
	var _g = [];
	var _g1 = 0;
	var _g2 = thx_Strings.map(s,function(s) {
		return HxOverrides.cca(s,0);
	});
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		if(predicate(v)) {
			_g.push(v);
		}
	}
	var codes = _g;
	var result = new Array(codes.length);
	var _g = 0;
	var _g1 = codes.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = String.fromCodePoint(codes[i]);
	}
	return result.join("");
};
thx_Strings.from = function(value,searchFor) {
	var pos = value.indexOf(searchFor);
	if(pos < 0) {
		return "";
	} else {
		return value.substring(pos);
	}
};
thx_Strings.hashCode = function(value) {
	var code = 0;
	var _g = 0;
	var _g1 = value.length;
	while(_g < _g1) {
		var i = _g++;
		var c = HxOverrides.cca(value,i);
		code = (haxe_Int32._mul(thx_Strings.HASCODE_MUL,code) + c | 0) % thx_Strings.HASCODE_MAX;
	}
	return code;
};
thx_Strings.hasContent = function(value) {
	if(value != null) {
		return value.length > 0;
	} else {
		return false;
	}
};
thx_Strings.humanize = function(s) {
	return StringTools.replace(thx_Strings.underscore(s),"_"," ");
};
thx_Strings.isAlpha = function(s) {
	if(s.length > 0) {
		return !thx_Strings.IS_ALPHA.match(s);
	} else {
		return false;
	}
};
thx_Strings.isAlphaNum = function(value) {
	return thx_Strings.ALPHANUM.match(value);
};
thx_Strings.isBreakingWhitespace = function(value) {
	return !thx_Strings.IS_BREAKINGWHITESPACE.match(value);
};
thx_Strings.isLowerCase = function(value) {
	return value.toLowerCase() == value;
};
thx_Strings.isUpperCase = function(value) {
	return value.toUpperCase() == value;
};
thx_Strings.ifEmpty = function(value,alt) {
	if(null != value && "" != value) {
		return value;
	} else {
		return alt;
	}
};
thx_Strings.isDigitsOnly = function(value) {
	return thx_Strings.DIGITS.match(value);
};
thx_Strings.isEmpty = function(value) {
	if(value != null) {
		return value == "";
	} else {
		return true;
	}
};
thx_Strings.lowerCaseFirst = function(value) {
	return value.substring(0,1).toLowerCase() + value.substring(1);
};
thx_Strings.random = function(value,length) {
	if(length == null) {
		length = 1;
	}
	return HxOverrides.substr(value,Math.floor((value.length - length + 1) * Math.random()),length);
};
thx_Strings.randomSequence = function(seed,length) {
	var _this = thx_Ints.range(0,length);
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = thx_Strings.random(seed);
	}
	return result.join("");
};
thx_Strings.randomSequence64 = function(length) {
	return thx_Strings.randomSequence(haxe_crypto_Base64.CHARS,length);
};
thx_Strings.iterator = function(s) {
	return new haxe_iterators_ArrayIterator(s.split(""));
};
thx_Strings.map = function(value,callback) {
	var _this = value.split("");
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = callback(_this[i]);
	}
	return result;
};
thx_Strings.remove = function(value,toremove) {
	return StringTools.replace(value,toremove,"");
};
thx_Strings.removeAfter = function(value,toremove) {
	if(StringTools.endsWith(value,toremove)) {
		return value.substring(0,value.length - toremove.length);
	} else {
		return value;
	}
};
thx_Strings.removeAt = function(value,index,length) {
	return value.substring(0,index) + value.substring(index + length);
};
thx_Strings.removeBefore = function(value,toremove) {
	if(StringTools.startsWith(value,toremove)) {
		return value.substring(toremove.length);
	} else {
		return value;
	}
};
thx_Strings.removeOne = function(value,toremove) {
	var pos = value.indexOf(toremove);
	if(pos < 0) {
		return value;
	}
	return value.substring(0,pos) + value.substring(pos + toremove.length);
};
thx_Strings.repeat = function(s,times) {
	var _g = [];
	var _g1 = 0;
	var _g2 = times;
	while(_g1 < _g2) {
		var i = _g1++;
		_g.push(s);
	}
	return _g.join("");
};
thx_Strings.reverse = function(s) {
	var arr = s.split("");
	arr.reverse();
	return arr.join("");
};
thx_Strings.quote = function(s) {
	if(s.indexOf("\"") < 0) {
		return "\"" + s + "\"";
	} else if(s.indexOf("'") < 0) {
		return "'" + s + "'";
	} else {
		return "\"" + StringTools.replace(s,"\"","\\\"") + "\"";
	}
};
thx_Strings.splitOnce = function(s,separator) {
	var pos = s.indexOf(separator);
	if(pos < 0) {
		return [s];
	}
	return [s.substring(0,pos),s.substring(pos + separator.length)];
};
thx_Strings.startsWithAny = function(s,values) {
	return thx_Iterables.any(values,function(start) {
		return StringTools.startsWith(s,start);
	});
};
thx_Strings.stripTags = function(s) {
	return s.replace(thx_Strings.STRIPTAGS.r,"");
};
thx_Strings.surround = function(s,left,right) {
	return "" + left + s + (null == right ? left : right);
};
thx_Strings.toArray = function(s) {
	return s.split("");
};
thx_Strings.toCharcodes = function(s) {
	return thx_Strings.map(s,function(s) {
		return HxOverrides.cca(s,0);
	});
};
thx_Strings.toChunks = function(s,len) {
	var chunks = [];
	while(s.length > 0) {
		chunks.push(HxOverrides.substr(s,0,len));
		s = HxOverrides.substr(s,len,s.length - len);
	}
	return chunks;
};
thx_Strings.toLines = function(s) {
	return thx_Strings.SPLIT_LINES.split(s);
};
thx_Strings.trimChars = function(value,charlist) {
	return thx_Strings.trimCharsRight(thx_Strings.trimCharsLeft(value,charlist),charlist);
};
thx_Strings.trimCharsLeft = function(value,charlist) {
	var pos = 0;
	var _g = 0;
	var _g1 = value.length;
	while(_g < _g1) {
		var i = _g++;
		if(charlist.indexOf(value.charAt(i)) >= 0) {
			++pos;
		} else {
			break;
		}
	}
	return value.substring(pos);
};
thx_Strings.trimCharsRight = function(value,charlist) {
	var len = value.length;
	var pos = len;
	var i;
	var _g = 0;
	var _g1 = len;
	while(_g < _g1) {
		var j = _g++;
		i = len - j - 1;
		if(charlist.indexOf(value.charAt(i)) >= 0) {
			pos = i;
		} else {
			break;
		}
	}
	return value.substring(0,pos);
};
thx_Strings.underscore = function(s) {
	var _this_r = new RegExp("::","g".split("u").join(""));
	s = s.replace(_this_r,"/");
	var _this_r = new RegExp("([A-Z]+)([A-Z][a-z])","g".split("u").join(""));
	s = s.replace(_this_r,"$1_$2");
	var _this_r = new RegExp("([a-z\\d])([A-Z])","g".split("u").join(""));
	s = s.replace(_this_r,"$1_$2");
	var _this_r = new RegExp("-","g".split("u").join(""));
	s = s.replace(_this_r,"_");
	return s.toLowerCase();
};
thx_Strings.upperCaseFirst = function(value) {
	return value.substring(0,1).toUpperCase() + value.substring(1);
};
thx_Strings.upTo = function(value,searchFor) {
	var pos = value.indexOf(searchFor);
	if(pos < 0) {
		return value;
	} else {
		return value.substring(0,pos);
	}
};
thx_Strings.wrapColumns = function(s,columns,indent,newline) {
	if(newline == null) {
		newline = "\n";
	}
	if(indent == null) {
		indent = "";
	}
	if(columns == null) {
		columns = 78;
	}
	var _this = thx_Strings.SPLIT_LINES.split(s);
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = thx_Strings.wrapLine(StringTools.trim(_this[i].replace(thx_Strings.WSG.r," ")),columns,indent,newline);
	}
	return result.join(newline);
};
thx_Strings.upperMatch = function(re) {
	return re.matched(0).toUpperCase();
};
thx_Strings.wrapLine = function(s,columns,indent,newline) {
	var parts = [];
	var pos = 0;
	var len = s.length;
	var ilen = indent.length;
	columns -= ilen;
	while(true) {
		if(pos + columns >= len - ilen) {
			parts.push(s.substring(pos));
			break;
		}
		var i = 0;
		while(!StringTools.isSpace(s,pos + columns - i) && i < columns) ++i;
		if(i == columns) {
			i = 0;
			while(!StringTools.isSpace(s,pos + columns + i) && pos + columns + i < len) ++i;
			parts.push(s.substring(pos,pos + columns + i));
			pos += columns + i + 1;
		} else {
			parts.push(s.substring(pos,pos + columns - i));
			pos += columns - i + 1;
		}
	}
	return indent + parts.join(newline + indent);
};
thx_Strings.lpad = function(s,char,length) {
	var diff = length - s.length;
	if(diff > 0) {
		return thx_Strings.repeat(char,diff) + s;
	} else {
		return s;
	}
};
thx_Strings.rpad = function(s,char,length) {
	var diff = length - s.length;
	if(diff > 0) {
		return s + thx_Strings.repeat(char,diff);
	} else {
		return s;
	}
};
var thx_TimePeriod = $hxEnums["thx.TimePeriod"] = { __ename__ : "thx.TimePeriod", __constructs__ : ["Second","Minute","Hour","Day","Week","Month","Year"]
	,Second: {_hx_index:0,__enum__:"thx.TimePeriod",toString:$estr}
	,Minute: {_hx_index:1,__enum__:"thx.TimePeriod",toString:$estr}
	,Hour: {_hx_index:2,__enum__:"thx.TimePeriod",toString:$estr}
	,Day: {_hx_index:3,__enum__:"thx.TimePeriod",toString:$estr}
	,Week: {_hx_index:4,__enum__:"thx.TimePeriod",toString:$estr}
	,Month: {_hx_index:5,__enum__:"thx.TimePeriod",toString:$estr}
	,Year: {_hx_index:6,__enum__:"thx.TimePeriod",toString:$estr}
};
var thx_Timestamp = {};
thx_Timestamp.create = function(year,month,day,hour,minute,second) {
	return thx_Dates.create(year,month,day,hour,minute,second).getTime();
};
thx_Timestamp.now = function() {
	return new Date().getTime();
};
thx_Timestamp.fromDate = function(d) {
	return d.getTime();
};
thx_Timestamp.fromString = function(s) {
	return HxOverrides.strDate(s).getTime();
};
thx_Timestamp.toDate = function(this1) {
	return new Date(this1);
};
thx_Timestamp.toString = function(this1) {
	return HxOverrides.dateStr(new Date(this1));
};
thx_Timestamp.snapNext = function(this1,period) {
	switch(period._hx_index) {
	case 0:
		return Math.ceil(this1 / 1000.0) * 1000.0;
	case 1:
		return Math.ceil(this1 / 60000.0) * 60000.0;
	case 2:
		return Math.ceil(this1 / 3600000.0) * 3600000.0;
	case 3:
		var d = new Date(this1);
		return thx_Dates.create(d.getFullYear(),d.getMonth(),d.getDate() + 1,0,0,0).getTime();
	case 4:
		var d = new Date(this1);
		var wd = d.getDay();
		return thx_Dates.create(d.getFullYear(),d.getMonth(),d.getDate() + 7 - wd,0,0,0).getTime();
	case 5:
		var d = new Date(this1);
		return thx_Dates.create(d.getFullYear(),d.getMonth() + 1,1,0,0,0).getTime();
	case 6:
		var d = new Date(this1);
		return thx_Dates.create(d.getFullYear() + 1,0,1,0,0,0).getTime();
	}
};
thx_Timestamp.snapPrev = function(this1,period) {
	switch(period._hx_index) {
	case 0:
		return Math.floor(this1 / 1000.0) * 1000.0;
	case 1:
		return Math.floor(this1 / 60000.0) * 60000.0;
	case 2:
		return Math.floor(this1 / 3600000.0) * 3600000.0;
	case 3:
		var d = new Date(this1);
		return thx_Dates.create(d.getFullYear(),d.getMonth(),d.getDate(),0,0,0).getTime();
	case 4:
		var d = new Date(this1);
		var wd = d.getDay();
		return thx_Dates.create(d.getFullYear(),d.getMonth(),d.getDate() - wd,0,0,0).getTime();
	case 5:
		var d = new Date(this1);
		return thx_Dates.create(d.getFullYear(),d.getMonth(),1,0,0,0).getTime();
	case 6:
		var d = new Date(this1);
		return thx_Dates.create(d.getFullYear(),0,1,0,0,0).getTime();
	}
};
thx_Timestamp.snapTo = function(this1,period) {
	switch(period._hx_index) {
	case 0:
		return Math.round(this1 / 1000.0) * 1000.0;
	case 1:
		return Math.round(this1 / 60000.0) * 60000.0;
	case 2:
		return Math.round(this1 / 3600000.0) * 3600000.0;
	case 3:
		var d = new Date(this1);
		var mod = d.getHours() >= 12 ? 1 : 0;
		return thx_Dates.create(d.getFullYear(),d.getMonth(),d.getDate() + mod,0,0,0).getTime();
	case 4:
		var d = new Date(this1);
		var wd = d.getDay();
		var mod = wd < 3 ? -wd : wd > 3 ? 7 - wd : d.getHours() < 12 ? -wd : 7 - wd;
		return thx_Dates.create(d.getFullYear(),d.getMonth(),d.getDate() + mod,0,0,0).getTime();
	case 5:
		var d = new Date(this1);
		var mod = d.getDate() > Math.round(DateTools.getMonthDays(d) / 2) ? 1 : 0;
		return thx_Dates.create(d.getFullYear(),d.getMonth() + mod,1,0,0,0).getTime();
	case 6:
		var d = new Date(this1);
		var mod = this1 > new Date(d.getFullYear(),6,2,0,0,0).getTime() ? 1 : 0;
		return thx_Dates.create(d.getFullYear() + mod,0,1,0,0,0).getTime();
	}
};
thx_Timestamp.r = function(t,v) {
	return Math.round(t / v) * v;
};
thx_Timestamp.f = function(t,v) {
	return Math.floor(t / v) * v;
};
thx_Timestamp.c = function(t,v) {
	return Math.ceil(t / v) * v;
};
var thx_Tuple0 = {};
thx_Tuple0._new = function() {
	var this1 = thx_Nil.nil;
	return this1;
};
thx_Tuple0.with = function(this1,v) {
	var this1 = v;
	return this1;
};
thx_Tuple0.toString = function(this1) {
	return "Tuple0()";
};
thx_Tuple0.toNil = function(this1) {
	return this1;
};
thx_Tuple0.nilToTuple = function(v) {
	var this1 = thx_Nil.nil;
	return this1;
};
var thx_Tuple1 = {};
thx_Tuple1._new = function(_0) {
	var this1 = _0;
	return this1;
};
thx_Tuple1.get__0 = function(this1) {
	return this1;
};
thx_Tuple1.with = function(this1,v) {
	var this2 = { _0 : this1, _1 : v};
	return this2;
};
thx_Tuple1.toString = function(this1) {
	return "Tuple1(" + Std.string(this1) + ")";
};
thx_Tuple1.arrayToTuple = function(v) {
	var this1 = v[0];
	return this1;
};
var thx_Tuple2 = {};
thx_Tuple2.of = function(_0,_1) {
	var this1 = { _0 : _0, _1 : _1};
	return this1;
};
thx_Tuple2._new = function(_0,_1) {
	var this1 = { _0 : _0, _1 : _1};
	return this1;
};
thx_Tuple2.get_left = function(this1) {
	return this1._0;
};
thx_Tuple2.get_right = function(this1) {
	return this1._1;
};
thx_Tuple2.flip = function(this1) {
	return { _0 : this1._1, _1 : this1._0};
};
thx_Tuple2.dropLeft = function(this1) {
	var this2 = this1._1;
	return this2;
};
thx_Tuple2.dropRight = function(this1) {
	var this2 = this1._0;
	return this2;
};
thx_Tuple2.with = function(this1,v) {
	var this2 = { _0 : this1._0, _1 : this1._1, _2 : v};
	return this2;
};
thx_Tuple2.toString = function(this1) {
	return "Tuple2(" + Std.string(this1._0) + "," + Std.string(this1._1) + ")";
};
thx_Tuple2.map = function(this1,f) {
	var this2 = { _0 : this1._0, _1 : f(this1._1)};
	return this2;
};
thx_Tuple2.squeeze = function(f) {
	return function(tp) {
		return f(tp._0,tp._1);
	};
};
thx_Tuple2.arrayToTuple2 = function(v) {
	var this1 = { _0 : v[0], _1 : v[1]};
	return this1;
};
var thx_Tuple3 = {};
thx_Tuple3.of = function(_0,_1,_2) {
	var this1 = { _0 : _0, _1 : _1, _2 : _2};
	return this1;
};
thx_Tuple3._new = function(_0,_1,_2) {
	var this1 = { _0 : _0, _1 : _1, _2 : _2};
	return this1;
};
thx_Tuple3.flip = function(this1) {
	return { _0 : this1._2, _1 : this1._1, _2 : this1._0};
};
thx_Tuple3.dropLeft = function(this1) {
	var this2 = { _0 : this1._1, _1 : this1._2};
	return this2;
};
thx_Tuple3.dropRight = function(this1) {
	var this2 = { _0 : this1._0, _1 : this1._1};
	return this2;
};
thx_Tuple3.with = function(this1,v) {
	var this2 = { _0 : this1._0, _1 : this1._1, _2 : this1._2, _3 : v};
	return this2;
};
thx_Tuple3.toString = function(this1) {
	return "Tuple3(" + Std.string(this1._0) + "," + Std.string(this1._1) + "," + Std.string(this1._2) + ")";
};
thx_Tuple3.arrayToTuple3 = function(v) {
	var this1 = { _0 : v[0], _1 : v[1], _2 : v[2]};
	return this1;
};
thx_Tuple3.map = function(this1,f) {
	var this2 = { _0 : this1._0, _1 : this1._1, _2 : f(this1._2)};
	return this2;
};
var thx_Tuple4 = {};
thx_Tuple4.of = function(_0,_1,_2,_3) {
	var this1 = { _0 : _0, _1 : _1, _2 : _2, _3 : _3};
	return this1;
};
thx_Tuple4._new = function(_0,_1,_2,_3) {
	var this1 = { _0 : _0, _1 : _1, _2 : _2, _3 : _3};
	return this1;
};
thx_Tuple4.flip = function(this1) {
	return { _0 : this1._3, _1 : this1._2, _2 : this1._1, _3 : this1._0};
};
thx_Tuple4.dropLeft = function(this1) {
	var this2 = { _0 : this1._1, _1 : this1._2, _2 : this1._3};
	return this2;
};
thx_Tuple4.dropRight = function(this1) {
	var this2 = { _0 : this1._0, _1 : this1._1, _2 : this1._2};
	return this2;
};
thx_Tuple4.with = function(this1,v) {
	var this2 = { _0 : this1._0, _1 : this1._1, _2 : this1._2, _3 : this1._3, _4 : v};
	return this2;
};
thx_Tuple4.toString = function(this1) {
	return "Tuple4(" + Std.string(this1._0) + "," + Std.string(this1._1) + "," + Std.string(this1._2) + "," + Std.string(this1._3) + ")";
};
thx_Tuple4.arrayToTuple4 = function(v) {
	var this1 = { _0 : v[0], _1 : v[1], _2 : v[2], _3 : v[3]};
	return this1;
};
var thx_Tuple5 = {};
thx_Tuple5.of = function(_0,_1,_2,_3,_4) {
	var this1 = { _0 : _0, _1 : _1, _2 : _2, _3 : _3, _4 : _4};
	return this1;
};
thx_Tuple5._new = function(_0,_1,_2,_3,_4) {
	var this1 = { _0 : _0, _1 : _1, _2 : _2, _3 : _3, _4 : _4};
	return this1;
};
thx_Tuple5.flip = function(this1) {
	return { _0 : this1._4, _1 : this1._3, _2 : this1._2, _3 : this1._1, _4 : this1._0};
};
thx_Tuple5.dropLeft = function(this1) {
	var this2 = { _0 : this1._1, _1 : this1._2, _2 : this1._3, _3 : this1._4};
	return this2;
};
thx_Tuple5.dropRight = function(this1) {
	var this2 = { _0 : this1._0, _1 : this1._1, _2 : this1._2, _3 : this1._3};
	return this2;
};
thx_Tuple5.with = function(this1,v) {
	var this2 = { _0 : this1._0, _1 : this1._1, _2 : this1._2, _3 : this1._3, _4 : this1._4, _5 : v};
	return this2;
};
thx_Tuple5.toString = function(this1) {
	return "Tuple5(" + Std.string(this1._0) + "," + Std.string(this1._1) + "," + Std.string(this1._2) + "," + Std.string(this1._3) + "," + Std.string(this1._4) + ")";
};
thx_Tuple5.arrayToTuple5 = function(v) {
	var this1 = { _0 : v[0], _1 : v[1], _2 : v[2], _3 : v[3], _4 : v[4]};
	return this1;
};
var thx_Tuple6 = {};
thx_Tuple6.of = function(_0,_1,_2,_3,_4,_5) {
	var this1 = { _0 : _0, _1 : _1, _2 : _2, _3 : _3, _4 : _4, _5 : _5};
	return this1;
};
thx_Tuple6._new = function(_0,_1,_2,_3,_4,_5) {
	var this1 = { _0 : _0, _1 : _1, _2 : _2, _3 : _3, _4 : _4, _5 : _5};
	return this1;
};
thx_Tuple6.flip = function(this1) {
	return { _0 : this1._5, _1 : this1._4, _2 : this1._3, _3 : this1._2, _4 : this1._1, _5 : this1._0};
};
thx_Tuple6.dropLeft = function(this1) {
	var this2 = { _0 : this1._1, _1 : this1._2, _2 : this1._3, _3 : this1._4, _4 : this1._5};
	return this2;
};
thx_Tuple6.dropRight = function(this1) {
	var this2 = { _0 : this1._0, _1 : this1._1, _2 : this1._2, _3 : this1._3, _4 : this1._4};
	return this2;
};
thx_Tuple6.toString = function(this1) {
	return "Tuple6(" + Std.string(this1._0) + "," + Std.string(this1._1) + "," + Std.string(this1._2) + "," + Std.string(this1._3) + "," + Std.string(this1._4) + "," + Std.string(this1._5) + ")";
};
thx_Tuple6.arrayToTuple6 = function(v) {
	var this1 = { _0 : v[0], _1 : v[1], _2 : v[2], _3 : v[3], _4 : v[4], _5 : v[5]};
	return this1;
};
var thx_Types = function() { };
thx_Types.__name__ = "thx.Types";
thx_Types.isAnonymousObject = function(v) {
	if(Reflect.isObject(v)) {
		return null == js_Boot.getClass(v);
	} else {
		return false;
	}
};
thx_Types.isObject = function(v) {
	if(Reflect.isObject(v)) {
		return !thx_Types.isPrimitive(v);
	} else {
		return false;
	}
};
thx_Types.isPrimitive = function(v) {
	var _g = Type.typeof(v);
	switch(_g._hx_index) {
	case 1:case 2:case 3:
		return true;
	case 0:case 4:case 5:case 8:
		return false;
	case 6:
		var _g1 = _g.c;
		var c = _g1;
		if(c.__name__ == "String") {
			return true;
		} else {
			var c = _g1;
			if(c.__name__ == "Date") {
				return true;
			} else {
				return false;
			}
		}
		break;
	case 7:
		var _g1 = _g.e;
		return false;
	}
};
thx_Types.isEnumValue = function(v) {
	var _g = Type.typeof(v);
	if(_g._hx_index == 7) {
		var _g1 = _g.e;
		return true;
	} else {
		return false;
	}
};
thx_Types.hasSuperClass = function(cls,sup) {
	while(null != cls) {
		if(cls == sup) {
			return true;
		}
		cls = cls.__super__;
	}
	return false;
};
thx_Types.sameType = function(a,b) {
	return thx_Types.toString(Type.typeof(a)) == thx_Types.toString(Type.typeof(b));
};
thx_Types.typeInheritance = function(type) {
	switch(type._hx_index) {
	case 1:
		return ["Int"];
	case 2:
		return ["Float"];
	case 3:
		return ["Bool"];
	case 4:
		return ["{}"];
	case 5:
		return ["Function"];
	case 6:
		var c = type.c;
		var classes = [];
		while(null != c) {
			classes.push(c);
			c = c.__super__;
		}
		var f = Type.getClassName;
		var result = new Array(classes.length);
		var _g = 0;
		var _g1 = classes.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = f(classes[i]);
		}
		return result;
	case 7:
		var e = type.e;
		return [e.__ename__];
	default:
		throw haxe_Exception.thrown("invalid type " + Std.string(type));
	}
};
thx_Types.toString = function(type) {
	switch(type._hx_index) {
	case 0:
		return "Null";
	case 1:
		return "Int";
	case 2:
		return "Float";
	case 3:
		return "Bool";
	case 4:
		return "{}";
	case 5:
		return "Function";
	case 6:
		var c = type.c;
		return c.__name__;
	case 7:
		var e = type.e;
		return e.__ename__;
	default:
		throw haxe_Exception.thrown("invalid type " + Std.string(type));
	}
};
thx_Types.valueTypeInheritance = function(value) {
	return thx_Types.typeInheritance(Type.typeof(value));
};
thx_Types.valueTypeToString = function(value) {
	return thx_Types.toString(Type.typeof(value));
};
thx_Types.anyValueToString = function(value) {
	if(js_Boot.__instanceof(value,ValueType)) {
		return thx_Types.toString(value);
	}
	if(js_Boot.__instanceof(value,Class)) {
		return value.__name__;
	}
	if(js_Boot.__instanceof(value,Enum)) {
		return value.__ename__;
	}
	return thx_Types.toString(Type.typeof(value));
};
var thx_Validation = {};
thx_Validation.get_either = function(this1) {
	return this1;
};
thx_Validation.pure = function(a) {
	return thx_Either.Right(a);
};
thx_Validation.success = function(a) {
	return thx_Either.Right(a);
};
thx_Validation.failure = function(e) {
	return thx_Either.Left(e);
};
thx_Validation.successNel = function(a) {
	return thx_Either.Right(a);
};
thx_Validation.failureNel = function(e) {
	return thx_Either.Left(thx_Nel.pure(e));
};
thx_Validation.nn = function(a,e) {
	if(a == null) {
		return thx_Either.Left(e);
	} else {
		return thx_Either.Right(a);
	}
};
thx_Validation.nnNel = function(a,e) {
	if(a == null) {
		return thx_Either.Left(thx_Nel.pure(e));
	} else {
		return thx_Either.Right(a);
	}
};
thx_Validation.map = function(this1,f) {
	return thx_Eithers.map(this1,f);
};
thx_Validation.ap = function(this1,v,s) {
	switch(this1._hx_index) {
	case 0:
		var e0 = this1.value;
		var _g = v;
		switch(_g._hx_index) {
		case 0:
			var e1 = _g.value;
			return thx_Either.Left((thx_Semigroup.get_append(s))(e0,e1));
		case 1:
			var b = _g.value;
			return thx_Either.Left(e0);
		}
		break;
	case 1:
		var a = this1.value;
		var _g = v;
		switch(_g._hx_index) {
		case 0:
			var e = _g.value;
			return thx_Either.Left(e);
		case 1:
			var f = _g.value;
			return thx_Either.Right(f(a));
		}
		break;
	}
};
thx_Validation.flatMapV = function(this1,f) {
	switch(this1._hx_index) {
	case 0:
		var a = this1.value;
		return thx_Either.Left(a);
	case 1:
		var b = this1.value;
		return f(b);
	}
};
thx_Validation.orElseV = function(this1,other,s) {
	var _g = other;
	switch(this1._hx_index) {
	case 0:
		var _g1 = this1.value;
		switch(_g._hx_index) {
		case 0:
			var e1 = _g1;
			var e2 = _g.value;
			return thx_Either.Left((thx_Semigroup.get_append(s))(e1,e2));
		case 1:
			var _g1 = _g.value;
			return other;
		}
		break;
	case 1:
		var _g = this1.value;
		return this1;
	}
};
thx_Validation.foldLeft = function(this1,b,f) {
	return thx_Eithers.foldLeft(this1,b,f);
};
thx_Validation.foldMap = function(this1,f,m) {
	return thx_Eithers.foldMap(this1,f,m);
};
thx_Validation.leftMap = function(this1,f) {
	return thx_Eithers.leftMap(this1,f);
};
thx_Validation.wrapNel = function(this1) {
	return thx_Eithers.leftMap(this1,thx_Nel.pure);
};
thx_Validation.ensure = function(this1,p,error) {
	return thx_Eithers.ensure(this1,p,error);
};
thx_Validation.vnel = function(e) {
	return e;
};
thx_Validation.val1 = function(f,v1) {
	return thx_Validation.map(v1,f);
};
thx_Validation.val2 = function(f,v1,v2,s) {
	return thx_Validation.ap(v2,thx_Validation.map(v1,thx_Functions2.curry(f)),s);
};
thx_Validation.val3 = function(f,v1,v2,v3,s) {
	var f1 = f;
	return thx_Validation.ap(v3,thx_Validation.ap(v2,thx_Validation.map(v1,thx_Functions2.curry(function(a,b) {
		return function(c) {
			return f1(a,b,c);
		};
	})),s),s);
};
thx_Validation.val4 = function(f,v1,v2,v3,v4,s) {
	var f1 = f;
	var f = function(a,b,c) {
		return function(d) {
			return f1(a,b,c,d);
		};
	};
	return thx_Validation.ap(v4,thx_Validation.ap(v3,thx_Validation.ap(v2,thx_Validation.map(v1,thx_Functions2.curry(function(a,b) {
		return function(c) {
			return f(a,b,c);
		};
	})),s),s),s);
};
thx_Validation.val5 = function(f,v1,v2,v3,v4,v5,s) {
	var f1 = f;
	var f = function(a,b,c,d) {
		return function(e) {
			return f1(a,b,c,d,e);
		};
	};
	var f2 = function(a,b,c) {
		return function(d) {
			return f(a,b,c,d);
		};
	};
	return thx_Validation.ap(v5,thx_Validation.ap(v4,thx_Validation.ap(v3,thx_Validation.ap(v2,thx_Validation.map(v1,thx_Functions2.curry(function(a,b) {
		return function(c) {
			return f2(a,b,c);
		};
	})),s),s),s),s);
};
thx_Validation.val6 = function(f,v1,v2,v3,v4,v5,v6,s) {
	var f1 = f;
	var f = function(a,b,c,d,e) {
		return function(f0) {
			return f1(a,b,c,d,e,f0);
		};
	};
	var f2 = function(a,b,c,d) {
		return function(e) {
			return f(a,b,c,d,e);
		};
	};
	var f3 = function(a,b,c) {
		return function(d) {
			return f2(a,b,c,d);
		};
	};
	return thx_Validation.ap(v6,thx_Validation.ap(v5,thx_Validation.ap(v4,thx_Validation.ap(v3,thx_Validation.ap(v2,thx_Validation.map(v1,thx_Functions2.curry(function(a,b) {
		return function(c) {
			return f3(a,b,c);
		};
	})),s),s),s),s),s);
};
thx_Validation.val7 = function(f,v1,v2,v3,v4,v5,v6,v7,s) {
	var f1 = f;
	var f = function(a,b,c,d,e,f0) {
		return function(g) {
			return f1(a,b,c,d,e,f0,g);
		};
	};
	var f2 = function(a,b,c,d,e) {
		return function(f0) {
			return f(a,b,c,d,e,f0);
		};
	};
	var f3 = function(a,b,c,d) {
		return function(e) {
			return f2(a,b,c,d,e);
		};
	};
	var f4 = function(a,b,c) {
		return function(d) {
			return f3(a,b,c,d);
		};
	};
	return thx_Validation.ap(v7,thx_Validation.ap(v6,thx_Validation.ap(v5,thx_Validation.ap(v4,thx_Validation.ap(v3,thx_Validation.ap(v2,thx_Validation.map(v1,thx_Functions2.curry(function(a,b) {
		return function(c) {
			return f4(a,b,c);
		};
	})),s),s),s),s),s),s);
};
thx_Validation.val8 = function(f,v1,v2,v3,v4,v5,v6,v7,v8,s) {
	var f1 = f;
	var f = function(a,b,c,d,e,f0,g) {
		return function(h) {
			return f1(a,b,c,d,e,f0,g,h);
		};
	};
	var f2 = function(a,b,c,d,e,f0) {
		return function(g) {
			return f(a,b,c,d,e,f0,g);
		};
	};
	var f3 = function(a,b,c,d,e) {
		return function(f0) {
			return f2(a,b,c,d,e,f0);
		};
	};
	var f4 = function(a,b,c,d) {
		return function(e) {
			return f3(a,b,c,d,e);
		};
	};
	var f5 = function(a,b,c) {
		return function(d) {
			return f4(a,b,c,d);
		};
	};
	return thx_Validation.ap(v8,thx_Validation.ap(v7,thx_Validation.ap(v6,thx_Validation.ap(v5,thx_Validation.ap(v4,thx_Validation.ap(v3,thx_Validation.ap(v2,thx_Validation.map(v1,thx_Functions2.curry(function(a,b) {
		return function(c) {
			return f5(a,b,c);
		};
	})),s),s),s),s),s),s),s);
};
thx_Validation.val9 = function(f,v1,v2,v3,v4,v5,v6,v7,v8,v9,s) {
	var f1 = f;
	var f = function(a,b,c,d,e,f0,g,h) {
		return function(i) {
			return f1(a,b,c,d,e,f0,g,h,i);
		};
	};
	var f2 = function(a,b,c,d,e,f0,g) {
		return function(h) {
			return f(a,b,c,d,e,f0,g,h);
		};
	};
	var f3 = function(a,b,c,d,e,f0) {
		return function(g) {
			return f2(a,b,c,d,e,f0,g);
		};
	};
	var f4 = function(a,b,c,d,e) {
		return function(f0) {
			return f3(a,b,c,d,e,f0);
		};
	};
	var f5 = function(a,b,c,d) {
		return function(e) {
			return f4(a,b,c,d,e);
		};
	};
	var f6 = function(a,b,c) {
		return function(d) {
			return f5(a,b,c,d);
		};
	};
	return thx_Validation.ap(v9,thx_Validation.ap(v8,thx_Validation.ap(v7,thx_Validation.ap(v6,thx_Validation.ap(v5,thx_Validation.ap(v4,thx_Validation.ap(v3,thx_Validation.ap(v2,thx_Validation.map(v1,thx_Functions2.curry(function(a,b) {
		return function(c) {
			return f6(a,b,c);
		};
	})),s),s),s),s),s),s),s),s);
};
thx_Validation.val10 = function(f,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,s) {
	var f1 = f;
	var f = function(a,b,c,d,e,f0,g,h,i) {
		return function(j) {
			return f1(a,b,c,d,e,f0,g,h,i,j);
		};
	};
	var f2 = function(a,b,c,d,e,f0,g,h) {
		return function(i) {
			return f(a,b,c,d,e,f0,g,h,i);
		};
	};
	var f3 = function(a,b,c,d,e,f0,g) {
		return function(h) {
			return f2(a,b,c,d,e,f0,g,h);
		};
	};
	var f4 = function(a,b,c,d,e,f0) {
		return function(g) {
			return f3(a,b,c,d,e,f0,g);
		};
	};
	var f5 = function(a,b,c,d,e) {
		return function(f0) {
			return f4(a,b,c,d,e,f0);
		};
	};
	var f6 = function(a,b,c,d) {
		return function(e) {
			return f5(a,b,c,d,e);
		};
	};
	var f7 = function(a,b,c) {
		return function(d) {
			return f6(a,b,c,d);
		};
	};
	return thx_Validation.ap(v10,thx_Validation.ap(v9,thx_Validation.ap(v8,thx_Validation.ap(v7,thx_Validation.ap(v6,thx_Validation.ap(v5,thx_Validation.ap(v4,thx_Validation.ap(v3,thx_Validation.ap(v2,thx_Validation.map(v1,thx_Functions2.curry(function(a,b) {
		return function(c) {
			return f7(a,b,c);
		};
	})),s),s),s),s),s),s),s),s),s);
};
thx_Validation.val11 = function(f,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,s) {
	var f1 = f;
	var f = function(a,b,c,d,e,f0,g,h,i,j) {
		return function(k) {
			return f1(a,b,c,d,e,f0,g,h,i,j,k);
		};
	};
	var f2 = function(a,b,c,d,e,f0,g,h,i) {
		return function(j) {
			return f(a,b,c,d,e,f0,g,h,i,j);
		};
	};
	var f3 = function(a,b,c,d,e,f0,g,h) {
		return function(i) {
			return f2(a,b,c,d,e,f0,g,h,i);
		};
	};
	var f4 = function(a,b,c,d,e,f0,g) {
		return function(h) {
			return f3(a,b,c,d,e,f0,g,h);
		};
	};
	var f5 = function(a,b,c,d,e,f0) {
		return function(g) {
			return f4(a,b,c,d,e,f0,g);
		};
	};
	var f6 = function(a,b,c,d,e) {
		return function(f0) {
			return f5(a,b,c,d,e,f0);
		};
	};
	var f7 = function(a,b,c,d) {
		return function(e) {
			return f6(a,b,c,d,e);
		};
	};
	var f8 = function(a,b,c) {
		return function(d) {
			return f7(a,b,c,d);
		};
	};
	return thx_Validation.ap(v11,thx_Validation.ap(v10,thx_Validation.ap(v9,thx_Validation.ap(v8,thx_Validation.ap(v7,thx_Validation.ap(v6,thx_Validation.ap(v5,thx_Validation.ap(v4,thx_Validation.ap(v3,thx_Validation.ap(v2,thx_Validation.map(v1,thx_Functions2.curry(function(a,b) {
		return function(c) {
			return f8(a,b,c);
		};
	})),s),s),s),s),s),s),s),s),s),s);
};
thx_Validation.val12 = function(f,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,s) {
	var f1 = f;
	var f = function(a,b,c,d,e,f0,g,h,i,j,k) {
		return function(l) {
			return f1(a,b,c,d,e,f0,g,h,i,j,k,l);
		};
	};
	var f2 = function(a,b,c,d,e,f0,g,h,i,j) {
		return function(k) {
			return f(a,b,c,d,e,f0,g,h,i,j,k);
		};
	};
	var f3 = function(a,b,c,d,e,f0,g,h,i) {
		return function(j) {
			return f2(a,b,c,d,e,f0,g,h,i,j);
		};
	};
	var f4 = function(a,b,c,d,e,f0,g,h) {
		return function(i) {
			return f3(a,b,c,d,e,f0,g,h,i);
		};
	};
	var f5 = function(a,b,c,d,e,f0,g) {
		return function(h) {
			return f4(a,b,c,d,e,f0,g,h);
		};
	};
	var f6 = function(a,b,c,d,e,f0) {
		return function(g) {
			return f5(a,b,c,d,e,f0,g);
		};
	};
	var f7 = function(a,b,c,d,e) {
		return function(f0) {
			return f6(a,b,c,d,e,f0);
		};
	};
	var f8 = function(a,b,c,d) {
		return function(e) {
			return f7(a,b,c,d,e);
		};
	};
	var f9 = function(a,b,c) {
		return function(d) {
			return f8(a,b,c,d);
		};
	};
	return thx_Validation.ap(v12,thx_Validation.ap(v11,thx_Validation.ap(v10,thx_Validation.ap(v9,thx_Validation.ap(v8,thx_Validation.ap(v7,thx_Validation.ap(v6,thx_Validation.ap(v5,thx_Validation.ap(v4,thx_Validation.ap(v3,thx_Validation.ap(v2,thx_Validation.map(v1,thx_Functions2.curry(function(a,b) {
		return function(c) {
			return f9(a,b,c);
		};
	})),s),s),s),s),s),s),s),s),s),s),s);
};
thx_Validation.val13 = function(f,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,s) {
	var f1 = f;
	var f = function(a,b,c,d,e,f0,g,h,i,j,k,l) {
		return function(m) {
			return f1(a,b,c,d,e,f0,g,h,i,j,k,l,m);
		};
	};
	var f2 = function(a,b,c,d,e,f0,g,h,i,j,k) {
		return function(l) {
			return f(a,b,c,d,e,f0,g,h,i,j,k,l);
		};
	};
	var f3 = function(a,b,c,d,e,f0,g,h,i,j) {
		return function(k) {
			return f2(a,b,c,d,e,f0,g,h,i,j,k);
		};
	};
	var f4 = function(a,b,c,d,e,f0,g,h,i) {
		return function(j) {
			return f3(a,b,c,d,e,f0,g,h,i,j);
		};
	};
	var f5 = function(a,b,c,d,e,f0,g,h) {
		return function(i) {
			return f4(a,b,c,d,e,f0,g,h,i);
		};
	};
	var f6 = function(a,b,c,d,e,f0,g) {
		return function(h) {
			return f5(a,b,c,d,e,f0,g,h);
		};
	};
	var f7 = function(a,b,c,d,e,f0) {
		return function(g) {
			return f6(a,b,c,d,e,f0,g);
		};
	};
	var f8 = function(a,b,c,d,e) {
		return function(f0) {
			return f7(a,b,c,d,e,f0);
		};
	};
	var f9 = function(a,b,c,d) {
		return function(e) {
			return f8(a,b,c,d,e);
		};
	};
	var f10 = function(a,b,c) {
		return function(d) {
			return f9(a,b,c,d);
		};
	};
	return thx_Validation.ap(v13,thx_Validation.ap(v12,thx_Validation.ap(v11,thx_Validation.ap(v10,thx_Validation.ap(v9,thx_Validation.ap(v8,thx_Validation.ap(v7,thx_Validation.ap(v6,thx_Validation.ap(v5,thx_Validation.ap(v4,thx_Validation.ap(v3,thx_Validation.ap(v2,thx_Validation.map(v1,thx_Functions2.curry(function(a,b) {
		return function(c) {
			return f10(a,b,c);
		};
	})),s),s),s),s),s),s),s),s),s),s),s),s);
};
thx_Validation.val14 = function(f,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,s) {
	var f1 = f;
	var f = function(a,b,c,d,e,f0,g,h,i,j,k,l,m) {
		return function(n) {
			return f1(a,b,c,d,e,f0,g,h,i,j,k,l,m,n);
		};
	};
	var f2 = function(a,b,c,d,e,f0,g,h,i,j,k,l) {
		return function(m) {
			return f(a,b,c,d,e,f0,g,h,i,j,k,l,m);
		};
	};
	var f3 = function(a,b,c,d,e,f0,g,h,i,j,k) {
		return function(l) {
			return f2(a,b,c,d,e,f0,g,h,i,j,k,l);
		};
	};
	var f4 = function(a,b,c,d,e,f0,g,h,i,j) {
		return function(k) {
			return f3(a,b,c,d,e,f0,g,h,i,j,k);
		};
	};
	var f5 = function(a,b,c,d,e,f0,g,h,i) {
		return function(j) {
			return f4(a,b,c,d,e,f0,g,h,i,j);
		};
	};
	var f6 = function(a,b,c,d,e,f0,g,h) {
		return function(i) {
			return f5(a,b,c,d,e,f0,g,h,i);
		};
	};
	var f7 = function(a,b,c,d,e,f0,g) {
		return function(h) {
			return f6(a,b,c,d,e,f0,g,h);
		};
	};
	var f8 = function(a,b,c,d,e,f0) {
		return function(g) {
			return f7(a,b,c,d,e,f0,g);
		};
	};
	var f9 = function(a,b,c,d,e) {
		return function(f0) {
			return f8(a,b,c,d,e,f0);
		};
	};
	var f10 = function(a,b,c,d) {
		return function(e) {
			return f9(a,b,c,d,e);
		};
	};
	var f11 = function(a,b,c) {
		return function(d) {
			return f10(a,b,c,d);
		};
	};
	return thx_Validation.ap(v14,thx_Validation.ap(v13,thx_Validation.ap(v12,thx_Validation.ap(v11,thx_Validation.ap(v10,thx_Validation.ap(v9,thx_Validation.ap(v8,thx_Validation.ap(v7,thx_Validation.ap(v6,thx_Validation.ap(v5,thx_Validation.ap(v4,thx_Validation.ap(v3,thx_Validation.ap(v2,thx_Validation.map(v1,thx_Functions2.curry(function(a,b) {
		return function(c) {
			return f11(a,b,c);
		};
	})),s),s),s),s),s),s),s),s),s),s),s),s),s);
};
thx_Validation.val15 = function(f,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,s) {
	var f1 = f;
	var f = function(a,b,c,d,e,f0,g,h,i,j,k,l,m,n) {
		return function(o) {
			return f1(a,b,c,d,e,f0,g,h,i,j,k,l,m,n,o);
		};
	};
	var f2 = function(a,b,c,d,e,f0,g,h,i,j,k,l,m) {
		return function(n) {
			return f(a,b,c,d,e,f0,g,h,i,j,k,l,m,n);
		};
	};
	var f3 = function(a,b,c,d,e,f0,g,h,i,j,k,l) {
		return function(m) {
			return f2(a,b,c,d,e,f0,g,h,i,j,k,l,m);
		};
	};
	var f4 = function(a,b,c,d,e,f0,g,h,i,j,k) {
		return function(l) {
			return f3(a,b,c,d,e,f0,g,h,i,j,k,l);
		};
	};
	var f5 = function(a,b,c,d,e,f0,g,h,i,j) {
		return function(k) {
			return f4(a,b,c,d,e,f0,g,h,i,j,k);
		};
	};
	var f6 = function(a,b,c,d,e,f0,g,h,i) {
		return function(j) {
			return f5(a,b,c,d,e,f0,g,h,i,j);
		};
	};
	var f7 = function(a,b,c,d,e,f0,g,h) {
		return function(i) {
			return f6(a,b,c,d,e,f0,g,h,i);
		};
	};
	var f8 = function(a,b,c,d,e,f0,g) {
		return function(h) {
			return f7(a,b,c,d,e,f0,g,h);
		};
	};
	var f9 = function(a,b,c,d,e,f0) {
		return function(g) {
			return f8(a,b,c,d,e,f0,g);
		};
	};
	var f10 = function(a,b,c,d,e) {
		return function(f0) {
			return f9(a,b,c,d,e,f0);
		};
	};
	var f11 = function(a,b,c,d) {
		return function(e) {
			return f10(a,b,c,d,e);
		};
	};
	var f12 = function(a,b,c) {
		return function(d) {
			return f11(a,b,c,d);
		};
	};
	return thx_Validation.ap(v15,thx_Validation.ap(v14,thx_Validation.ap(v13,thx_Validation.ap(v12,thx_Validation.ap(v11,thx_Validation.ap(v10,thx_Validation.ap(v9,thx_Validation.ap(v8,thx_Validation.ap(v7,thx_Validation.ap(v6,thx_Validation.ap(v5,thx_Validation.ap(v4,thx_Validation.ap(v3,thx_Validation.ap(v2,thx_Validation.map(v1,thx_Functions2.curry(function(a,b) {
		return function(c) {
			return f12(a,b,c);
		};
	})),s),s),s),s),s),s),s),s),s),s),s),s),s),s);
};
thx_Validation.val16 = function(f,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,s) {
	var f1 = f;
	var f = function(a,b,c,d,e,f0,g,h,i,j,k,l,m,n,o) {
		return function(p) {
			return f1(a,b,c,d,e,f0,g,h,i,j,k,l,m,n,o,p);
		};
	};
	var f2 = function(a,b,c,d,e,f0,g,h,i,j,k,l,m,n) {
		return function(o) {
			return f(a,b,c,d,e,f0,g,h,i,j,k,l,m,n,o);
		};
	};
	var f3 = function(a,b,c,d,e,f0,g,h,i,j,k,l,m) {
		return function(n) {
			return f2(a,b,c,d,e,f0,g,h,i,j,k,l,m,n);
		};
	};
	var f4 = function(a,b,c,d,e,f0,g,h,i,j,k,l) {
		return function(m) {
			return f3(a,b,c,d,e,f0,g,h,i,j,k,l,m);
		};
	};
	var f5 = function(a,b,c,d,e,f0,g,h,i,j,k) {
		return function(l) {
			return f4(a,b,c,d,e,f0,g,h,i,j,k,l);
		};
	};
	var f6 = function(a,b,c,d,e,f0,g,h,i,j) {
		return function(k) {
			return f5(a,b,c,d,e,f0,g,h,i,j,k);
		};
	};
	var f7 = function(a,b,c,d,e,f0,g,h,i) {
		return function(j) {
			return f6(a,b,c,d,e,f0,g,h,i,j);
		};
	};
	var f8 = function(a,b,c,d,e,f0,g,h) {
		return function(i) {
			return f7(a,b,c,d,e,f0,g,h,i);
		};
	};
	var f9 = function(a,b,c,d,e,f0,g) {
		return function(h) {
			return f8(a,b,c,d,e,f0,g,h);
		};
	};
	var f10 = function(a,b,c,d,e,f0) {
		return function(g) {
			return f9(a,b,c,d,e,f0,g);
		};
	};
	var f11 = function(a,b,c,d,e) {
		return function(f0) {
			return f10(a,b,c,d,e,f0);
		};
	};
	var f12 = function(a,b,c,d) {
		return function(e) {
			return f11(a,b,c,d,e);
		};
	};
	var f13 = function(a,b,c) {
		return function(d) {
			return f12(a,b,c,d);
		};
	};
	return thx_Validation.ap(v16,thx_Validation.ap(v15,thx_Validation.ap(v14,thx_Validation.ap(v13,thx_Validation.ap(v12,thx_Validation.ap(v11,thx_Validation.ap(v10,thx_Validation.ap(v9,thx_Validation.ap(v8,thx_Validation.ap(v7,thx_Validation.ap(v6,thx_Validation.ap(v5,thx_Validation.ap(v4,thx_Validation.ap(v3,thx_Validation.ap(v2,thx_Validation.map(v1,thx_Functions2.curry(function(a,b) {
		return function(c) {
			return f13(a,b,c);
		};
	})),s),s),s),s),s),s),s),s),s),s),s),s),s),s),s);
};
thx_Validation.val17 = function(f,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,s) {
	var f1 = f;
	var f = function(a,b,c,d,e,f0,g,h,i,j,k,l,m,n,o,p) {
		return function(q) {
			return f1(a,b,c,d,e,f0,g,h,i,j,k,l,m,n,o,p,q);
		};
	};
	var f2 = function(a,b,c,d,e,f0,g,h,i,j,k,l,m,n,o) {
		return function(p) {
			return f(a,b,c,d,e,f0,g,h,i,j,k,l,m,n,o,p);
		};
	};
	var f3 = function(a,b,c,d,e,f0,g,h,i,j,k,l,m,n) {
		return function(o) {
			return f2(a,b,c,d,e,f0,g,h,i,j,k,l,m,n,o);
		};
	};
	var f4 = function(a,b,c,d,e,f0,g,h,i,j,k,l,m) {
		return function(n) {
			return f3(a,b,c,d,e,f0,g,h,i,j,k,l,m,n);
		};
	};
	var f5 = function(a,b,c,d,e,f0,g,h,i,j,k,l) {
		return function(m) {
			return f4(a,b,c,d,e,f0,g,h,i,j,k,l,m);
		};
	};
	var f6 = function(a,b,c,d,e,f0,g,h,i,j,k) {
		return function(l) {
			return f5(a,b,c,d,e,f0,g,h,i,j,k,l);
		};
	};
	var f7 = function(a,b,c,d,e,f0,g,h,i,j) {
		return function(k) {
			return f6(a,b,c,d,e,f0,g,h,i,j,k);
		};
	};
	var f8 = function(a,b,c,d,e,f0,g,h,i) {
		return function(j) {
			return f7(a,b,c,d,e,f0,g,h,i,j);
		};
	};
	var f9 = function(a,b,c,d,e,f0,g,h) {
		return function(i) {
			return f8(a,b,c,d,e,f0,g,h,i);
		};
	};
	var f10 = function(a,b,c,d,e,f0,g) {
		return function(h) {
			return f9(a,b,c,d,e,f0,g,h);
		};
	};
	var f11 = function(a,b,c,d,e,f0) {
		return function(g) {
			return f10(a,b,c,d,e,f0,g);
		};
	};
	var f12 = function(a,b,c,d,e) {
		return function(f0) {
			return f11(a,b,c,d,e,f0);
		};
	};
	var f13 = function(a,b,c,d) {
		return function(e) {
			return f12(a,b,c,d,e);
		};
	};
	var f14 = function(a,b,c) {
		return function(d) {
			return f13(a,b,c,d);
		};
	};
	return thx_Validation.ap(v17,thx_Validation.ap(v16,thx_Validation.ap(v15,thx_Validation.ap(v14,thx_Validation.ap(v13,thx_Validation.ap(v12,thx_Validation.ap(v11,thx_Validation.ap(v10,thx_Validation.ap(v9,thx_Validation.ap(v8,thx_Validation.ap(v7,thx_Validation.ap(v6,thx_Validation.ap(v5,thx_Validation.ap(v4,thx_Validation.ap(v3,thx_Validation.ap(v2,thx_Validation.map(v1,thx_Functions2.curry(function(a,b) {
		return function(c) {
			return f14(a,b,c);
		};
	})),s),s),s),s),s),s),s),s),s),s),s),s),s),s),s),s);
};
thx_Validation.val18 = function(f,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,s) {
	var f1 = f;
	var f = function(a,b,c,d,e,f0,g,h,i,j,k,l,m,n,o,p,q) {
		return function(r) {
			return f1(a,b,c,d,e,f0,g,h,i,j,k,l,m,n,o,p,q,r);
		};
	};
	var f2 = function(a,b,c,d,e,f0,g,h,i,j,k,l,m,n,o,p) {
		return function(q) {
			return f(a,b,c,d,e,f0,g,h,i,j,k,l,m,n,o,p,q);
		};
	};
	var f3 = function(a,b,c,d,e,f0,g,h,i,j,k,l,m,n,o) {
		return function(p) {
			return f2(a,b,c,d,e,f0,g,h,i,j,k,l,m,n,o,p);
		};
	};
	var f4 = function(a,b,c,d,e,f0,g,h,i,j,k,l,m,n) {
		return function(o) {
			return f3(a,b,c,d,e,f0,g,h,i,j,k,l,m,n,o);
		};
	};
	var f5 = function(a,b,c,d,e,f0,g,h,i,j,k,l,m) {
		return function(n) {
			return f4(a,b,c,d,e,f0,g,h,i,j,k,l,m,n);
		};
	};
	var f6 = function(a,b,c,d,e,f0,g,h,i,j,k,l) {
		return function(m) {
			return f5(a,b,c,d,e,f0,g,h,i,j,k,l,m);
		};
	};
	var f7 = function(a,b,c,d,e,f0,g,h,i,j,k) {
		return function(l) {
			return f6(a,b,c,d,e,f0,g,h,i,j,k,l);
		};
	};
	var f8 = function(a,b,c,d,e,f0,g,h,i,j) {
		return function(k) {
			return f7(a,b,c,d,e,f0,g,h,i,j,k);
		};
	};
	var f9 = function(a,b,c,d,e,f0,g,h,i) {
		return function(j) {
			return f8(a,b,c,d,e,f0,g,h,i,j);
		};
	};
	var f10 = function(a,b,c,d,e,f0,g,h) {
		return function(i) {
			return f9(a,b,c,d,e,f0,g,h,i);
		};
	};
	var f11 = function(a,b,c,d,e,f0,g) {
		return function(h) {
			return f10(a,b,c,d,e,f0,g,h);
		};
	};
	var f12 = function(a,b,c,d,e,f0) {
		return function(g) {
			return f11(a,b,c,d,e,f0,g);
		};
	};
	var f13 = function(a,b,c,d,e) {
		return function(f0) {
			return f12(a,b,c,d,e,f0);
		};
	};
	var f14 = function(a,b,c,d) {
		return function(e) {
			return f13(a,b,c,d,e);
		};
	};
	var f15 = function(a,b,c) {
		return function(d) {
			return f14(a,b,c,d);
		};
	};
	return thx_Validation.ap(v18,thx_Validation.ap(v17,thx_Validation.ap(v16,thx_Validation.ap(v15,thx_Validation.ap(v14,thx_Validation.ap(v13,thx_Validation.ap(v12,thx_Validation.ap(v11,thx_Validation.ap(v10,thx_Validation.ap(v9,thx_Validation.ap(v8,thx_Validation.ap(v7,thx_Validation.ap(v6,thx_Validation.ap(v5,thx_Validation.ap(v4,thx_Validation.ap(v3,thx_Validation.ap(v2,thx_Validation.map(v1,thx_Functions2.curry(function(a,b) {
		return function(c) {
			return f15(a,b,c);
		};
	})),s),s),s),s),s),s),s),s),s),s),s),s),s),s),s),s),s);
};
thx_Validation.val19 = function(f,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,s) {
	var f1 = f;
	var f = function(a,b,c,d,e,f0,g,h,i,j,k,l,m,n,o,p,q,r) {
		return function(s) {
			return f1(a,b,c,d,e,f0,g,h,i,j,k,l,m,n,o,p,q,r,s);
		};
	};
	var f2 = function(a,b,c,d,e,f0,g,h,i,j,k,l,m,n,o,p,q) {
		return function(r) {
			return f(a,b,c,d,e,f0,g,h,i,j,k,l,m,n,o,p,q,r);
		};
	};
	var f3 = function(a,b,c,d,e,f0,g,h,i,j,k,l,m,n,o,p) {
		return function(q) {
			return f2(a,b,c,d,e,f0,g,h,i,j,k,l,m,n,o,p,q);
		};
	};
	var f4 = function(a,b,c,d,e,f0,g,h,i,j,k,l,m,n,o) {
		return function(p) {
			return f3(a,b,c,d,e,f0,g,h,i,j,k,l,m,n,o,p);
		};
	};
	var f5 = function(a,b,c,d,e,f0,g,h,i,j,k,l,m,n) {
		return function(o) {
			return f4(a,b,c,d,e,f0,g,h,i,j,k,l,m,n,o);
		};
	};
	var f6 = function(a,b,c,d,e,f0,g,h,i,j,k,l,m) {
		return function(n) {
			return f5(a,b,c,d,e,f0,g,h,i,j,k,l,m,n);
		};
	};
	var f7 = function(a,b,c,d,e,f0,g,h,i,j,k,l) {
		return function(m) {
			return f6(a,b,c,d,e,f0,g,h,i,j,k,l,m);
		};
	};
	var f8 = function(a,b,c,d,e,f0,g,h,i,j,k) {
		return function(l) {
			return f7(a,b,c,d,e,f0,g,h,i,j,k,l);
		};
	};
	var f9 = function(a,b,c,d,e,f0,g,h,i,j) {
		return function(k) {
			return f8(a,b,c,d,e,f0,g,h,i,j,k);
		};
	};
	var f10 = function(a,b,c,d,e,f0,g,h,i) {
		return function(j) {
			return f9(a,b,c,d,e,f0,g,h,i,j);
		};
	};
	var f11 = function(a,b,c,d,e,f0,g,h) {
		return function(i) {
			return f10(a,b,c,d,e,f0,g,h,i);
		};
	};
	var f12 = function(a,b,c,d,e,f0,g) {
		return function(h) {
			return f11(a,b,c,d,e,f0,g,h);
		};
	};
	var f13 = function(a,b,c,d,e,f0) {
		return function(g) {
			return f12(a,b,c,d,e,f0,g);
		};
	};
	var f14 = function(a,b,c,d,e) {
		return function(f0) {
			return f13(a,b,c,d,e,f0);
		};
	};
	var f15 = function(a,b,c,d) {
		return function(e) {
			return f14(a,b,c,d,e);
		};
	};
	var f16 = function(a,b,c) {
		return function(d) {
			return f15(a,b,c,d);
		};
	};
	return thx_Validation.ap(v19,thx_Validation.ap(v18,thx_Validation.ap(v17,thx_Validation.ap(v16,thx_Validation.ap(v15,thx_Validation.ap(v14,thx_Validation.ap(v13,thx_Validation.ap(v12,thx_Validation.ap(v11,thx_Validation.ap(v10,thx_Validation.ap(v9,thx_Validation.ap(v8,thx_Validation.ap(v7,thx_Validation.ap(v6,thx_Validation.ap(v5,thx_Validation.ap(v4,thx_Validation.ap(v3,thx_Validation.ap(v2,thx_Validation.map(v1,thx_Functions2.curry(function(a,b) {
		return function(c) {
			return f16(a,b,c);
		};
	})),s),s),s),s),s),s),s),s),s),s),s),s),s),s),s),s),s),s);
};
thx_Validation.val20 = function(f,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,s) {
	var f1 = f;
	var f = function(a,b,c,d,e,f0,g,h,i,j,k,l,m,n,o,p,q,r,s) {
		return function(t) {
			return f1(a,b,c,d,e,f0,g,h,i,j,k,l,m,n,o,p,q,r,s,t);
		};
	};
	var f2 = function(a,b,c,d,e,f0,g,h,i,j,k,l,m,n,o,p,q,r) {
		return function(s) {
			return f(a,b,c,d,e,f0,g,h,i,j,k,l,m,n,o,p,q,r,s);
		};
	};
	var f3 = function(a,b,c,d,e,f0,g,h,i,j,k,l,m,n,o,p,q) {
		return function(r) {
			return f2(a,b,c,d,e,f0,g,h,i,j,k,l,m,n,o,p,q,r);
		};
	};
	var f4 = function(a,b,c,d,e,f0,g,h,i,j,k,l,m,n,o,p) {
		return function(q) {
			return f3(a,b,c,d,e,f0,g,h,i,j,k,l,m,n,o,p,q);
		};
	};
	var f5 = function(a,b,c,d,e,f0,g,h,i,j,k,l,m,n,o) {
		return function(p) {
			return f4(a,b,c,d,e,f0,g,h,i,j,k,l,m,n,o,p);
		};
	};
	var f6 = function(a,b,c,d,e,f0,g,h,i,j,k,l,m,n) {
		return function(o) {
			return f5(a,b,c,d,e,f0,g,h,i,j,k,l,m,n,o);
		};
	};
	var f7 = function(a,b,c,d,e,f0,g,h,i,j,k,l,m) {
		return function(n) {
			return f6(a,b,c,d,e,f0,g,h,i,j,k,l,m,n);
		};
	};
	var f8 = function(a,b,c,d,e,f0,g,h,i,j,k,l) {
		return function(m) {
			return f7(a,b,c,d,e,f0,g,h,i,j,k,l,m);
		};
	};
	var f9 = function(a,b,c,d,e,f0,g,h,i,j,k) {
		return function(l) {
			return f8(a,b,c,d,e,f0,g,h,i,j,k,l);
		};
	};
	var f10 = function(a,b,c,d,e,f0,g,h,i,j) {
		return function(k) {
			return f9(a,b,c,d,e,f0,g,h,i,j,k);
		};
	};
	var f11 = function(a,b,c,d,e,f0,g,h,i) {
		return function(j) {
			return f10(a,b,c,d,e,f0,g,h,i,j);
		};
	};
	var f12 = function(a,b,c,d,e,f0,g,h) {
		return function(i) {
			return f11(a,b,c,d,e,f0,g,h,i);
		};
	};
	var f13 = function(a,b,c,d,e,f0,g) {
		return function(h) {
			return f12(a,b,c,d,e,f0,g,h);
		};
	};
	var f14 = function(a,b,c,d,e,f0) {
		return function(g) {
			return f13(a,b,c,d,e,f0,g);
		};
	};
	var f15 = function(a,b,c,d,e) {
		return function(f0) {
			return f14(a,b,c,d,e,f0);
		};
	};
	var f16 = function(a,b,c,d) {
		return function(e) {
			return f15(a,b,c,d,e);
		};
	};
	var f17 = function(a,b,c) {
		return function(d) {
			return f16(a,b,c,d);
		};
	};
	return thx_Validation.ap(v20,thx_Validation.ap(v19,thx_Validation.ap(v18,thx_Validation.ap(v17,thx_Validation.ap(v16,thx_Validation.ap(v15,thx_Validation.ap(v14,thx_Validation.ap(v13,thx_Validation.ap(v12,thx_Validation.ap(v11,thx_Validation.ap(v10,thx_Validation.ap(v9,thx_Validation.ap(v8,thx_Validation.ap(v7,thx_Validation.ap(v6,thx_Validation.ap(v5,thx_Validation.ap(v4,thx_Validation.ap(v3,thx_Validation.ap(v2,thx_Validation.map(v1,thx_Functions2.curry(function(a,b) {
		return function(c) {
			return f17(a,b,c);
		};
	})),s),s),s),s),s),s),s),s),s),s),s),s),s),s),s),s),s),s),s);
};
var thx_ValidationExtensions = function() { };
thx_ValidationExtensions.__name__ = "thx.ValidationExtensions";
thx_ValidationExtensions.leftMapNel = function(n,f) {
	return thx_Eithers.leftMap(n,function(n) {
		return thx_Nel.map(n,f);
	});
};
thx_ValidationExtensions.ensureNel = function(v,p,error) {
	if(v._hx_index == 1) {
		var a = v.value;
		if(p(a)) {
			return v;
		} else {
			return thx_Either.Left(thx_Nel.pure(error));
		}
	} else {
		var left = v;
		return left;
	}
};
thx_ValidationExtensions.appendVNel = function(target,item) {
	switch(target._hx_index) {
	case 0:
		var _g = target.value;
		switch(item._hx_index) {
		case 0:
			var errors1 = _g;
			var errors2 = item.value;
			return thx_Either.Left(thx_Nel.append(errors1,errors2));
		case 1:
			var errors = _g;
			var value = item.value;
			return thx_Either.Left(errors);
		}
		break;
	case 1:
		var _g = target.value;
		switch(item._hx_index) {
		case 0:
			var values = _g;
			var errors = item.value;
			return thx_Either.Left(errors);
		case 1:
			var values = _g;
			var value = item.value;
			return thx_Either.Right(thx_Arrays.append(values,value));
		}
		break;
	}
};
thx_ValidationExtensions.appendValidation = function(target,item) {
	return thx_ValidationExtensions.appendVNel(target,thx_Eithers.toVNel(item));
};
thx_ValidationExtensions.appendVNels = function(target,items) {
	return thx_Arrays.reduce(items,thx_ValidationExtensions.appendVNel,target);
};
thx_ValidationExtensions.appendValidations = function(target,items) {
	return thx_Arrays.reduce(items,thx_ValidationExtensions.appendValidation,target);
};
var thx_csv_Csv = function() { };
thx_csv_Csv.__name__ = "thx.csv.Csv";
thx_csv_Csv.decode = function(csv) {
	return thx_csv_Dsv.decode(csv,thx_csv_Csv.decodeOptions);
};
thx_csv_Csv.decodeObjects = function(csv) {
	return thx_csv_Dsv.arrayToObjects(thx_csv_Dsv.decode(csv,thx_csv_Csv.decodeOptions));
};
thx_csv_Csv.encode = function(data) {
	return thx_csv_Dsv.encode(data,thx_csv_Csv.encodeOptions);
};
thx_csv_Csv.encodeObjects = function(data) {
	return thx_csv_Dsv.encodeObjects(data,thx_csv_Csv.encodeOptions);
};
var thx_csv_Dsv = function() { };
thx_csv_Dsv.__name__ = "thx.csv.Dsv";
thx_csv_Dsv.decode = function(dsv,options) {
	if(null == options.quote) {
		options.quote = "\"";
	}
	if(null == options.escapedQuote) {
		options.escapedQuote = options.quote == "\"" ? "\"\"" : "\\" + options.quote;
	}
	if(null == options.trimValues) {
		options.trimValues = false;
	}
	if(null == options.trimEmptyLines) {
		options.trimEmptyLines = true;
	}
	if(options.trimEmptyLines) {
		dsv = thx_Strings.trimCharsRight(thx_Strings.trimCharsLeft(dsv,"\n\r"),"\n\r");
	}
	var result = dsv == "" ? [] : new thx_csv_core_Parser(options.delimiter,options.quote,options.escapedQuote).parse(dsv);
	if(options.trimValues) {
		var _g = 0;
		while(_g < result.length) {
			var row = result[_g];
			++_g;
			var _g1 = 0;
			var _g2 = row.length;
			while(_g1 < _g2) {
				var i = _g1++;
				row[i] = StringTools.trim(row[i]);
			}
		}
	}
	return result;
};
thx_csv_Dsv.decodeObjects = function(dsv,options) {
	return thx_csv_Dsv.arrayToObjects(thx_csv_Dsv.decode(dsv,options));
};
thx_csv_Dsv.arrayToObjects = function(arr) {
	var columns = arr[0];
	if(null == columns) {
		return [];
	}
	var result = [];
	var len = columns.length;
	var row;
	var ob;
	var _g = 1;
	var _g1 = arr.length;
	while(_g < _g1) {
		var r = _g++;
		ob = { };
		row = arr[r];
		var _g2 = 0;
		var _g3 = len;
		while(_g2 < _g3) {
			var i = _g2++;
			ob[columns[i]] = row[i];
		}
		result.push(ob);
	}
	return result;
};
thx_csv_Dsv.encode = function(data,options) {
	if(null == options.quote) {
		options.quote = "\"";
	}
	if(null == options.escapedQuote) {
		options.escapedQuote = options.quote == "\"" ? "\"\"" : "\\" + options.quote;
	}
	if(null == options.newline) {
		options.newline = "\n";
	}
	var result = new Array(data.length);
	var _g = 0;
	var _g1 = data.length;
	while(_g < _g1) {
		var i = _g++;
		var row = data[i];
		var result1 = new Array(row.length);
		var _g2 = 0;
		var _g11 = row.length;
		while(_g2 < _g11) {
			var i1 = _g2++;
			var cell = row[i1];
			result1[i1] = thx_csv_Dsv.requiresQuotes(cell,options.delimiter,options.quote) ? thx_csv_Dsv.applyQuotes(cell,options.quote,options.escapedQuote) : cell;
		}
		result[i] = result1.join(options.delimiter);
	}
	return result.join(options.newline);
};
thx_csv_Dsv.encodeObjects = function(data,options) {
	return thx_csv_Dsv.encode(thx_csv_Dsv.objectsToArray(data,[]),options);
};
thx_csv_Dsv.objectsToArray = function(objects,columns) {
	if(null == columns) {
		return thx_csv_Dsv.objectsToArray(objects,[]);
	}
	var map_h = Object.create(null);
	var result = [columns];
	var collector;
	var row;
	var _g = 0;
	var _g1 = columns.length;
	while(_g < _g1) {
		var i = _g++;
		map_h[columns[i]] = i;
	}
	var _g = 0;
	while(_g < objects.length) {
		var object = objects[_g];
		++_g;
		collector = [];
		row = [];
		var _g1 = 0;
		var _g2 = Reflect.fields(object);
		while(_g1 < _g2.length) {
			var field = _g2[_g1];
			++_g1;
			var index = map_h[field];
			if(null == index) {
				collector.push(field);
			} else {
				row[index] = Reflect.field(object,field);
			}
		}
		if(collector.length > 0) {
			return thx_csv_Dsv.objectsToArray(objects,columns.concat(collector));
		} else {
			result.push(row);
		}
	}
	return result;
};
thx_csv_Dsv.requiresQuotes = function(value,delimiter,quote) {
	if(!(value.indexOf(delimiter) >= 0 || value.indexOf(quote) >= 0 || value.indexOf("\n") >= 0)) {
		return value.indexOf("\r") >= 0;
	} else {
		return true;
	}
};
thx_csv_Dsv.applyQuotes = function(value,quote,escapedQuote) {
	value = StringTools.replace(value,quote,escapedQuote);
	return "" + quote + value + quote;
};
var thx_csv_core_Parser = function(delimiter,quote,escapedQuote) {
	this.delimiter = delimiter;
	this.quote = quote;
	this.escapedQuote = escapedQuote;
};
thx_csv_core_Parser.__name__ = "thx.csv.core.Parser";
thx_csv_core_Parser.prototype = {
	delimiter: null
	,quote: null
	,escapedQuote: null
	,result: null
	,pos: null
	,len: null
	,delimiterLength: null
	,quoteLength: null
	,escapedQuoteLength: null
	,buffer: null
	,row: null
	,s: null
	,parse: function(s) {
		this.s = s;
		this.result = [];
		this.pos = 0;
		this.len = s.length;
		this.delimiterLength = this.delimiter.length;
		this.quoteLength = this.quote.length;
		this.escapedQuoteLength = this.escapedQuote.length;
		this.buffer = new StringBuf();
		this.row = [];
		try {
			var t;
			while(this.pos < this.len) if(this.s.substring(this.pos,this.pos + this.quoteLength) == this.quote && this.buffer.b.length == 0) {
				this.pos += this.quoteLength;
				while(this.pos < this.len) if(this.s.substring(this.pos,this.pos + this.escapedQuoteLength) == this.escapedQuote) {
					this.pushBuffer(this.quote);
					this.pos += this.escapedQuoteLength;
				} else if(this.s.substring(this.pos,this.pos + this.quoteLength) == this.quote) {
					this.pos += this.quoteLength;
					var next = this.s.substring(this.pos,this.pos + 1);
					while(next == " " || this.delimiter != "\t" && next == "\t") {
						++this.pos;
						next = this.s.substring(this.pos,this.pos + 1);
					}
					break;
				} else {
					this.pushBuffer(this.s.substring(this.pos,this.pos + 1));
					++this.pos;
				}
			} else if(this.s.substring(this.pos,this.pos + this.delimiterLength) == this.delimiter) {
				this.pushCell();
				this.pos += this.delimiterLength;
			} else {
				t = this.s.substring(this.pos,this.pos + 2);
				if(t == "\n\r" || t == "\r\n") {
					this.pos += 2;
					this.pushCell();
					this.pushRow();
					continue;
				}
				t = this.s.substring(this.pos,this.pos + 1);
				if(t == "\n" || t == "\r") {
					++this.pos;
					this.pushCell();
					this.pushRow();
					continue;
				}
				this.pushBuffer(this.s.substring(this.pos,this.pos + 1));
				++this.pos;
			}
		} catch( _g ) {
			var e = haxe_Exception.caught(_g).unwrap();
			console.log("thx/csv/core/Parser.hx:39:",e);
			throw new thx_Error("unable to parse at pos " + this.pos + ": " + Std.string(e),null,{ fileName : "thx/csv/core/Parser.hx", lineNumber : 40, className : "thx.csv.core.Parser", methodName : "parse"});
		}
		this.pushCell();
		this.pushRow();
		return this.result;
	}
	,pushCell: function() {
		this.row.push(this.buffer.b);
		this.buffer = new StringBuf();
	}
	,pushBuffer: function(char) {
		this.buffer.b += char == null ? "null" : "" + char;
	}
	,pushRow: function() {
		this.result.push(this.row);
		this.row = [];
	}
	,loop: function() {
		var t;
		while(this.pos < this.len) if(this.s.substring(this.pos,this.pos + this.quoteLength) == this.quote && this.buffer.b.length == 0) {
			this.pos += this.quoteLength;
			while(this.pos < this.len) if(this.s.substring(this.pos,this.pos + this.escapedQuoteLength) == this.escapedQuote) {
				this.pushBuffer(this.quote);
				this.pos += this.escapedQuoteLength;
			} else if(this.s.substring(this.pos,this.pos + this.quoteLength) == this.quote) {
				this.pos += this.quoteLength;
				var next = this.s.substring(this.pos,this.pos + 1);
				while(next == " " || this.delimiter != "\t" && next == "\t") {
					++this.pos;
					next = this.s.substring(this.pos,this.pos + 1);
				}
				break;
			} else {
				this.pushBuffer(this.s.substring(this.pos,this.pos + 1));
				++this.pos;
			}
		} else if(this.s.substring(this.pos,this.pos + this.delimiterLength) == this.delimiter) {
			this.pushCell();
			this.pos += this.delimiterLength;
		} else {
			t = this.s.substring(this.pos,this.pos + 2);
			if(t == "\n\r" || t == "\r\n") {
				this.pos += 2;
				this.pushCell();
				this.pushRow();
				continue;
			}
			t = this.s.substring(this.pos,this.pos + 1);
			if(t == "\n" || t == "\r") {
				++this.pos;
				this.pushCell();
				this.pushRow();
				continue;
			}
			this.pushBuffer(this.s.substring(this.pos,this.pos + 1));
			++this.pos;
		}
	}
	,__class__: thx_csv_core_Parser
};
var thx_error_ErrorWrapper = function(message,innerError,stack,pos) {
	thx_Error.call(this,message,stack,pos);
	this.innerError = innerError;
};
thx_error_ErrorWrapper.__name__ = "thx.error.ErrorWrapper";
thx_error_ErrorWrapper.__super__ = thx_Error;
thx_error_ErrorWrapper.prototype = $extend(thx_Error.prototype,{
	innerError: null
	,__class__: thx_error_ErrorWrapper
});
var thx_fp_Map = {};
thx_fp_Map.empty = function() {
	return thx_fp_MapImpl.Tip;
};
thx_fp_Map.singleton = function(k,v) {
	return thx_fp_MapImpl.Bin(1,k,v,thx_fp_MapImpl.Tip,thx_fp_MapImpl.Tip);
};
thx_fp_Map.bin = function(k,v,lhs,rhs) {
	return thx_fp_MapImpl.Bin(thx_fp_Map.size(lhs) + thx_fp_Map.size(rhs) + 1,k,v,lhs,rhs);
};
thx_fp_Map.fromNative = function(map,comparator) {
	var r = thx_fp_MapImpl.Tip;
	var key = map.keys();
	while(key.hasNext()) {
		var key1 = key.next();
		r = thx_fp_Map.insert(r,key1,map.get(key1),comparator);
	}
	return r;
};
thx_fp_Map.lookup = function(this1,key,comparator) {
	switch(this1._hx_index) {
	case 0:
		return haxe_ds_Option.None;
	case 1:
		var rhs = this1.rhs;
		var lhs = this1.lhs;
		var xvalue = this1.value;
		var xkey = this1.key;
		var size = this1.size;
		var c = comparator(key,xkey);
		switch(c._hx_index) {
		case 0:
			return thx_fp_Map.lookup(lhs,key,comparator);
		case 1:
			return thx_fp_Map.lookup(rhs,key,comparator);
		case 2:
			return haxe_ds_Option.Some(xvalue);
		}
		break;
	}
};
thx_fp_Map.lookupTuple = function(this1,key,comparator) {
	switch(this1._hx_index) {
	case 0:
		return haxe_ds_Option.None;
	case 1:
		var rhs = this1.rhs;
		var lhs = this1.lhs;
		var xvalue = this1.value;
		var xkey = this1.key;
		var size = this1.size;
		var c = comparator(key,xkey);
		switch(c._hx_index) {
		case 0:
			return thx_fp_Map.lookupTuple(lhs,key,comparator);
		case 1:
			return thx_fp_Map.lookupTuple(rhs,key,comparator);
		case 2:
			var this1 = { _0 : xkey, _1 : xvalue};
			return haxe_ds_Option.Some(this1);
		}
		break;
	}
};
thx_fp_Map.delete = function(this1,key,comparator) {
	switch(this1._hx_index) {
	case 0:
		return thx_fp_MapImpl.Tip;
	case 1:
		var rhs = this1.rhs;
		var lhs = this1.lhs;
		var x = this1.value;
		var kx = this1.key;
		var size = this1.size;
		switch(comparator(key,kx)._hx_index) {
		case 0:
			return thx_fp_Map.balance(kx,x,thx_fp_Map.delete(lhs,key,comparator),rhs);
		case 1:
			return thx_fp_Map.balance(kx,x,lhs,thx_fp_Map.delete(rhs,key,comparator));
		case 2:
			return thx_fp_Map.glue(lhs,rhs);
		}
		break;
	}
};
thx_fp_Map.insert = function(this1,kx,x,comparator) {
	switch(this1._hx_index) {
	case 0:
		return thx_fp_MapImpl.Bin(1,kx,x,thx_fp_MapImpl.Tip,thx_fp_MapImpl.Tip);
	case 1:
		var rhs = this1.rhs;
		var lhs = this1.lhs;
		var y = this1.value;
		var ky = this1.key;
		var sz = this1.size;
		switch(comparator(kx,ky)._hx_index) {
		case 0:
			return thx_fp_Map.balance(ky,y,thx_fp_Map.insert(lhs,kx,x,comparator),rhs);
		case 1:
			return thx_fp_Map.balance(ky,y,lhs,thx_fp_Map.insert(rhs,kx,x,comparator));
		case 2:
			return thx_fp_MapImpl.Bin(sz,kx,x,lhs,rhs);
		}
		break;
	}
};
thx_fp_Map.foldLeft = function(this1,b,f) {
	switch(this1._hx_index) {
	case 0:
		return b;
	case 1:
		var _g = this1.key;
		var _g = this1.size;
		var r = this1.rhs;
		var l = this1.lhs;
		var x = this1.value;
		return thx_fp_Map.foldLeft(r,thx_fp_Map.foldLeft(l,f(b,x),f),f);
	}
};
thx_fp_Map.map = function(this1,f) {
	switch(this1._hx_index) {
	case 0:
		return thx_fp_MapImpl.Tip;
	case 1:
		var rhs = this1.rhs;
		var lhs = this1.lhs;
		var y = this1.value;
		var ky = this1.key;
		var sz = this1.size;
		return thx_fp_MapImpl.Bin(sz,ky,f(y),thx_fp_Map.map(lhs,f),thx_fp_Map.map(rhs,f));
	}
};
thx_fp_Map.values = function(this1) {
	return thx_fp_Map.foldLeft(this1,[],function(acc,v) {
		acc.push(v);
		return acc;
	});
};
thx_fp_Map.foldLeftKeys = function(this1,b,f) {
	switch(this1._hx_index) {
	case 0:
		return b;
	case 1:
		var _g = this1.value;
		var _g = this1.size;
		var r = this1.rhs;
		var l = this1.lhs;
		var kx = this1.key;
		return thx_fp_Map.foldLeftKeys(r,thx_fp_Map.foldLeftKeys(l,f(b,kx),f),f);
	}
};
thx_fp_Map.foldLeftAll = function(this1,b,f) {
	switch(this1._hx_index) {
	case 0:
		return b;
	case 1:
		var _g = this1.size;
		var r = this1.rhs;
		var l = this1.lhs;
		var x = this1.value;
		var kx = this1.key;
		return thx_fp_Map.foldLeftAll(r,thx_fp_Map.foldLeftAll(l,f(b,kx,x),f),f);
	}
};
thx_fp_Map.foldLeftTuples = function(this1,b,f) {
	switch(this1._hx_index) {
	case 0:
		return b;
	case 1:
		var _g = this1.size;
		var r = this1.rhs;
		var l = this1.lhs;
		var x = this1.value;
		var kx = this1.key;
		var this1 = { _0 : kx, _1 : x};
		return thx_fp_Map.foldLeftTuples(r,thx_fp_Map.foldLeftTuples(l,f(b,this1),f),f);
	}
};
thx_fp_Map.size = function(this1) {
	switch(this1._hx_index) {
	case 0:
		return 0;
	case 1:
		var _g = this1.rhs;
		var _g = this1.lhs;
		var _g = this1.value;
		var _g = this1.key;
		var size = this1.size;
		return size;
	}
};
thx_fp_Map.balance = function(k,x,lhs,rhs) {
	var ls = thx_fp_Map.size(lhs);
	var rs = thx_fp_Map.size(rhs);
	var xs = ls + rs + 1;
	if(ls + rs <= 1) {
		return thx_fp_MapImpl.Bin(xs,k,x,lhs,rhs);
	} else if(rs >= 5 * ls) {
		return thx_fp_Map.rotateLeft(k,x,lhs,rhs);
	} else if(ls >= 5 * rs) {
		return thx_fp_Map.rotateRight(k,x,lhs,rhs);
	} else {
		return thx_fp_MapImpl.Bin(xs,k,x,lhs,rhs);
	}
};
thx_fp_Map.glue = function(this1,that) {
	if(this1._hx_index == 0) {
		return that;
	} else if(that._hx_index == 0) {
		return this1;
	} else {
		var l = this1;
		var r = that;
		if(thx_fp_Map.size(l) > thx_fp_Map.size(r)) {
			var t = thx_fp_Map.deleteFindMax(l);
			return thx_fp_Map.balance(t.k,t.x,t.t,r);
		} else {
			var l = this1;
			var r = that;
			var t = thx_fp_Map.deleteFindMin(r);
			return thx_fp_Map.balance(t.k,t.x,l,t.t);
		}
	}
};
thx_fp_Map.deleteFindMin = function(map) {
	switch(map._hx_index) {
	case 0:
		throw new thx_Error("can not return the minimal element of an empty map",null,{ fileName : "thx/fp/Map.hx", lineNumber : 161, className : "thx.fp._Map.Map_Impl_", methodName : "deleteFindMin"});
	case 1:
		var _g = map.rhs;
		var _g1 = map.lhs;
		var _g2 = map.value;
		var _g3 = map.key;
		var _g4 = map.size;
		if(_g1._hx_index == 0) {
			var r = _g;
			var k = _g3;
			var x = _g2;
			return { k : k, x : x, t : r};
		} else {
			var r = _g;
			var k = _g3;
			var x = _g2;
			var l = _g1;
			var t = thx_fp_Map.deleteFindMin(l);
			return { k : t.k, x : t.x, t : thx_fp_Map.balance(k,x,t.t,r)};
		}
		break;
	}
};
thx_fp_Map.deleteFindMax = function(map) {
	switch(map._hx_index) {
	case 0:
		throw new thx_Error("can not return the maximal element of an empty map",null,{ fileName : "thx/fp/Map.hx", lineNumber : 171, className : "thx.fp._Map.Map_Impl_", methodName : "deleteFindMax"});
	case 1:
		var _g = map.rhs;
		var _g1 = map.lhs;
		var _g2 = map.value;
		var _g3 = map.key;
		var _g4 = map.size;
		if(_g._hx_index == 0) {
			var k = _g3;
			var x = _g2;
			var l = _g1;
			return { k : k, x : x, t : l};
		} else {
			var k = _g3;
			var x = _g2;
			var l = _g1;
			var r = _g;
			var t = thx_fp_Map.deleteFindMax(r);
			return { k : t.k, x : t.x, t : thx_fp_Map.balance(k,x,l,t.t)};
		}
		break;
	}
};
thx_fp_Map.rotateLeft = function(k,x,lhs,rhs) {
	if(rhs._hx_index == 1) {
		var _g = rhs.value;
		var _g = rhs.key;
		var _g = rhs.size;
		var ry = rhs.rhs;
		var ly = rhs.lhs;
		if(thx_fp_Map.size(ly) < 2 * thx_fp_Map.size(ry)) {
			return thx_fp_Map.singleLeft(k,x,lhs,rhs);
		} else {
			return thx_fp_Map.doubleLeft(k,x,lhs,rhs);
		}
	} else {
		return thx_fp_Map.doubleLeft(k,x,lhs,rhs);
	}
};
thx_fp_Map.rotateRight = function(k,x,lhs,rhs) {
	if(lhs._hx_index == 1) {
		var _g = lhs.value;
		var _g = lhs.key;
		var _g = lhs.size;
		var ry = lhs.rhs;
		var ly = lhs.lhs;
		if(thx_fp_Map.size(ry) < 2 * thx_fp_Map.size(ly)) {
			return thx_fp_Map.singleRight(k,x,lhs,rhs);
		} else {
			return thx_fp_Map.doubleRight(k,x,lhs,rhs);
		}
	} else {
		return thx_fp_Map.doubleRight(k,x,lhs,rhs);
	}
};
thx_fp_Map.singleLeft = function(k1,x1,t1,rhs) {
	if(rhs._hx_index == 1) {
		var _g = rhs.size;
		var t3 = rhs.rhs;
		var t2 = rhs.lhs;
		var x2 = rhs.value;
		var k2 = rhs.key;
		var lhs = thx_fp_MapImpl.Bin(thx_fp_Map.size(t1) + thx_fp_Map.size(t2) + 1,k1,x1,t1,t2);
		return thx_fp_MapImpl.Bin(thx_fp_Map.size(lhs) + thx_fp_Map.size(t3) + 1,k2,x2,lhs,t3);
	} else {
		throw new thx_Error("damn it, this should never happen",null,{ fileName : "thx/fp/Map.hx", lineNumber : 193, className : "thx.fp._Map.Map_Impl_", methodName : "singleLeft"});
	}
};
thx_fp_Map.singleRight = function(k1,x1,lhs,t3) {
	if(lhs._hx_index == 1) {
		var _g = lhs.size;
		var t2 = lhs.rhs;
		var t1 = lhs.lhs;
		var x2 = lhs.value;
		var k2 = lhs.key;
		var rhs = thx_fp_MapImpl.Bin(thx_fp_Map.size(t2) + thx_fp_Map.size(t3) + 1,k1,x1,t2,t3);
		return thx_fp_MapImpl.Bin(thx_fp_Map.size(t1) + thx_fp_Map.size(rhs) + 1,k2,x2,t1,rhs);
	} else {
		throw new thx_Error("damn it, this should never happen",null,{ fileName : "thx/fp/Map.hx", lineNumber : 199, className : "thx.fp._Map.Map_Impl_", methodName : "singleRight"});
	}
};
thx_fp_Map.doubleLeft = function(k1,x1,t1,rhs) {
	if(rhs._hx_index == 1) {
		var _g = rhs.lhs;
		var _g1 = rhs.size;
		if(_g._hx_index == 1) {
			var _g1 = _g.size;
			var t4 = rhs.rhs;
			var k2 = rhs.key;
			var x2 = rhs.value;
			var t3 = _g.rhs;
			var t2 = _g.lhs;
			var x3 = _g.value;
			var k3 = _g.key;
			var lhs = thx_fp_MapImpl.Bin(thx_fp_Map.size(t1) + thx_fp_Map.size(t2) + 1,k1,x1,t1,t2);
			var rhs = thx_fp_MapImpl.Bin(thx_fp_Map.size(t3) + thx_fp_Map.size(t4) + 1,k2,x2,t3,t4);
			return thx_fp_MapImpl.Bin(thx_fp_Map.size(lhs) + thx_fp_Map.size(rhs) + 1,k3,x3,lhs,rhs);
		} else {
			throw new thx_Error("damn it, this should never happen",null,{ fileName : "thx/fp/Map.hx", lineNumber : 206, className : "thx.fp._Map.Map_Impl_", methodName : "doubleLeft"});
		}
	} else {
		throw new thx_Error("damn it, this should never happen",null,{ fileName : "thx/fp/Map.hx", lineNumber : 206, className : "thx.fp._Map.Map_Impl_", methodName : "doubleLeft"});
	}
};
thx_fp_Map.doubleRight = function(k1,x1,lhs,t4) {
	if(lhs._hx_index == 1) {
		var _g = lhs.rhs;
		var _g1 = lhs.size;
		if(_g._hx_index == 1) {
			var _g1 = _g.size;
			var k2 = lhs.key;
			var x2 = lhs.value;
			var t1 = lhs.lhs;
			var t3 = _g.rhs;
			var t2 = _g.lhs;
			var x3 = _g.value;
			var k3 = _g.key;
			var lhs = thx_fp_MapImpl.Bin(thx_fp_Map.size(t1) + thx_fp_Map.size(t2) + 1,k2,x2,t1,t2);
			var rhs = thx_fp_MapImpl.Bin(thx_fp_Map.size(t3) + thx_fp_Map.size(t4) + 1,k1,x1,t3,t4);
			return thx_fp_MapImpl.Bin(thx_fp_Map.size(lhs) + thx_fp_Map.size(rhs) + 1,k3,x3,lhs,rhs);
		} else {
			throw new thx_Error("damn it, this should never happen",null,{ fileName : "thx/fp/Map.hx", lineNumber : 213, className : "thx.fp._Map.Map_Impl_", methodName : "doubleRight"});
		}
	} else {
		throw new thx_Error("damn it, this should never happen",null,{ fileName : "thx/fp/Map.hx", lineNumber : 213, className : "thx.fp._Map.Map_Impl_", methodName : "doubleRight"});
	}
};
var thx_fp_MapImpl = $hxEnums["thx.fp.MapImpl"] = { __ename__ : "thx.fp.MapImpl", __constructs__ : ["Tip","Bin"]
	,Tip: {_hx_index:0,__enum__:"thx.fp.MapImpl",toString:$estr}
	,Bin: ($_=function(size,key,value,lhs,rhs) { return {_hx_index:1,size:size,key:key,value:value,lhs:lhs,rhs:rhs,__enum__:"thx.fp.MapImpl",toString:$estr}; },$_.__params__ = ["size","key","value","lhs","rhs"],$_)
};
var util_Debug = function() {
};
util_Debug.__name__ = "util.Debug";
util_Debug.debugFavicon = function() {
	if(window.location.href.indexOf("docs") != -1) {
		var title = window.document.title;
		window.document.title = "🐞 " + title;
	}
};
util_Debug.prototype = {
	__class__: util_Debug
};
var util_Emoji = function() { };
util_Emoji.__name__ = "util.Emoji";
function $iterator(o) { if( o instanceof Array ) return function() { return new haxe_iterators_ArrayIterator(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = String;
String.__name__ = "String";
Array.__name__ = "Array";
Date.prototype.__class__ = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
haxe_ds_ObjectMap.count = 0;
js_Boot.__toStr = ({ }).toString;
DateTools.DAYS_OF_MONTH = [31,28,31,30,31,30,31,31,30,31,30,31];
haxe_Int32._mul = Math.imul != null ? Math.imul : function(a,b) {
	return a * (b & 65535) + (a * (b >>> 16) << 16 | 0) | 0;
};
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
thx_Dates.order = thx_Ord.fromIntComparison(thx_Dates.compare);
thx_Floats.TOLERANCE = 10e-5;
thx_Floats.EPSILON = 1e-9;
thx_Floats.pattern_parse = new EReg("^(\\+|-)?(:?\\d+(\\.\\d+)?(e-?\\d+)?|nan|NaN|NAN)$","");
thx_Floats.pattern_inf = new EReg("^\\+?(inf|Inf|INF)$","");
thx_Floats.pattern_neg_inf = new EReg("^-(inf|Inf|INF)$","");
thx_Floats.order = thx_Ord.fromIntComparison(thx_Floats.compare);
thx_Floats.monoid = { zero : 0.0, append : function(a,b) {
	return a + b;
}};
thx_Ints.pattern_parse = new EReg("^[ \t\r\n]*[+-]?(\\d+|0x[0-9A-F]+)","i");
thx_Ints.BASE = "0123456789abcdefghijklmnopqrstuvwxyz";
thx_Ints.order = function(i0,i1) {
	if(i0 > i1) {
		return thx_OrderingImpl.GT;
	} else if(i0 == i1) {
		return thx_OrderingImpl.EQ;
	} else {
		return thx_OrderingImpl.LT;
	}
};
thx_Ints.monoid = { zero : 0, append : function(a,b) {
	return a + b;
}};
thx_Orderings.monoid = { zero : thx_OrderingImpl.EQ, append : function(o0,o1) {
	switch(o0._hx_index) {
	case 0:
		return thx_OrderingImpl.LT;
	case 1:
		return thx_OrderingImpl.GT;
	case 2:
		return o1;
	}
}};
thx_Strings.order = thx_Ord.fromIntComparison(thx_Strings.compare);
thx_Strings.HASCODE_MAX = 2147483647;
thx_Strings.HASCODE_MUL = 31;
thx_Strings.monoid = { zero : "", append : function(a,b) {
	return a + b;
}};
thx_Strings.UCWORDS = new EReg("[^a-zA-Z]([a-z])","g");
thx_Strings.IS_BREAKINGWHITESPACE = new EReg("[^\t\n\r ]","");
thx_Strings.IS_ALPHA = new EReg("[^a-zA-Z]","");
thx_Strings.UCWORDSWS = new EReg("[ \t\r\n][a-z]","g");
thx_Strings.ALPHANUM = new EReg("^[a-z0-9]+$","i");
thx_Strings.DIGITS = new EReg("^[0-9]+$","");
thx_Strings.STRIPTAGS = new EReg("</?[a-z]+[^>]*>","gi");
thx_Strings.WSG = new EReg("[ \t\r\n]+","g");
thx_Strings.SPLIT_LINES = new EReg("\r\n|\n\r|\n|\r","g");
thx_Strings.CANONICALIZE_LINES = new EReg("\r\n|\n\r|\r","g");
thx_csv_Csv.encodeOptions = { delimiter : ",", quote : "\"", escapedQuote : "\"\"", newline : "\n"};
thx_csv_Csv.decodeOptions = { delimiter : ",", quote : "\"", escapedQuote : "\"\"", trimValues : false, trimEmptyLines : true};
thx_fp_Map.delta = 5;
thx_fp_Map.ratio = 2;
util_Emoji.blowFish = "🐡";
FonkeeMain.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
